// type Long = protobuf.Long;

// /** Namespace luck. */
// declare namespace luck {

//     /** Namespace protobuf. */
//     namespace protobuf {

//         /** Properties of a PlayerPB. */
//         interface IPlayerPB {

//             /** PlayerPB playerBasePB */
//             playerBasePB: luck.protobuf.IPlayerBasePB;

//             /** PlayerPB weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** PlayerPB cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** PlayerPB clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** PlayerPB itemBag */
//             itemBag: luck.protobuf.IItemBagPB;

//             /** PlayerPB checkNodeList */
//             checkNodeList?: (luck.protobuf.ICheckNode[]|null);

//             /** PlayerPB playerExtraPB */
//             playerExtraPB: luck.protobuf.IPlayerExtraPB;

//             /** PlayerPB mainTaskList */
//             mainTaskList?: (luck.protobuf.IMainTaskPB[]|null);

//             /** PlayerPB dailyTaskList */
//             dailyTaskList?: (luck.protobuf.IDailyTaskPB[]|null);

//             /** PlayerPB weekTaskList */
//             weekTaskList?: (luck.protobuf.IWeekTaskPB[]|null);

//             /** PlayerPB rewardTaskList */
//             rewardTaskList?: (luck.protobuf.IRewardTaskPB[]|null);

//             /** PlayerPB dailyTaskActivity */
//             dailyTaskActivity: number;

//             /** PlayerPB dailyVitalityRewardList */
//             dailyVitalityRewardList?: (number[]|null);

//             /** PlayerPB havePVETeamId */
//             havePVETeamId: (number|Long);

//             /** PlayerPB achievementTaskList */
//             achievementTaskList?: (luck.protobuf.IAchievementTaskPB[]|null);

//             /** PlayerPB achievementPoint */
//             achievementPoint: (number|Long);

//             /** PlayerPB achievementType1List */
//             achievementType1List?: (luck.protobuf.IAchievementTypePB[]|null);

//             /** PlayerPB achievementType2List */
//             achievementType2List?: (luck.protobuf.IAchievementTypePB[]|null);

//             /** PlayerPB activityTaskList */
//             activityTaskList?: (luck.protobuf.IActivityTaskPB[]|null);

//             /** PlayerPB gameSystem */
//             gameSystem: luck.protobuf.IGameSystemPB;

//             /** PlayerPB activityTaskRewardList */
//             activityTaskRewardList?: (luck.protobuf.IactivityTaskRewardPB[]|null);

//             /** PlayerPB specialTaskList */
//             specialTaskList?: (luck.protobuf.ISpecialTaskPB[]|null);

//             /** PlayerPB roleList */
//             roleList?: (luck.protobuf.IRolePB[]|null);

//             /** PlayerPB gangTaskActivity */
//             gangTaskActivity: number;

//             /** PlayerPB gangVitalityRewardList */
//             gangVitalityRewardList?: (number[]|null);

//             /** PlayerPB gangTaskList */
//             gangTaskList?: (luck.protobuf.IGangTaskPB[]|null);
//         }

//         /** Represents a PlayerPB. */
//         class PlayerPB implements IPlayerPB {

//             /**
//              * Constructs a new PlayerPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPlayerPB);

//             /** PlayerPB playerBasePB. */
//             public playerBasePB: luck.protobuf.IPlayerBasePB;

//             /** PlayerPB weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** PlayerPB cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** PlayerPB clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** PlayerPB itemBag. */
//             public itemBag: luck.protobuf.IItemBagPB;

//             /** PlayerPB checkNodeList. */
//             public checkNodeList: luck.protobuf.ICheckNode[];

//             /** PlayerPB playerExtraPB. */
//             public playerExtraPB: luck.protobuf.IPlayerExtraPB;

//             /** PlayerPB mainTaskList. */
//             public mainTaskList: luck.protobuf.IMainTaskPB[];

//             /** PlayerPB dailyTaskList. */
//             public dailyTaskList: luck.protobuf.IDailyTaskPB[];

//             /** PlayerPB weekTaskList. */
//             public weekTaskList: luck.protobuf.IWeekTaskPB[];

//             /** PlayerPB rewardTaskList. */
//             public rewardTaskList: luck.protobuf.IRewardTaskPB[];

//             /** PlayerPB dailyTaskActivity. */
//             public dailyTaskActivity: number;

//             /** PlayerPB dailyVitalityRewardList. */
//             public dailyVitalityRewardList: number[];

//             /** PlayerPB havePVETeamId. */
//             public havePVETeamId: (number|Long);

//             /** PlayerPB achievementTaskList. */
//             public achievementTaskList: luck.protobuf.IAchievementTaskPB[];

//             /** PlayerPB achievementPoint. */
//             public achievementPoint: (number|Long);

//             /** PlayerPB achievementType1List. */
//             public achievementType1List: luck.protobuf.IAchievementTypePB[];

//             /** PlayerPB achievementType2List. */
//             public achievementType2List: luck.protobuf.IAchievementTypePB[];

//             /** PlayerPB activityTaskList. */
//             public activityTaskList: luck.protobuf.IActivityTaskPB[];

//             /** PlayerPB gameSystem. */
//             public gameSystem: luck.protobuf.IGameSystemPB;

//             /** PlayerPB activityTaskRewardList. */
//             public activityTaskRewardList: luck.protobuf.IactivityTaskRewardPB[];

//             /** PlayerPB specialTaskList. */
//             public specialTaskList: luck.protobuf.ISpecialTaskPB[];

//             /** PlayerPB roleList. */
//             public roleList: luck.protobuf.IRolePB[];

//             /** PlayerPB gangTaskActivity. */
//             public gangTaskActivity: number;

//             /** PlayerPB gangVitalityRewardList. */
//             public gangVitalityRewardList: number[];

//             /** PlayerPB gangTaskList. */
//             public gangTaskList: luck.protobuf.IGangTaskPB[];

//             /**
//              * Creates a new PlayerPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PlayerPB instance
//              */
//             public static create(properties?: luck.protobuf.IPlayerPB): luck.protobuf.PlayerPB;

//             /**
//              * Encodes the specified PlayerPB message. Does not implicitly {@link luck.protobuf.PlayerPB.verify|verify} messages.
//              * @param message PlayerPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPlayerPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PlayerPB message, length delimited. Does not implicitly {@link luck.protobuf.PlayerPB.verify|verify} messages.
//              * @param message PlayerPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPlayerPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PlayerPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PlayerPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PlayerPB;

//             /**
//              * Decodes a PlayerPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PlayerPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PlayerPB;

//             /**
//              * Verifies a PlayerPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PlayerBasePB. */
//         interface IPlayerBasePB {

//             /** PlayerBasePB playerId */
//             playerId: (number|Long);

//             /** PlayerBasePB name */
//             name: string;

//             /** PlayerBasePB gold */
//             gold: (number|Long);

//             /** PlayerBasePB lv */
//             lv: number;

//             /** PlayerBasePB exp */
//             exp: number;

//             /** PlayerBasePB vipLv */
//             vipLv: number;

//             /** PlayerBasePB vipExp */
//             vipExp: number;

//             /** PlayerBasePB body */
//             body: number;

//             /** PlayerBasePB diamond */
//             diamond: (number|Long);

//             /** PlayerBasePB pvpStep */
//             pvpStep: number;

//             /** PlayerBasePB pvpWinNum */
//             pvpWinNum: number;

//             /** PlayerBasePB pvpNum */
//             pvpNum: number;

//             /** PlayerBasePB guildId */
//             guildId: (number|Long);

//             /** PlayerBasePB dressUid */
//             dressUid: (number|Long);

//             /** PlayerBasePB weapon1Uid */
//             weapon1Uid: (number|Long);

//             /** PlayerBasePB weapon2Uid */
//             weapon2Uid: (number|Long);

//             /** PlayerBasePB weapon3Uid */
//             weapon3Uid: (number|Long);

//             /** PlayerBasePB card1Uid */
//             card1Uid: (number|Long);

//             /** PlayerBasePB card2Uid */
//             card2Uid: (number|Long);

//             /** PlayerBasePB card3Uid */
//             card3Uid: (number|Long);

//             /** PlayerBasePB roleId */
//             roleId: number;

//             /** PlayerBasePB roleList */
//             roleList?: (number[]|null);

//             /** PlayerBasePB weaponList */
//             weaponList?: (number[]|null);

//             /** PlayerBasePB cardList */
//             cardList?: (number[]|null);

//             /** PlayerBasePB clothesList */
//             clothesList?: (number[]|null);

//             /** PlayerBasePB bodyRefreshTime */
//             bodyRefreshTime: (number|Long);

//             /** PlayerBasePB gangContribute */
//             gangContribute: (number|Long);

//             /** PlayerBasePB rechargeRmb */
//             rechargeRmb: (number|Long);

//             /** PlayerBasePB registerTime */
//             registerTime: (number|Long);

//             /** PlayerBasePB personManifesto */
//             personManifesto?: (string|null);
//         }

//         /** Represents a PlayerBasePB. */
//         class PlayerBasePB implements IPlayerBasePB {

//             /**
//              * Constructs a new PlayerBasePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPlayerBasePB);

//             /** PlayerBasePB playerId. */
//             public playerId: (number|Long);

//             /** PlayerBasePB name. */
//             public name: string;

//             /** PlayerBasePB gold. */
//             public gold: (number|Long);

//             /** PlayerBasePB lv. */
//             public lv: number;

//             /** PlayerBasePB exp. */
//             public exp: number;

//             /** PlayerBasePB vipLv. */
//             public vipLv: number;

//             /** PlayerBasePB vipExp. */
//             public vipExp: number;

//             /** PlayerBasePB body. */
//             public body: number;

//             /** PlayerBasePB diamond. */
//             public diamond: (number|Long);

//             /** PlayerBasePB pvpStep. */
//             public pvpStep: number;

//             /** PlayerBasePB pvpWinNum. */
//             public pvpWinNum: number;

//             /** PlayerBasePB pvpNum. */
//             public pvpNum: number;

//             /** PlayerBasePB guildId. */
//             public guildId: (number|Long);

//             /** PlayerBasePB dressUid. */
//             public dressUid: (number|Long);

//             /** PlayerBasePB weapon1Uid. */
//             public weapon1Uid: (number|Long);

//             /** PlayerBasePB weapon2Uid. */
//             public weapon2Uid: (number|Long);

//             /** PlayerBasePB weapon3Uid. */
//             public weapon3Uid: (number|Long);

//             /** PlayerBasePB card1Uid. */
//             public card1Uid: (number|Long);

//             /** PlayerBasePB card2Uid. */
//             public card2Uid: (number|Long);

//             /** PlayerBasePB card3Uid. */
//             public card3Uid: (number|Long);

//             /** PlayerBasePB roleId. */
//             public roleId: number;

//             /** PlayerBasePB roleList. */
//             public roleList: number[];

//             /** PlayerBasePB weaponList. */
//             public weaponList: number[];

//             /** PlayerBasePB cardList. */
//             public cardList: number[];

//             /** PlayerBasePB clothesList. */
//             public clothesList: number[];

//             /** PlayerBasePB bodyRefreshTime. */
//             public bodyRefreshTime: (number|Long);

//             /** PlayerBasePB gangContribute. */
//             public gangContribute: (number|Long);

//             /** PlayerBasePB rechargeRmb. */
//             public rechargeRmb: (number|Long);

//             /** PlayerBasePB registerTime. */
//             public registerTime: (number|Long);

//             /** PlayerBasePB personManifesto. */
//             public personManifesto: string;

//             /**
//              * Creates a new PlayerBasePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PlayerBasePB instance
//              */
//             public static create(properties?: luck.protobuf.IPlayerBasePB): luck.protobuf.PlayerBasePB;

//             /**
//              * Encodes the specified PlayerBasePB message. Does not implicitly {@link luck.protobuf.PlayerBasePB.verify|verify} messages.
//              * @param message PlayerBasePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPlayerBasePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PlayerBasePB message, length delimited. Does not implicitly {@link luck.protobuf.PlayerBasePB.verify|verify} messages.
//              * @param message PlayerBasePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPlayerBasePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PlayerBasePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PlayerBasePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PlayerBasePB;

//             /**
//              * Decodes a PlayerBasePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PlayerBasePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PlayerBasePB;

//             /**
//              * Verifies a PlayerBasePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a WeaponPB. */
//         interface IWeaponPB {

//             /** WeaponPB uid */
//             uid: (number|Long);

//             /** WeaponPB id */
//             id: number;

//             /** WeaponPB lv */
//             lv: number;

//             /** WeaponPB attackList */
//             attackList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** WeaponPB strengthenList */
//             strengthenList?: (luck.protobuf.IPropertyFloatPB[]|null);

//             /** WeaponPB hurtList */
//             hurtList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** WeaponPB baptizeNum */
//             baptizeNum: number;

//             /** WeaponPB holeCountMax */
//             holeCountMax: number;

//             /** WeaponPB advancedCount */
//             advancedCount: number;

//             /** WeaponPB inlayList */
//             inlayList?: (luck.protobuf.IWeaponInlayPB[]|null);

//             /** WeaponPB isRecast */
//             isRecast: number;

//             /** WeaponPB recastAttackList */
//             recastAttackList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** WeaponPB recastStrengthenList */
//             recastStrengthenList?: (luck.protobuf.IPropertyFloatPB[]|null);

//             /** WeaponPB recastHurtList */
//             recastHurtList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** WeaponPB exp */
//             exp: number;

//             /** WeaponPB baptizePropertyList */
//             baptizePropertyList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** WeaponPB isBaptize */
//             isBaptize: number;

//             /** WeaponPB baptizeMedianList */
//             baptizeMedianList?: (luck.protobuf.IPropertyIntPB[]|null);
//         }

//         /** Represents a WeaponPB. */
//         class WeaponPB implements IWeaponPB {

//             /**
//              * Constructs a new WeaponPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IWeaponPB);

//             /** WeaponPB uid. */
//             public uid: (number|Long);

//             /** WeaponPB id. */
//             public id: number;

//             /** WeaponPB lv. */
//             public lv: number;

//             /** WeaponPB attackList. */
//             public attackList: luck.protobuf.IPropertyIntPB[];

//             /** WeaponPB strengthenList. */
//             public strengthenList: luck.protobuf.IPropertyFloatPB[];

//             /** WeaponPB hurtList. */
//             public hurtList: luck.protobuf.IPropertyIntPB[];

//             /** WeaponPB baptizeNum. */
//             public baptizeNum: number;

//             /** WeaponPB holeCountMax. */
//             public holeCountMax: number;

//             /** WeaponPB advancedCount. */
//             public advancedCount: number;

//             /** WeaponPB inlayList. */
//             public inlayList: luck.protobuf.IWeaponInlayPB[];

//             /** WeaponPB isRecast. */
//             public isRecast: number;

//             /** WeaponPB recastAttackList. */
//             public recastAttackList: luck.protobuf.IPropertyIntPB[];

//             /** WeaponPB recastStrengthenList. */
//             public recastStrengthenList: luck.protobuf.IPropertyFloatPB[];

//             /** WeaponPB recastHurtList. */
//             public recastHurtList: luck.protobuf.IPropertyIntPB[];

//             /** WeaponPB exp. */
//             public exp: number;

//             /** WeaponPB baptizePropertyList. */
//             public baptizePropertyList: luck.protobuf.IPropertyIntPB[];

//             /** WeaponPB isBaptize. */
//             public isBaptize: number;

//             /** WeaponPB baptizeMedianList. */
//             public baptizeMedianList: luck.protobuf.IPropertyIntPB[];

//             /**
//              * Creates a new WeaponPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns WeaponPB instance
//              */
//             public static create(properties?: luck.protobuf.IWeaponPB): luck.protobuf.WeaponPB;

//             /**
//              * Encodes the specified WeaponPB message. Does not implicitly {@link luck.protobuf.WeaponPB.verify|verify} messages.
//              * @param message WeaponPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IWeaponPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified WeaponPB message, length delimited. Does not implicitly {@link luck.protobuf.WeaponPB.verify|verify} messages.
//              * @param message WeaponPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IWeaponPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a WeaponPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns WeaponPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.WeaponPB;

//             /**
//              * Decodes a WeaponPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns WeaponPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.WeaponPB;

//             /**
//              * Verifies a WeaponPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CardPB. */
//         interface ICardPB {

//             /** CardPB uid */
//             uid: (number|Long);

//             /** CardPB id */
//             id: number;

//             /** CardPB lv */
//             lv: number;

//             /** CardPB propertyTypeList */
//             propertyTypeList?: (luck.protobuf.IPropertyFloatPB[]|null);

//             /** CardPB baptizeNum */
//             baptizeNum: number;

//             /** CardPB holeCountMax */
//             holeCountMax: number;

//             /** CardPB advancedCount */
//             advancedCount: number;

//             /** CardPB inlayList */
//             inlayList?: (number[]|null);

//             /** CardPB exp */
//             exp: number;

//             /** CardPB baptizePropertyList */
//             baptizePropertyList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** CardPB isBaptize */
//             isBaptize: number;

//             /** CardPB baptizeMedianList */
//             baptizeMedianList?: (luck.protobuf.IPropertyIntPB[]|null);
//         }

//         /** Represents a CardPB. */
//         class CardPB implements ICardPB {

//             /**
//              * Constructs a new CardPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICardPB);

//             /** CardPB uid. */
//             public uid: (number|Long);

//             /** CardPB id. */
//             public id: number;

//             /** CardPB lv. */
//             public lv: number;

//             /** CardPB propertyTypeList. */
//             public propertyTypeList: luck.protobuf.IPropertyFloatPB[];

//             /** CardPB baptizeNum. */
//             public baptizeNum: number;

//             /** CardPB holeCountMax. */
//             public holeCountMax: number;

//             /** CardPB advancedCount. */
//             public advancedCount: number;

//             /** CardPB inlayList. */
//             public inlayList: number[];

//             /** CardPB exp. */
//             public exp: number;

//             /** CardPB baptizePropertyList. */
//             public baptizePropertyList: luck.protobuf.IPropertyIntPB[];

//             /** CardPB isBaptize. */
//             public isBaptize: number;

//             /** CardPB baptizeMedianList. */
//             public baptizeMedianList: luck.protobuf.IPropertyIntPB[];

//             /**
//              * Creates a new CardPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CardPB instance
//              */
//             public static create(properties?: luck.protobuf.ICardPB): luck.protobuf.CardPB;

//             /**
//              * Encodes the specified CardPB message. Does not implicitly {@link luck.protobuf.CardPB.verify|verify} messages.
//              * @param message CardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CardPB message, length delimited. Does not implicitly {@link luck.protobuf.CardPB.verify|verify} messages.
//              * @param message CardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CardPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CardPB;

//             /**
//              * Decodes a CardPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CardPB;

//             /**
//              * Verifies a CardPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ClothesPB. */
//         interface IClothesPB {

//             /** ClothesPB uid */
//             uid: (number|Long);

//             /** ClothesPB id */
//             id: number;

//             /** ClothesPB lv */
//             lv: number;

//             /** ClothesPB HpMax */
//             HpMax: number;

//             /** ClothesPB resistanceList */
//             resistanceList?: (luck.protobuf.IPropertyFloatPB[]|null);

//             /** ClothesPB reductionList */
//             reductionList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** ClothesPB baptizeNum */
//             baptizeNum: number;

//             /** ClothesPB holeCountMax */
//             holeCountMax: number;

//             /** ClothesPB advancedCount */
//             advancedCount: number;

//             /** ClothesPB inlayList */
//             inlayList?: (luck.protobuf.IClothesInlayPB[]|null);

//             /** ClothesPB isRecast */
//             isRecast: number;

//             /** ClothesPB recastHpMax */
//             recastHpMax: number;

//             /** ClothesPB recastResistanceList */
//             recastResistanceList?: (luck.protobuf.IPropertyFloatPB[]|null);

//             /** ClothesPB recastReductionList */
//             recastReductionList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** ClothesPB exp */
//             exp: number;

//             /** ClothesPB baptizePropertyList */
//             baptizePropertyList?: (luck.protobuf.IPropertyIntPB[]|null);

//             /** ClothesPB isBaptize */
//             isBaptize: number;

//             /** ClothesPB baptizeMedianList */
//             baptizeMedianList?: (luck.protobuf.IPropertyIntPB[]|null);
//         }

//         /** Represents a ClothesPB. */
//         class ClothesPB implements IClothesPB {

//             /**
//              * Constructs a new ClothesPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IClothesPB);

//             /** ClothesPB uid. */
//             public uid: (number|Long);

//             /** ClothesPB id. */
//             public id: number;

//             /** ClothesPB lv. */
//             public lv: number;

//             /** ClothesPB HpMax. */
//             public HpMax: number;

//             /** ClothesPB resistanceList. */
//             public resistanceList: luck.protobuf.IPropertyFloatPB[];

//             /** ClothesPB reductionList. */
//             public reductionList: luck.protobuf.IPropertyIntPB[];

//             /** ClothesPB baptizeNum. */
//             public baptizeNum: number;

//             /** ClothesPB holeCountMax. */
//             public holeCountMax: number;

//             /** ClothesPB advancedCount. */
//             public advancedCount: number;

//             /** ClothesPB inlayList. */
//             public inlayList: luck.protobuf.IClothesInlayPB[];

//             /** ClothesPB isRecast. */
//             public isRecast: number;

//             /** ClothesPB recastHpMax. */
//             public recastHpMax: number;

//             /** ClothesPB recastResistanceList. */
//             public recastResistanceList: luck.protobuf.IPropertyFloatPB[];

//             /** ClothesPB recastReductionList. */
//             public recastReductionList: luck.protobuf.IPropertyIntPB[];

//             /** ClothesPB exp. */
//             public exp: number;

//             /** ClothesPB baptizePropertyList. */
//             public baptizePropertyList: luck.protobuf.IPropertyIntPB[];

//             /** ClothesPB isBaptize. */
//             public isBaptize: number;

//             /** ClothesPB baptizeMedianList. */
//             public baptizeMedianList: luck.protobuf.IPropertyIntPB[];

//             /**
//              * Creates a new ClothesPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ClothesPB instance
//              */
//             public static create(properties?: luck.protobuf.IClothesPB): luck.protobuf.ClothesPB;

//             /**
//              * Encodes the specified ClothesPB message. Does not implicitly {@link luck.protobuf.ClothesPB.verify|verify} messages.
//              * @param message ClothesPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IClothesPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ClothesPB message, length delimited. Does not implicitly {@link luck.protobuf.ClothesPB.verify|verify} messages.
//              * @param message ClothesPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IClothesPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ClothesPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ClothesPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ClothesPB;

//             /**
//              * Decodes a ClothesPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ClothesPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ClothesPB;

//             /**
//              * Verifies a ClothesPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PropertyIntPB. */
//         interface IPropertyIntPB {

//             /** PropertyIntPB type */
//             type: number;

//             /** PropertyIntPB value */
//             value: number;
//         }

//         /** Represents a PropertyIntPB. */
//         class PropertyIntPB implements IPropertyIntPB {

//             /**
//              * Constructs a new PropertyIntPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPropertyIntPB);

//             /** PropertyIntPB type. */
//             public type: number;

//             /** PropertyIntPB value. */
//             public value: number;

//             /**
//              * Creates a new PropertyIntPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PropertyIntPB instance
//              */
//             public static create(properties?: luck.protobuf.IPropertyIntPB): luck.protobuf.PropertyIntPB;

//             /**
//              * Encodes the specified PropertyIntPB message. Does not implicitly {@link luck.protobuf.PropertyIntPB.verify|verify} messages.
//              * @param message PropertyIntPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPropertyIntPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PropertyIntPB message, length delimited. Does not implicitly {@link luck.protobuf.PropertyIntPB.verify|verify} messages.
//              * @param message PropertyIntPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPropertyIntPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PropertyIntPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PropertyIntPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PropertyIntPB;

//             /**
//              * Decodes a PropertyIntPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PropertyIntPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PropertyIntPB;

//             /**
//              * Verifies a PropertyIntPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PropertyFloatPB. */
//         interface IPropertyFloatPB {

//             /** PropertyFloatPB type */
//             type: number;

//             /** PropertyFloatPB value */
//             value: number;
//         }

//         /** Represents a PropertyFloatPB. */
//         class PropertyFloatPB implements IPropertyFloatPB {

//             /**
//              * Constructs a new PropertyFloatPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPropertyFloatPB);

//             /** PropertyFloatPB type. */
//             public type: number;

//             /** PropertyFloatPB value. */
//             public value: number;

//             /**
//              * Creates a new PropertyFloatPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PropertyFloatPB instance
//              */
//             public static create(properties?: luck.protobuf.IPropertyFloatPB): luck.protobuf.PropertyFloatPB;

//             /**
//              * Encodes the specified PropertyFloatPB message. Does not implicitly {@link luck.protobuf.PropertyFloatPB.verify|verify} messages.
//              * @param message PropertyFloatPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPropertyFloatPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PropertyFloatPB message, length delimited. Does not implicitly {@link luck.protobuf.PropertyFloatPB.verify|verify} messages.
//              * @param message PropertyFloatPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPropertyFloatPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PropertyFloatPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PropertyFloatPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PropertyFloatPB;

//             /**
//              * Decodes a PropertyFloatPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PropertyFloatPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PropertyFloatPB;

//             /**
//              * Verifies a PropertyFloatPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PropPB. */
//         interface IPropPB {

//             /** PropPB id */
//             id: number;

//             /** PropPB num */
//             num: number;
//         }

//         /** Represents a PropPB. */
//         class PropPB implements IPropPB {

//             /**
//              * Constructs a new PropPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPropPB);

//             /** PropPB id. */
//             public id: number;

//             /** PropPB num. */
//             public num: number;

//             /**
//              * Creates a new PropPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PropPB instance
//              */
//             public static create(properties?: luck.protobuf.IPropPB): luck.protobuf.PropPB;

//             /**
//              * Encodes the specified PropPB message. Does not implicitly {@link luck.protobuf.PropPB.verify|verify} messages.
//              * @param message PropPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPropPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PropPB message, length delimited. Does not implicitly {@link luck.protobuf.PropPB.verify|verify} messages.
//              * @param message PropPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPropPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PropPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PropPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PropPB;

//             /**
//              * Decodes a PropPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PropPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PropPB;

//             /**
//              * Verifies a PropPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a MaterialsPB. */
//         interface IMaterialsPB {

//             /** MaterialsPB id */
//             id: number;

//             /** MaterialsPB num */
//             num: number;
//         }

//         /** Represents a MaterialsPB. */
//         class MaterialsPB implements IMaterialsPB {

//             /**
//              * Constructs a new MaterialsPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IMaterialsPB);

//             /** MaterialsPB id. */
//             public id: number;

//             /** MaterialsPB num. */
//             public num: number;

//             /**
//              * Creates a new MaterialsPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns MaterialsPB instance
//              */
//             public static create(properties?: luck.protobuf.IMaterialsPB): luck.protobuf.MaterialsPB;

//             /**
//              * Encodes the specified MaterialsPB message. Does not implicitly {@link luck.protobuf.MaterialsPB.verify|verify} messages.
//              * @param message MaterialsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IMaterialsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified MaterialsPB message, length delimited. Does not implicitly {@link luck.protobuf.MaterialsPB.verify|verify} messages.
//              * @param message MaterialsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IMaterialsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a MaterialsPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns MaterialsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.MaterialsPB;

//             /**
//              * Decodes a MaterialsPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns MaterialsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.MaterialsPB;

//             /**
//              * Verifies a MaterialsPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ItemBagPB. */
//         interface IItemBagPB {

//             /** ItemBagPB propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** ItemBagPB materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents an ItemBagPB. */
//         class ItemBagPB implements IItemBagPB {

//             /**
//              * Constructs a new ItemBagPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IItemBagPB);

//             /** ItemBagPB propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** ItemBagPB materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new ItemBagPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ItemBagPB instance
//              */
//             public static create(properties?: luck.protobuf.IItemBagPB): luck.protobuf.ItemBagPB;

//             /**
//              * Encodes the specified ItemBagPB message. Does not implicitly {@link luck.protobuf.ItemBagPB.verify|verify} messages.
//              * @param message ItemBagPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IItemBagPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ItemBagPB message, length delimited. Does not implicitly {@link luck.protobuf.ItemBagPB.verify|verify} messages.
//              * @param message ItemBagPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IItemBagPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ItemBagPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ItemBagPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ItemBagPB;

//             /**
//              * Decodes an ItemBagPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ItemBagPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ItemBagPB;

//             /**
//              * Verifies an ItemBagPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an OperationPB. */
//         interface IOperationPB {

//             /** OperationPB pid */
//             pid: (number|Long);

//             /** OperationPB operationType */
//             operationType: number;

//             /** OperationPB rocker */
//             rocker?: (luck.protobuf.IVectorPB|null);
//         }

//         /** Represents an OperationPB. */
//         class OperationPB implements IOperationPB {

//             /**
//              * Constructs a new OperationPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IOperationPB);

//             /** OperationPB pid. */
//             public pid: (number|Long);

//             /** OperationPB operationType. */
//             public operationType: number;

//             /** OperationPB rocker. */
//             public rocker?: (luck.protobuf.IVectorPB|null);

//             /**
//              * Creates a new OperationPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns OperationPB instance
//              */
//             public static create(properties?: luck.protobuf.IOperationPB): luck.protobuf.OperationPB;

//             /**
//              * Encodes the specified OperationPB message. Does not implicitly {@link luck.protobuf.OperationPB.verify|verify} messages.
//              * @param message OperationPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IOperationPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified OperationPB message, length delimited. Does not implicitly {@link luck.protobuf.OperationPB.verify|verify} messages.
//              * @param message OperationPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IOperationPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an OperationPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns OperationPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.OperationPB;

//             /**
//              * Decodes an OperationPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns OperationPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.OperationPB;

//             /**
//              * Verifies an OperationPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a VectorPB. */
//         interface IVectorPB {

//             /** VectorPB X */
//             X: number;

//             /** VectorPB Y */
//             Y: number;
//         }

//         /** Represents a VectorPB. */
//         class VectorPB implements IVectorPB {

//             /**
//              * Constructs a new VectorPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IVectorPB);

//             /** VectorPB X. */
//             public X: number;

//             /** VectorPB Y. */
//             public Y: number;

//             /**
//              * Creates a new VectorPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns VectorPB instance
//              */
//             public static create(properties?: luck.protobuf.IVectorPB): luck.protobuf.VectorPB;

//             /**
//              * Encodes the specified VectorPB message. Does not implicitly {@link luck.protobuf.VectorPB.verify|verify} messages.
//              * @param message VectorPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IVectorPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified VectorPB message, length delimited. Does not implicitly {@link luck.protobuf.VectorPB.verify|verify} messages.
//              * @param message VectorPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IVectorPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a VectorPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns VectorPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.VectorPB;

//             /**
//              * Decodes a VectorPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns VectorPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.VectorPB;

//             /**
//              * Verifies a VectorPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoomPB. */
//         interface IRoomPB {

//             /** RoomPB playerIdList */
//             playerIdList?: ((number|Long)[]|null);

//             /** RoomPB roomId */
//             roomId: (number|Long);

//             /** RoomPB roomName */
//             roomName: string;

//             /** RoomPB seed */
//             seed: number;
//         }

//         /** Represents a RoomPB. */
//         class RoomPB implements IRoomPB {

//             /**
//              * Constructs a new RoomPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoomPB);

//             /** RoomPB playerIdList. */
//             public playerIdList: (number|Long)[];

//             /** RoomPB roomId. */
//             public roomId: (number|Long);

//             /** RoomPB roomName. */
//             public roomName: string;

//             /** RoomPB seed. */
//             public seed: number;

//             /**
//              * Creates a new RoomPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoomPB instance
//              */
//             public static create(properties?: luck.protobuf.IRoomPB): luck.protobuf.RoomPB;

//             /**
//              * Encodes the specified RoomPB message. Does not implicitly {@link luck.protobuf.RoomPB.verify|verify} messages.
//              * @param message RoomPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoomPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoomPB message, length delimited. Does not implicitly {@link luck.protobuf.RoomPB.verify|verify} messages.
//              * @param message RoomPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoomPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoomPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoomPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoomPB;

//             /**
//              * Decodes a RoomPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoomPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoomPB;

//             /**
//              * Verifies a RoomPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CheckNode. */
//         interface ICheckNode {

//             /** CheckNode nodeId */
//             nodeId: number;

//             /** CheckNode firstPass */
//             firstPass: number;

//             /** CheckNode passNum */
//             passNum: number;
//         }

//         /** Represents a CheckNode. */
//         class CheckNode implements ICheckNode {

//             /**
//              * Constructs a new CheckNode.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICheckNode);

//             /** CheckNode nodeId. */
//             public nodeId: number;

//             /** CheckNode firstPass. */
//             public firstPass: number;

//             /** CheckNode passNum. */
//             public passNum: number;

//             /**
//              * Creates a new CheckNode instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CheckNode instance
//              */
//             public static create(properties?: luck.protobuf.ICheckNode): luck.protobuf.CheckNode;

//             /**
//              * Encodes the specified CheckNode message. Does not implicitly {@link luck.protobuf.CheckNode.verify|verify} messages.
//              * @param message CheckNode message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICheckNode, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CheckNode message, length delimited. Does not implicitly {@link luck.protobuf.CheckNode.verify|verify} messages.
//              * @param message CheckNode message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICheckNode, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CheckNode message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CheckNode
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CheckNode;

//             /**
//              * Decodes a CheckNode message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CheckNode
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CheckNode;

//             /**
//              * Verifies a CheckNode message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PlayerExtraPB. */
//         interface IPlayerExtraPB {

//             /** PlayerExtraPB sginInTime */
//             sginInTime: (number|Long);

//             /** PlayerExtraPB sginCount */
//             sginCount: number;

//             /** PlayerExtraPB serverTime */
//             serverTime: (number|Long);

//             /** PlayerExtraPB allCount */
//             allCount: number;

//             /** PlayerExtraPB telePhone */
//             telePhone: string;

//             /** PlayerExtraPB email */
//             email: string;

//             /** PlayerExtraPB isCheckName */
//             isCheckName: number;

//             /** PlayerExtraPB refuseFriendReq */
//             refuseFriendReq: number;

//             /** PlayerExtraPB refuseStrangerNews */
//             refuseStrangerNews: number;

//             /** PlayerExtraPB refuseClubInvite */
//             refuseClubInvite: number;

//             /** PlayerExtraPB refuseSysInfo */
//             refuseSysInfo: number;

//             /** PlayerExtraPB refuseTeamInvite */
//             refuseTeamInvite: number;

//             /** PlayerExtraPB refuseBattleInvite */
//             refuseBattleInvite: number;

//             /** PlayerExtraPB closeBarrage */
//             closeBarrage: number;

//             /** PlayerExtraPB lastEmailTime */
//             lastEmailTime: (number|Long);

//             /** PlayerExtraPB packGrid */
//             packGrid: number;

//             /** PlayerExtraPB shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);

//             /** PlayerExtraPB activityTollgateList */
//             activityTollgateList?: (luck.protobuf.IActivityTollgatePB[]|null);

//             /** PlayerExtraPB activityChapterList */
//             activityChapterList?: (luck.protobuf.IActivityChapterPB[]|null);

//             /** PlayerExtraPB loveBento */
//             loveBento: luck.protobuf.ILoveBentoPB;

//             /** PlayerExtraPB gangShopGoodsList */
//             gangShopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);

//             /** PlayerExtraPB vipRewardList */
//             vipRewardList?: (luck.protobuf.IVipRewardPB[]|null);

//             /** PlayerExtraPB staminaBuyTimes */
//             staminaBuyTimes: number;

//             /** PlayerExtraPB lastRefreshStaminaTime */
//             lastRefreshStaminaTime: (number|Long);

//             /** PlayerExtraPB lastWorldChatTime */
//             lastWorldChatTime: (number|Long);

//             /** PlayerExtraPB monthCardList */
//             monthCardList?: (luck.protobuf.IMonthCardPB[]|null);

//             /** PlayerExtraPB growthCapital */
//             growthCapital: number;

//             /** PlayerExtraPB totalLoginTimes */
//             totalLoginTimes: number;

//             /** PlayerExtraPB greenWeaponCollect */
//             greenWeaponCollect: number;

//             /** PlayerExtraPB blueWeaponCollect */
//             blueWeaponCollect: number;

//             /** PlayerExtraPB purpleWeaponCollect */
//             purpleWeaponCollect: number;

//             /** PlayerExtraPB orangeWeaponCollect */
//             orangeWeaponCollect: number;

//             /** PlayerExtraPB redWeaponCollect */
//             redWeaponCollect: number;

//             /** PlayerExtraPB lastLoginTime */
//             lastLoginTime: (number|Long);

//             /** PlayerExtraPB digging */
//             digging: luck.protobuf.IDiggingPB;

//             /** PlayerExtraPB activityShopList */
//             activityShopList?: (luck.protobuf.IShopGoodsPB[]|null);

//             /** PlayerExtraPB activityLottery */
//             activityLottery?: (luck.protobuf.IActivityLotteryPB[]|null);

//             /** PlayerExtraPB gainBuffList */
//             gainBuffList?: (luck.protobuf.IGainBuffPB[]|null);

//             /** PlayerExtraPB noviceGuideNum */
//             noviceGuideNum: number;

//             /** PlayerExtraPB isFirstLotteryTwo */
//             isFirstLotteryTwo: number;

//             /** PlayerExtraPB headPortraitId */
//             headPortraitId: number;

//             /** PlayerExtraPB headPortraitList */
//             headPortraitList?: (number[]|null);

//             /** PlayerExtraPB rahmenId */
//             rahmenId: number;

//             /** PlayerExtraPB rahmenList */
//             rahmenList?: (number[]|null);

//             /** PlayerExtraPB lastGangSginInTime */
//             lastGangSginInTime: (number|Long);
//         }

//         /** Represents a PlayerExtraPB. */
//         class PlayerExtraPB implements IPlayerExtraPB {

//             /**
//              * Constructs a new PlayerExtraPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPlayerExtraPB);

//             /** PlayerExtraPB sginInTime. */
//             public sginInTime: (number|Long);

//             /** PlayerExtraPB sginCount. */
//             public sginCount: number;

//             /** PlayerExtraPB serverTime. */
//             public serverTime: (number|Long);

//             /** PlayerExtraPB allCount. */
//             public allCount: number;

//             /** PlayerExtraPB telePhone. */
//             public telePhone: string;

//             /** PlayerExtraPB email. */
//             public email: string;

//             /** PlayerExtraPB isCheckName. */
//             public isCheckName: number;

//             /** PlayerExtraPB refuseFriendReq. */
//             public refuseFriendReq: number;

//             /** PlayerExtraPB refuseStrangerNews. */
//             public refuseStrangerNews: number;

//             /** PlayerExtraPB refuseClubInvite. */
//             public refuseClubInvite: number;

//             /** PlayerExtraPB refuseSysInfo. */
//             public refuseSysInfo: number;

//             /** PlayerExtraPB refuseTeamInvite. */
//             public refuseTeamInvite: number;

//             /** PlayerExtraPB refuseBattleInvite. */
//             public refuseBattleInvite: number;

//             /** PlayerExtraPB closeBarrage. */
//             public closeBarrage: number;

//             /** PlayerExtraPB lastEmailTime. */
//             public lastEmailTime: (number|Long);

//             /** PlayerExtraPB packGrid. */
//             public packGrid: number;

//             /** PlayerExtraPB shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /** PlayerExtraPB activityTollgateList. */
//             public activityTollgateList: luck.protobuf.IActivityTollgatePB[];

//             /** PlayerExtraPB activityChapterList. */
//             public activityChapterList: luck.protobuf.IActivityChapterPB[];

//             /** PlayerExtraPB loveBento. */
//             public loveBento: luck.protobuf.ILoveBentoPB;

//             /** PlayerExtraPB gangShopGoodsList. */
//             public gangShopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /** PlayerExtraPB vipRewardList. */
//             public vipRewardList: luck.protobuf.IVipRewardPB[];

//             /** PlayerExtraPB staminaBuyTimes. */
//             public staminaBuyTimes: number;

//             /** PlayerExtraPB lastRefreshStaminaTime. */
//             public lastRefreshStaminaTime: (number|Long);

//             /** PlayerExtraPB lastWorldChatTime. */
//             public lastWorldChatTime: (number|Long);

//             /** PlayerExtraPB monthCardList. */
//             public monthCardList: luck.protobuf.IMonthCardPB[];

//             /** PlayerExtraPB growthCapital. */
//             public growthCapital: number;

//             /** PlayerExtraPB totalLoginTimes. */
//             public totalLoginTimes: number;

//             /** PlayerExtraPB greenWeaponCollect. */
//             public greenWeaponCollect: number;

//             /** PlayerExtraPB blueWeaponCollect. */
//             public blueWeaponCollect: number;

//             /** PlayerExtraPB purpleWeaponCollect. */
//             public purpleWeaponCollect: number;

//             /** PlayerExtraPB orangeWeaponCollect. */
//             public orangeWeaponCollect: number;

//             /** PlayerExtraPB redWeaponCollect. */
//             public redWeaponCollect: number;

//             /** PlayerExtraPB lastLoginTime. */
//             public lastLoginTime: (number|Long);

//             /** PlayerExtraPB digging. */
//             public digging: luck.protobuf.IDiggingPB;

//             /** PlayerExtraPB activityShopList. */
//             public activityShopList: luck.protobuf.IShopGoodsPB[];

//             /** PlayerExtraPB activityLottery. */
//             public activityLottery: luck.protobuf.IActivityLotteryPB[];

//             /** PlayerExtraPB gainBuffList. */
//             public gainBuffList: luck.protobuf.IGainBuffPB[];

//             /** PlayerExtraPB noviceGuideNum. */
//             public noviceGuideNum: number;

//             /** PlayerExtraPB isFirstLotteryTwo. */
//             public isFirstLotteryTwo: number;

//             /** PlayerExtraPB headPortraitId. */
//             public headPortraitId: number;

//             /** PlayerExtraPB headPortraitList. */
//             public headPortraitList: number[];

//             /** PlayerExtraPB rahmenId. */
//             public rahmenId: number;

//             /** PlayerExtraPB rahmenList. */
//             public rahmenList: number[];

//             /** PlayerExtraPB lastGangSginInTime. */
//             public lastGangSginInTime: (number|Long);

//             /**
//              * Creates a new PlayerExtraPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PlayerExtraPB instance
//              */
//             public static create(properties?: luck.protobuf.IPlayerExtraPB): luck.protobuf.PlayerExtraPB;

//             /**
//              * Encodes the specified PlayerExtraPB message. Does not implicitly {@link luck.protobuf.PlayerExtraPB.verify|verify} messages.
//              * @param message PlayerExtraPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPlayerExtraPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PlayerExtraPB message, length delimited. Does not implicitly {@link luck.protobuf.PlayerExtraPB.verify|verify} messages.
//              * @param message PlayerExtraPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPlayerExtraPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PlayerExtraPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PlayerExtraPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PlayerExtraPB;

//             /**
//              * Decodes a PlayerExtraPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PlayerExtraPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PlayerExtraPB;

//             /**
//              * Verifies a PlayerExtraPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailPB. */
//         interface IEmailPB {

//             /** EmailPB uid */
//             uid: (number|Long);

//             /** EmailPB playerId */
//             playerId: (number|Long);

//             /** EmailPB senderId */
//             senderId: (number|Long);

//             /** EmailPB contentId */
//             contentId: number;

//             /** EmailPB sendTime */
//             sendTime: (number|Long);

//             /** EmailPB endTime */
//             endTime: (number|Long);

//             /** EmailPB status */
//             status: number;

//             /** EmailPB type */
//             type: number;

//             /** EmailPB gold */
//             gold?: (number|Long|null);

//             /** EmailPB diamond */
//             diamond?: (number|Long|null);

//             /** EmailPB weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** EmailPB cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** EmailPB clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** EmailPB propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** EmailPB materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents an EmailPB. */
//         class EmailPB implements IEmailPB {

//             /**
//              * Constructs a new EmailPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailPB);

//             /** EmailPB uid. */
//             public uid: (number|Long);

//             /** EmailPB playerId. */
//             public playerId: (number|Long);

//             /** EmailPB senderId. */
//             public senderId: (number|Long);

//             /** EmailPB contentId. */
//             public contentId: number;

//             /** EmailPB sendTime. */
//             public sendTime: (number|Long);

//             /** EmailPB endTime. */
//             public endTime: (number|Long);

//             /** EmailPB status. */
//             public status: number;

//             /** EmailPB type. */
//             public type: number;

//             /** EmailPB gold. */
//             public gold: (number|Long);

//             /** EmailPB diamond. */
//             public diamond: (number|Long);

//             /** EmailPB weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** EmailPB cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** EmailPB clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** EmailPB propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** EmailPB materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new EmailPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailPB instance
//              */
//             public static create(properties?: luck.protobuf.IEmailPB): luck.protobuf.EmailPB;

//             /**
//              * Encodes the specified EmailPB message. Does not implicitly {@link luck.protobuf.EmailPB.verify|verify} messages.
//              * @param message EmailPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailPB message, length delimited. Does not implicitly {@link luck.protobuf.EmailPB.verify|verify} messages.
//              * @param message EmailPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailPB;

//             /**
//              * Decodes an EmailPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailPB;

//             /**
//              * Verifies an EmailPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a WeaponInlayPB. */
//         interface IWeaponInlayPB {

//             /** WeaponInlayPB allPropertyAttack */
//             allPropertyAttack: number;

//             /** WeaponInlayPB shootSpeed */
//             shootSpeed: number;

//             /** WeaponInlayPB bombLoad */
//             bombLoad: number;
//         }

//         /** Represents a WeaponInlayPB. */
//         class WeaponInlayPB implements IWeaponInlayPB {

//             /**
//              * Constructs a new WeaponInlayPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IWeaponInlayPB);

//             /** WeaponInlayPB allPropertyAttack. */
//             public allPropertyAttack: number;

//             /** WeaponInlayPB shootSpeed. */
//             public shootSpeed: number;

//             /** WeaponInlayPB bombLoad. */
//             public bombLoad: number;

//             /**
//              * Creates a new WeaponInlayPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns WeaponInlayPB instance
//              */
//             public static create(properties?: luck.protobuf.IWeaponInlayPB): luck.protobuf.WeaponInlayPB;

//             /**
//              * Encodes the specified WeaponInlayPB message. Does not implicitly {@link luck.protobuf.WeaponInlayPB.verify|verify} messages.
//              * @param message WeaponInlayPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IWeaponInlayPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified WeaponInlayPB message, length delimited. Does not implicitly {@link luck.protobuf.WeaponInlayPB.verify|verify} messages.
//              * @param message WeaponInlayPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IWeaponInlayPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a WeaponInlayPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns WeaponInlayPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.WeaponInlayPB;

//             /**
//              * Decodes a WeaponInlayPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns WeaponInlayPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.WeaponInlayPB;

//             /**
//              * Verifies a WeaponInlayPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ClothesInlayPB. */
//         interface IClothesInlayPB {

//             /** ClothesInlayPB HpUpLimit */
//             HpUpLimit: number;

//             /** ClothesInlayPB propertyImmune */
//             propertyImmune: number;
//         }

//         /** Represents a ClothesInlayPB. */
//         class ClothesInlayPB implements IClothesInlayPB {

//             /**
//              * Constructs a new ClothesInlayPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IClothesInlayPB);

//             /** ClothesInlayPB HpUpLimit. */
//             public HpUpLimit: number;

//             /** ClothesInlayPB propertyImmune. */
//             public propertyImmune: number;

//             /**
//              * Creates a new ClothesInlayPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ClothesInlayPB instance
//              */
//             public static create(properties?: luck.protobuf.IClothesInlayPB): luck.protobuf.ClothesInlayPB;

//             /**
//              * Encodes the specified ClothesInlayPB message. Does not implicitly {@link luck.protobuf.ClothesInlayPB.verify|verify} messages.
//              * @param message ClothesInlayPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IClothesInlayPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ClothesInlayPB message, length delimited. Does not implicitly {@link luck.protobuf.ClothesInlayPB.verify|verify} messages.
//              * @param message ClothesInlayPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IClothesInlayPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ClothesInlayPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ClothesInlayPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ClothesInlayPB;

//             /**
//              * Decodes a ClothesInlayPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ClothesInlayPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ClothesInlayPB;

//             /**
//              * Verifies a ClothesInlayPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SimplePlayerPB. */
//         interface ISimplePlayerPB {

//             /** SimplePlayerPB playerId */
//             playerId: (number|Long);

//             /** SimplePlayerPB roleId */
//             roleId: number;

//             /** SimplePlayerPB lv */
//             lv: number;

//             /** SimplePlayerPB vipLv */
//             vipLv: number;

//             /** SimplePlayerPB name */
//             name: string;

//             /** SimplePlayerPB gangId */
//             gangId: (number|Long);

//             /** SimplePlayerPB gangName */
//             gangName: string;

//             /** SimplePlayerPB gangJob */
//             gangJob: number;

//             /** SimplePlayerPB isOnline */
//             isOnline: boolean;

//             /** SimplePlayerPB gangContribute */
//             gangContribute: (number|Long);
//         }

//         /** Represents a SimplePlayerPB. */
//         class SimplePlayerPB implements ISimplePlayerPB {

//             /**
//              * Constructs a new SimplePlayerPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISimplePlayerPB);

//             /** SimplePlayerPB playerId. */
//             public playerId: (number|Long);

//             /** SimplePlayerPB roleId. */
//             public roleId: number;

//             /** SimplePlayerPB lv. */
//             public lv: number;

//             /** SimplePlayerPB vipLv. */
//             public vipLv: number;

//             /** SimplePlayerPB name. */
//             public name: string;

//             /** SimplePlayerPB gangId. */
//             public gangId: (number|Long);

//             /** SimplePlayerPB gangName. */
//             public gangName: string;

//             /** SimplePlayerPB gangJob. */
//             public gangJob: number;

//             /** SimplePlayerPB isOnline. */
//             public isOnline: boolean;

//             /** SimplePlayerPB gangContribute. */
//             public gangContribute: (number|Long);

//             /**
//              * Creates a new SimplePlayerPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SimplePlayerPB instance
//              */
//             public static create(properties?: luck.protobuf.ISimplePlayerPB): luck.protobuf.SimplePlayerPB;

//             /**
//              * Encodes the specified SimplePlayerPB message. Does not implicitly {@link luck.protobuf.SimplePlayerPB.verify|verify} messages.
//              * @param message SimplePlayerPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISimplePlayerPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SimplePlayerPB message, length delimited. Does not implicitly {@link luck.protobuf.SimplePlayerPB.verify|verify} messages.
//              * @param message SimplePlayerPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISimplePlayerPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SimplePlayerPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SimplePlayerPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SimplePlayerPB;

//             /**
//              * Decodes a SimplePlayerPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SimplePlayerPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SimplePlayerPB;

//             /**
//              * Verifies a SimplePlayerPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ShopGoodsPB. */
//         interface IShopGoodsPB {

//             /** ShopGoodsPB goodsId */
//             goodsId: number;

//             /** ShopGoodsPB haveBuyNum */
//             haveBuyNum: number;

//             /** ShopGoodsPB disCount */
//             disCount: number;

//             /** ShopGoodsPB timeLimit */
//             timeLimit: number;

//             /** ShopGoodsPB lastBuyTime */
//             lastBuyTime: (number|Long);
//         }

//         /** Represents a ShopGoodsPB. */
//         class ShopGoodsPB implements IShopGoodsPB {

//             /**
//              * Constructs a new ShopGoodsPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IShopGoodsPB);

//             /** ShopGoodsPB goodsId. */
//             public goodsId: number;

//             /** ShopGoodsPB haveBuyNum. */
//             public haveBuyNum: number;

//             /** ShopGoodsPB disCount. */
//             public disCount: number;

//             /** ShopGoodsPB timeLimit. */
//             public timeLimit: number;

//             /** ShopGoodsPB lastBuyTime. */
//             public lastBuyTime: (number|Long);

//             /**
//              * Creates a new ShopGoodsPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ShopGoodsPB instance
//              */
//             public static create(properties?: luck.protobuf.IShopGoodsPB): luck.protobuf.ShopGoodsPB;

//             /**
//              * Encodes the specified ShopGoodsPB message. Does not implicitly {@link luck.protobuf.ShopGoodsPB.verify|verify} messages.
//              * @param message ShopGoodsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IShopGoodsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ShopGoodsPB message, length delimited. Does not implicitly {@link luck.protobuf.ShopGoodsPB.verify|verify} messages.
//              * @param message ShopGoodsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IShopGoodsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ShopGoodsPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ShopGoodsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ShopGoodsPB;

//             /**
//              * Decodes a ShopGoodsPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ShopGoodsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ShopGoodsPB;

//             /**
//              * Verifies a ShopGoodsPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ChatInfoPB. */
//         interface IChatInfoPB {

//             /** ChatInfoPB senderId */
//             senderId: (number|Long);

//             /** ChatInfoPB senderName */
//             senderName: string;

//             /** ChatInfoPB sendTime */
//             sendTime: (number|Long);

//             /** ChatInfoPB type */
//             type: number;

//             /** ChatInfoPB content */
//             content: string;

//             /** ChatInfoPB weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** ChatInfoPB cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** ChatInfoPB clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** ChatInfoPB senderLv */
//             senderLv: number;

//             /** ChatInfoPB senderGangName */
//             senderGangName?: (string|null);
//         }

//         /** Represents a ChatInfoPB. */
//         class ChatInfoPB implements IChatInfoPB {

//             /**
//              * Constructs a new ChatInfoPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IChatInfoPB);

//             /** ChatInfoPB senderId. */
//             public senderId: (number|Long);

//             /** ChatInfoPB senderName. */
//             public senderName: string;

//             /** ChatInfoPB sendTime. */
//             public sendTime: (number|Long);

//             /** ChatInfoPB type. */
//             public type: number;

//             /** ChatInfoPB content. */
//             public content: string;

//             /** ChatInfoPB weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** ChatInfoPB cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** ChatInfoPB clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** ChatInfoPB senderLv. */
//             public senderLv: number;

//             /** ChatInfoPB senderGangName. */
//             public senderGangName: string;

//             /**
//              * Creates a new ChatInfoPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ChatInfoPB instance
//              */
//             public static create(properties?: luck.protobuf.IChatInfoPB): luck.protobuf.ChatInfoPB;

//             /**
//              * Encodes the specified ChatInfoPB message. Does not implicitly {@link luck.protobuf.ChatInfoPB.verify|verify} messages.
//              * @param message ChatInfoPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IChatInfoPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ChatInfoPB message, length delimited. Does not implicitly {@link luck.protobuf.ChatInfoPB.verify|verify} messages.
//              * @param message ChatInfoPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IChatInfoPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ChatInfoPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ChatInfoPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ChatInfoPB;

//             /**
//              * Decodes a ChatInfoPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ChatInfoPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ChatInfoPB;

//             /**
//              * Verifies a ChatInfoPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GangPB. */
//         interface IGangPB {

//             /** GangPB gangId */
//             gangId: (number|Long);

//             /** GangPB gangName */
//             gangName: string;

//             /** GangPB lv */
//             lv: number;

//             /** GangPB exp */
//             exp: number;

//             /** GangPB gangMemberList */
//             gangMemberList?: (luck.protobuf.IGangMemberPB[]|null);

//             /** GangPB gangApplyPBList */
//             gangApplyPBList?: (luck.protobuf.IGangApplyPB[]|null);

//             /** GangPB manifesto */
//             manifesto: string;

//             /** GangPB iconId */
//             iconId: number;

//             /** GangPB createTime */
//             createTime: (number|Long);
//         }

//         /** Represents a GangPB. */
//         class GangPB implements IGangPB {

//             /**
//              * Constructs a new GangPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGangPB);

//             /** GangPB gangId. */
//             public gangId: (number|Long);

//             /** GangPB gangName. */
//             public gangName: string;

//             /** GangPB lv. */
//             public lv: number;

//             /** GangPB exp. */
//             public exp: number;

//             /** GangPB gangMemberList. */
//             public gangMemberList: luck.protobuf.IGangMemberPB[];

//             /** GangPB gangApplyPBList. */
//             public gangApplyPBList: luck.protobuf.IGangApplyPB[];

//             /** GangPB manifesto. */
//             public manifesto: string;

//             /** GangPB iconId. */
//             public iconId: number;

//             /** GangPB createTime. */
//             public createTime: (number|Long);

//             /**
//              * Creates a new GangPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GangPB instance
//              */
//             public static create(properties?: luck.protobuf.IGangPB): luck.protobuf.GangPB;

//             /**
//              * Encodes the specified GangPB message. Does not implicitly {@link luck.protobuf.GangPB.verify|verify} messages.
//              * @param message GangPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGangPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GangPB message, length delimited. Does not implicitly {@link luck.protobuf.GangPB.verify|verify} messages.
//              * @param message GangPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGangPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GangPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GangPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GangPB;

//             /**
//              * Decodes a GangPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GangPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GangPB;

//             /**
//              * Verifies a GangPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GangMemberPB. */
//         interface IGangMemberPB {

//             /** GangMemberPB member */
//             member: luck.protobuf.ISimplePlayerPB;

//             /** GangMemberPB job */
//             job: number;
//         }

//         /** Represents a GangMemberPB. */
//         class GangMemberPB implements IGangMemberPB {

//             /**
//              * Constructs a new GangMemberPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGangMemberPB);

//             /** GangMemberPB member. */
//             public member: luck.protobuf.ISimplePlayerPB;

//             /** GangMemberPB job. */
//             public job: number;

//             /**
//              * Creates a new GangMemberPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GangMemberPB instance
//              */
//             public static create(properties?: luck.protobuf.IGangMemberPB): luck.protobuf.GangMemberPB;

//             /**
//              * Encodes the specified GangMemberPB message. Does not implicitly {@link luck.protobuf.GangMemberPB.verify|verify} messages.
//              * @param message GangMemberPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGangMemberPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GangMemberPB message, length delimited. Does not implicitly {@link luck.protobuf.GangMemberPB.verify|verify} messages.
//              * @param message GangMemberPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGangMemberPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GangMemberPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GangMemberPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GangMemberPB;

//             /**
//              * Decodes a GangMemberPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GangMemberPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GangMemberPB;

//             /**
//              * Verifies a GangMemberPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GangApplyPB. */
//         interface IGangApplyPB {

//             /** GangApplyPB member */
//             member: luck.protobuf.ISimplePlayerPB;

//             /** GangApplyPB applyTime */
//             applyTime: (number|Long);
//         }

//         /** Represents a GangApplyPB. */
//         class GangApplyPB implements IGangApplyPB {

//             /**
//              * Constructs a new GangApplyPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGangApplyPB);

//             /** GangApplyPB member. */
//             public member: luck.protobuf.ISimplePlayerPB;

//             /** GangApplyPB applyTime. */
//             public applyTime: (number|Long);

//             /**
//              * Creates a new GangApplyPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GangApplyPB instance
//              */
//             public static create(properties?: luck.protobuf.IGangApplyPB): luck.protobuf.GangApplyPB;

//             /**
//              * Encodes the specified GangApplyPB message. Does not implicitly {@link luck.protobuf.GangApplyPB.verify|verify} messages.
//              * @param message GangApplyPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGangApplyPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GangApplyPB message, length delimited. Does not implicitly {@link luck.protobuf.GangApplyPB.verify|verify} messages.
//              * @param message GangApplyPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGangApplyPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GangApplyPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GangApplyPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GangApplyPB;

//             /**
//              * Decodes a GangApplyPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GangApplyPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GangApplyPB;

//             /**
//              * Verifies a GangApplyPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a sellGoodsPB. */
//         interface IsellGoodsPB {

//             /** sellGoodsPB goodsId */
//             goodsId?: (number|null);

//             /** sellGoodsPB sellNum */
//             sellNum?: (number|null);

//             /** sellGoodsPB uid */
//             uid?: (number|Long|null);

//             /** sellGoodsPB type */
//             type?: (number|null);
//         }

//         /** Represents a sellGoodsPB. */
//         class sellGoodsPB implements IsellGoodsPB {

//             /**
//              * Constructs a new sellGoodsPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsellGoodsPB);

//             /** sellGoodsPB goodsId. */
//             public goodsId: number;

//             /** sellGoodsPB sellNum. */
//             public sellNum: number;

//             /** sellGoodsPB uid. */
//             public uid: (number|Long);

//             /** sellGoodsPB type. */
//             public type: number;

//             /**
//              * Creates a new sellGoodsPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns sellGoodsPB instance
//              */
//             public static create(properties?: luck.protobuf.IsellGoodsPB): luck.protobuf.sellGoodsPB;

//             /**
//              * Encodes the specified sellGoodsPB message. Does not implicitly {@link luck.protobuf.sellGoodsPB.verify|verify} messages.
//              * @param message sellGoodsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsellGoodsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified sellGoodsPB message, length delimited. Does not implicitly {@link luck.protobuf.sellGoodsPB.verify|verify} messages.
//              * @param message sellGoodsPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsellGoodsPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a sellGoodsPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns sellGoodsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.sellGoodsPB;

//             /**
//              * Decodes a sellGoodsPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns sellGoodsPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.sellGoodsPB;

//             /**
//              * Verifies a sellGoodsPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityTollgatePB. */
//         interface IActivityTollgatePB {

//             /** ActivityTollgatePB tollgateId */
//             tollgateId: number;

//             /** ActivityTollgatePB clearNum */
//             clearNum: number;

//             /** ActivityTollgatePB isFirstClear */
//             isFirstClear: number;

//             /** ActivityTollgatePB isUnlock */
//             isUnlock: boolean;
//         }

//         /** Represents an ActivityTollgatePB. */
//         class ActivityTollgatePB implements IActivityTollgatePB {

//             /**
//              * Constructs a new ActivityTollgatePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityTollgatePB);

//             /** ActivityTollgatePB tollgateId. */
//             public tollgateId: number;

//             /** ActivityTollgatePB clearNum. */
//             public clearNum: number;

//             /** ActivityTollgatePB isFirstClear. */
//             public isFirstClear: number;

//             /** ActivityTollgatePB isUnlock. */
//             public isUnlock: boolean;

//             /**
//              * Creates a new ActivityTollgatePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityTollgatePB instance
//              */
//             public static create(properties?: luck.protobuf.IActivityTollgatePB): luck.protobuf.ActivityTollgatePB;

//             /**
//              * Encodes the specified ActivityTollgatePB message. Does not implicitly {@link luck.protobuf.ActivityTollgatePB.verify|verify} messages.
//              * @param message ActivityTollgatePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityTollgatePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityTollgatePB message, length delimited. Does not implicitly {@link luck.protobuf.ActivityTollgatePB.verify|verify} messages.
//              * @param message ActivityTollgatePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityTollgatePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityTollgatePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityTollgatePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityTollgatePB;

//             /**
//              * Decodes an ActivityTollgatePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityTollgatePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityTollgatePB;

//             /**
//              * Verifies an ActivityTollgatePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityChapterPB. */
//         interface IActivityChapterPB {

//             /** ActivityChapterPB chapterId */
//             chapterId: number;

//             /** ActivityChapterPB isUnlock */
//             isUnlock: boolean;

//             /** ActivityChapterPB lastClearTime */
//             lastClearTime: (number|Long);
//         }

//         /** Represents an ActivityChapterPB. */
//         class ActivityChapterPB implements IActivityChapterPB {

//             /**
//              * Constructs a new ActivityChapterPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityChapterPB);

//             /** ActivityChapterPB chapterId. */
//             public chapterId: number;

//             /** ActivityChapterPB isUnlock. */
//             public isUnlock: boolean;

//             /** ActivityChapterPB lastClearTime. */
//             public lastClearTime: (number|Long);

//             /**
//              * Creates a new ActivityChapterPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityChapterPB instance
//              */
//             public static create(properties?: luck.protobuf.IActivityChapterPB): luck.protobuf.ActivityChapterPB;

//             /**
//              * Encodes the specified ActivityChapterPB message. Does not implicitly {@link luck.protobuf.ActivityChapterPB.verify|verify} messages.
//              * @param message ActivityChapterPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityChapterPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityChapterPB message, length delimited. Does not implicitly {@link luck.protobuf.ActivityChapterPB.verify|verify} messages.
//              * @param message ActivityChapterPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityChapterPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityChapterPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityChapterPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityChapterPB;

//             /**
//              * Decodes an ActivityChapterPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityChapterPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityChapterPB;

//             /**
//              * Verifies an ActivityChapterPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LoveBentoPB. */
//         interface ILoveBentoPB {

//             /** LoveBentoPB amDraw */
//             amDraw: boolean;

//             /** LoveBentoPB pmDraw */
//             pmDraw: boolean;
//         }

//         /** Represents a LoveBentoPB. */
//         class LoveBentoPB implements ILoveBentoPB {

//             /**
//              * Constructs a new LoveBentoPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILoveBentoPB);

//             /** LoveBentoPB amDraw. */
//             public amDraw: boolean;

//             /** LoveBentoPB pmDraw. */
//             public pmDraw: boolean;

//             /**
//              * Creates a new LoveBentoPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LoveBentoPB instance
//              */
//             public static create(properties?: luck.protobuf.ILoveBentoPB): luck.protobuf.LoveBentoPB;

//             /**
//              * Encodes the specified LoveBentoPB message. Does not implicitly {@link luck.protobuf.LoveBentoPB.verify|verify} messages.
//              * @param message LoveBentoPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILoveBentoPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LoveBentoPB message, length delimited. Does not implicitly {@link luck.protobuf.LoveBentoPB.verify|verify} messages.
//              * @param message LoveBentoPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILoveBentoPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LoveBentoPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LoveBentoPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LoveBentoPB;

//             /**
//              * Decodes a LoveBentoPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LoveBentoPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LoveBentoPB;

//             /**
//              * Verifies a LoveBentoPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a TaskConditionPB. */
//         interface ITaskConditionPB {

//             /** TaskConditionPB taskConditionId */
//             taskConditionId: number;

//             /** TaskConditionPB num */
//             num: number;

//             /** TaskConditionPB conditionList */
//             conditionList?: (number[]|null);
//         }

//         /** Represents a TaskConditionPB. */
//         class TaskConditionPB implements ITaskConditionPB {

//             /**
//              * Constructs a new TaskConditionPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ITaskConditionPB);

//             /** TaskConditionPB taskConditionId. */
//             public taskConditionId: number;

//             /** TaskConditionPB num. */
//             public num: number;

//             /** TaskConditionPB conditionList. */
//             public conditionList: number[];

//             /**
//              * Creates a new TaskConditionPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns TaskConditionPB instance
//              */
//             public static create(properties?: luck.protobuf.ITaskConditionPB): luck.protobuf.TaskConditionPB;

//             /**
//              * Encodes the specified TaskConditionPB message. Does not implicitly {@link luck.protobuf.TaskConditionPB.verify|verify} messages.
//              * @param message TaskConditionPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ITaskConditionPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified TaskConditionPB message, length delimited. Does not implicitly {@link luck.protobuf.TaskConditionPB.verify|verify} messages.
//              * @param message TaskConditionPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ITaskConditionPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a TaskConditionPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns TaskConditionPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.TaskConditionPB;

//             /**
//              * Decodes a TaskConditionPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns TaskConditionPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.TaskConditionPB;

//             /**
//              * Verifies a TaskConditionPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a MainTaskPB. */
//         interface IMainTaskPB {

//             /** MainTaskPB mainTaskId */
//             mainTaskId: number;

//             /** MainTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** MainTaskPB bFront */
//             bFront: boolean;

//             /** MainTaskPB bDeblock */
//             bDeblock: boolean;

//             /** MainTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a MainTaskPB. */
//         class MainTaskPB implements IMainTaskPB {

//             /**
//              * Constructs a new MainTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IMainTaskPB);

//             /** MainTaskPB mainTaskId. */
//             public mainTaskId: number;

//             /** MainTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** MainTaskPB bFront. */
//             public bFront: boolean;

//             /** MainTaskPB bDeblock. */
//             public bDeblock: boolean;

//             /** MainTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new MainTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns MainTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IMainTaskPB): luck.protobuf.MainTaskPB;

//             /**
//              * Encodes the specified MainTaskPB message. Does not implicitly {@link luck.protobuf.MainTaskPB.verify|verify} messages.
//              * @param message MainTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IMainTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified MainTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.MainTaskPB.verify|verify} messages.
//              * @param message MainTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IMainTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a MainTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns MainTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.MainTaskPB;

//             /**
//              * Decodes a MainTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns MainTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.MainTaskPB;

//             /**
//              * Verifies a MainTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DailyTaskPB. */
//         interface IDailyTaskPB {

//             /** DailyTaskPB dailyTaskId */
//             dailyTaskId: number;

//             /** DailyTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** DailyTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a DailyTaskPB. */
//         class DailyTaskPB implements IDailyTaskPB {

//             /**
//              * Constructs a new DailyTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDailyTaskPB);

//             /** DailyTaskPB dailyTaskId. */
//             public dailyTaskId: number;

//             /** DailyTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** DailyTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new DailyTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DailyTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IDailyTaskPB): luck.protobuf.DailyTaskPB;

//             /**
//              * Encodes the specified DailyTaskPB message. Does not implicitly {@link luck.protobuf.DailyTaskPB.verify|verify} messages.
//              * @param message DailyTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDailyTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DailyTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.DailyTaskPB.verify|verify} messages.
//              * @param message DailyTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDailyTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DailyTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DailyTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DailyTaskPB;

//             /**
//              * Decodes a DailyTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DailyTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DailyTaskPB;

//             /**
//              * Verifies a DailyTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a WeekTaskPB. */
//         interface IWeekTaskPB {

//             /** WeekTaskPB weekTaskId */
//             weekTaskId: number;

//             /** WeekTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** WeekTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a WeekTaskPB. */
//         class WeekTaskPB implements IWeekTaskPB {

//             /**
//              * Constructs a new WeekTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IWeekTaskPB);

//             /** WeekTaskPB weekTaskId. */
//             public weekTaskId: number;

//             /** WeekTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** WeekTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new WeekTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns WeekTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IWeekTaskPB): luck.protobuf.WeekTaskPB;

//             /**
//              * Encodes the specified WeekTaskPB message. Does not implicitly {@link luck.protobuf.WeekTaskPB.verify|verify} messages.
//              * @param message WeekTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IWeekTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified WeekTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.WeekTaskPB.verify|verify} messages.
//              * @param message WeekTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IWeekTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a WeekTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns WeekTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.WeekTaskPB;

//             /**
//              * Decodes a WeekTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns WeekTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.WeekTaskPB;

//             /**
//              * Verifies a WeekTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RewardTaskPB. */
//         interface IRewardTaskPB {

//             /** RewardTaskPB rewardTaskId */
//             rewardTaskId: number;

//             /** RewardTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** RewardTaskPB bGain */
//             bGain: boolean;

//             /** RewardTaskPB startTime */
//             startTime: (number|Long);
//         }

//         /** Represents a RewardTaskPB. */
//         class RewardTaskPB implements IRewardTaskPB {

//             /**
//              * Constructs a new RewardTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRewardTaskPB);

//             /** RewardTaskPB rewardTaskId. */
//             public rewardTaskId: number;

//             /** RewardTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** RewardTaskPB bGain. */
//             public bGain: boolean;

//             /** RewardTaskPB startTime. */
//             public startTime: (number|Long);

//             /**
//              * Creates a new RewardTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RewardTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IRewardTaskPB): luck.protobuf.RewardTaskPB;

//             /**
//              * Encodes the specified RewardTaskPB message. Does not implicitly {@link luck.protobuf.RewardTaskPB.verify|verify} messages.
//              * @param message RewardTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRewardTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RewardTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.RewardTaskPB.verify|verify} messages.
//              * @param message RewardTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRewardTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RewardTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RewardTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RewardTaskPB;

//             /**
//              * Decodes a RewardTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RewardTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RewardTaskPB;

//             /**
//              * Verifies a RewardTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an AchievementTaskPB. */
//         interface IAchievementTaskPB {

//             /** AchievementTaskPB achievementTaskId */
//             achievementTaskId: number;

//             /** AchievementTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** AchievementTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents an AchievementTaskPB. */
//         class AchievementTaskPB implements IAchievementTaskPB {

//             /**
//              * Constructs a new AchievementTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IAchievementTaskPB);

//             /** AchievementTaskPB achievementTaskId. */
//             public achievementTaskId: number;

//             /** AchievementTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** AchievementTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new AchievementTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns AchievementTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IAchievementTaskPB): luck.protobuf.AchievementTaskPB;

//             /**
//              * Encodes the specified AchievementTaskPB message. Does not implicitly {@link luck.protobuf.AchievementTaskPB.verify|verify} messages.
//              * @param message AchievementTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IAchievementTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified AchievementTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.AchievementTaskPB.verify|verify} messages.
//              * @param message AchievementTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IAchievementTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an AchievementTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns AchievementTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.AchievementTaskPB;

//             /**
//              * Decodes an AchievementTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns AchievementTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.AchievementTaskPB;

//             /**
//              * Verifies an AchievementTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an AchievementTypePB. */
//         interface IAchievementTypePB {

//             /** AchievementTypePB achievementTypeId */
//             achievementTypeId: number;

//             /** AchievementTypePB bFinish */
//             bFinish: boolean;

//             /** AchievementTypePB bGain */
//             bGain: boolean;
//         }

//         /** Represents an AchievementTypePB. */
//         class AchievementTypePB implements IAchievementTypePB {

//             /**
//              * Constructs a new AchievementTypePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IAchievementTypePB);

//             /** AchievementTypePB achievementTypeId. */
//             public achievementTypeId: number;

//             /** AchievementTypePB bFinish. */
//             public bFinish: boolean;

//             /** AchievementTypePB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new AchievementTypePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns AchievementTypePB instance
//              */
//             public static create(properties?: luck.protobuf.IAchievementTypePB): luck.protobuf.AchievementTypePB;

//             /**
//              * Encodes the specified AchievementTypePB message. Does not implicitly {@link luck.protobuf.AchievementTypePB.verify|verify} messages.
//              * @param message AchievementTypePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IAchievementTypePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified AchievementTypePB message, length delimited. Does not implicitly {@link luck.protobuf.AchievementTypePB.verify|verify} messages.
//              * @param message AchievementTypePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IAchievementTypePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an AchievementTypePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns AchievementTypePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.AchievementTypePB;

//             /**
//              * Decodes an AchievementTypePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns AchievementTypePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.AchievementTypePB;

//             /**
//              * Verifies an AchievementTypePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVETeamPB. */
//         interface IPVETeamPB {

//             /** PVETeamPB teamId */
//             teamId: (number|Long);

//             /** PVETeamPB leaderId */
//             leaderId: (number|Long);

//             /** PVETeamPB memberList */
//             memberList?: (luck.protobuf.IPVETeamMemberPB[]|null);

//             /** PVETeamPB customsType */
//             customsType: number;

//             /** PVETeamPB customsId */
//             customsId: number;

//             /** PVETeamPB start */
//             start: boolean;

//             /** PVETeamPB joinApply */
//             joinApply?: ((number|Long)[]|null);
//         }

//         /** Represents a PVETeamPB. */
//         class PVETeamPB implements IPVETeamPB {

//             /**
//              * Constructs a new PVETeamPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVETeamPB);

//             /** PVETeamPB teamId. */
//             public teamId: (number|Long);

//             /** PVETeamPB leaderId. */
//             public leaderId: (number|Long);

//             /** PVETeamPB memberList. */
//             public memberList: luck.protobuf.IPVETeamMemberPB[];

//             /** PVETeamPB customsType. */
//             public customsType: number;

//             /** PVETeamPB customsId. */
//             public customsId: number;

//             /** PVETeamPB start. */
//             public start: boolean;

//             /** PVETeamPB joinApply. */
//             public joinApply: (number|Long)[];

//             /**
//              * Creates a new PVETeamPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVETeamPB instance
//              */
//             public static create(properties?: luck.protobuf.IPVETeamPB): luck.protobuf.PVETeamPB;

//             /**
//              * Encodes the specified PVETeamPB message. Does not implicitly {@link luck.protobuf.PVETeamPB.verify|verify} messages.
//              * @param message PVETeamPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVETeamPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVETeamPB message, length delimited. Does not implicitly {@link luck.protobuf.PVETeamPB.verify|verify} messages.
//              * @param message PVETeamPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVETeamPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVETeamPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVETeamPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVETeamPB;

//             /**
//              * Decodes a PVETeamPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVETeamPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVETeamPB;

//             /**
//              * Verifies a PVETeamPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVETeamMemberPB. */
//         interface IPVETeamMemberPB {

//             /** PVETeamMemberPB memberId */
//             memberId: (number|Long);

//             /** PVETeamMemberPB prepare */
//             prepare: boolean;
//         }

//         /** Represents a PVETeamMemberPB. */
//         class PVETeamMemberPB implements IPVETeamMemberPB {

//             /**
//              * Constructs a new PVETeamMemberPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVETeamMemberPB);

//             /** PVETeamMemberPB memberId. */
//             public memberId: (number|Long);

//             /** PVETeamMemberPB prepare. */
//             public prepare: boolean;

//             /**
//              * Creates a new PVETeamMemberPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVETeamMemberPB instance
//              */
//             public static create(properties?: luck.protobuf.IPVETeamMemberPB): luck.protobuf.PVETeamMemberPB;

//             /**
//              * Encodes the specified PVETeamMemberPB message. Does not implicitly {@link luck.protobuf.PVETeamMemberPB.verify|verify} messages.
//              * @param message PVETeamMemberPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVETeamMemberPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVETeamMemberPB message, length delimited. Does not implicitly {@link luck.protobuf.PVETeamMemberPB.verify|verify} messages.
//              * @param message PVETeamMemberPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVETeamMemberPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVETeamMemberPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVETeamMemberPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVETeamMemberPB;

//             /**
//              * Decodes a PVETeamMemberPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVETeamMemberPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVETeamMemberPB;

//             /**
//              * Verifies a PVETeamMemberPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GangTaskPB. */
//         interface IGangTaskPB {

//             /** GangTaskPB gangTaskId */
//             gangTaskId: number;

//             /** GangTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** GangTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a GangTaskPB. */
//         class GangTaskPB implements IGangTaskPB {

//             /**
//              * Constructs a new GangTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGangTaskPB);

//             /** GangTaskPB gangTaskId. */
//             public gangTaskId: number;

//             /** GangTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** GangTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new GangTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GangTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IGangTaskPB): luck.protobuf.GangTaskPB;

//             /**
//              * Encodes the specified GangTaskPB message. Does not implicitly {@link luck.protobuf.GangTaskPB.verify|verify} messages.
//              * @param message GangTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGangTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GangTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.GangTaskPB.verify|verify} messages.
//              * @param message GangTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGangTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GangTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GangTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GangTaskPB;

//             /**
//              * Decodes a GangTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GangTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GangTaskPB;

//             /**
//              * Verifies a GangTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a sixStarEquipRankIngPB. */
//         interface IsixStarEquipRankIngPB {

//             /** sixStarEquipRankIngPB lv */
//             lv: (number|Long);

//             /** sixStarEquipRankIngPB sixStarEquipRank */
//             sixStarEquipRank: number;

//             /** sixStarEquipRankIngPB roleId */
//             roleId: (number|Long);

//             /** sixStarEquipRankIngPB name */
//             name: string;

//             /** sixStarEquipRankIngPB sixStarEquipNum */
//             sixStarEquipNum: (number|Long);

//             /** sixStarEquipRankIngPB gangName */
//             gangName?: (string|null);

//             /** sixStarEquipRankIngPB weaponId */
//             weaponId: (number|Long);

//             /** sixStarEquipRankIngPB clothesId */
//             clothesId: (number|Long);
//         }

//         /** Represents a sixStarEquipRankIngPB. */
//         class sixStarEquipRankIngPB implements IsixStarEquipRankIngPB {

//             /**
//              * Constructs a new sixStarEquipRankIngPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsixStarEquipRankIngPB);

//             /** sixStarEquipRankIngPB lv. */
//             public lv: (number|Long);

//             /** sixStarEquipRankIngPB sixStarEquipRank. */
//             public sixStarEquipRank: number;

//             /** sixStarEquipRankIngPB roleId. */
//             public roleId: (number|Long);

//             /** sixStarEquipRankIngPB name. */
//             public name: string;

//             /** sixStarEquipRankIngPB sixStarEquipNum. */
//             public sixStarEquipNum: (number|Long);

//             /** sixStarEquipRankIngPB gangName. */
//             public gangName: string;

//             /** sixStarEquipRankIngPB weaponId. */
//             public weaponId: (number|Long);

//             /** sixStarEquipRankIngPB clothesId. */
//             public clothesId: (number|Long);

//             /**
//              * Creates a new sixStarEquipRankIngPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns sixStarEquipRankIngPB instance
//              */
//             public static create(properties?: luck.protobuf.IsixStarEquipRankIngPB): luck.protobuf.sixStarEquipRankIngPB;

//             /**
//              * Encodes the specified sixStarEquipRankIngPB message. Does not implicitly {@link luck.protobuf.sixStarEquipRankIngPB.verify|verify} messages.
//              * @param message sixStarEquipRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsixStarEquipRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified sixStarEquipRankIngPB message, length delimited. Does not implicitly {@link luck.protobuf.sixStarEquipRankIngPB.verify|verify} messages.
//              * @param message sixStarEquipRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsixStarEquipRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a sixStarEquipRankIngPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns sixStarEquipRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.sixStarEquipRankIngPB;

//             /**
//              * Decodes a sixStarEquipRankIngPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns sixStarEquipRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.sixStarEquipRankIngPB;

//             /**
//              * Verifies a sixStarEquipRankIngPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a fightingRankIngPB. */
//         interface IfightingRankIngPB {

//             /** fightingRankIngPB lv */
//             lv: (number|Long);

//             /** fightingRankIngPB fightingRank */
//             fightingRank: number;

//             /** fightingRankIngPB roleId */
//             roleId: (number|Long);

//             /** fightingRankIngPB name */
//             name: string;

//             /** fightingRankIngPB fighting */
//             fighting: (number|Long);

//             /** fightingRankIngPB gangName */
//             gangName?: (string|null);

//             /** fightingRankIngPB weaponId */
//             weaponId: (number|Long);

//             /** fightingRankIngPB clothesId */
//             clothesId: (number|Long);
//         }

//         /** Represents a fightingRankIngPB. */
//         class fightingRankIngPB implements IfightingRankIngPB {

//             /**
//              * Constructs a new fightingRankIngPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IfightingRankIngPB);

//             /** fightingRankIngPB lv. */
//             public lv: (number|Long);

//             /** fightingRankIngPB fightingRank. */
//             public fightingRank: number;

//             /** fightingRankIngPB roleId. */
//             public roleId: (number|Long);

//             /** fightingRankIngPB name. */
//             public name: string;

//             /** fightingRankIngPB fighting. */
//             public fighting: (number|Long);

//             /** fightingRankIngPB gangName. */
//             public gangName: string;

//             /** fightingRankIngPB weaponId. */
//             public weaponId: (number|Long);

//             /** fightingRankIngPB clothesId. */
//             public clothesId: (number|Long);

//             /**
//              * Creates a new fightingRankIngPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns fightingRankIngPB instance
//              */
//             public static create(properties?: luck.protobuf.IfightingRankIngPB): luck.protobuf.fightingRankIngPB;

//             /**
//              * Encodes the specified fightingRankIngPB message. Does not implicitly {@link luck.protobuf.fightingRankIngPB.verify|verify} messages.
//              * @param message fightingRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IfightingRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified fightingRankIngPB message, length delimited. Does not implicitly {@link luck.protobuf.fightingRankIngPB.verify|verify} messages.
//              * @param message fightingRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IfightingRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a fightingRankIngPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns fightingRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.fightingRankIngPB;

//             /**
//              * Decodes a fightingRankIngPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns fightingRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.fightingRankIngPB;

//             /**
//              * Verifies a fightingRankIngPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a diamondConsumeRankIngPB. */
//         interface IdiamondConsumeRankIngPB {

//             /** diamondConsumeRankIngPB lv */
//             lv: (number|Long);

//             /** diamondConsumeRankIngPB diamondConsumeRank */
//             diamondConsumeRank: number;

//             /** diamondConsumeRankIngPB roleId */
//             roleId: (number|Long);

//             /** diamondConsumeRankIngPB name */
//             name: string;

//             /** diamondConsumeRankIngPB diamondConsumeNum */
//             diamondConsumeNum: (number|Long);

//             /** diamondConsumeRankIngPB gangName */
//             gangName?: (string|null);

//             /** diamondConsumeRankIngPB weaponId */
//             weaponId: (number|Long);

//             /** diamondConsumeRankIngPB clothesId */
//             clothesId: (number|Long);
//         }

//         /** Represents a diamondConsumeRankIngPB. */
//         class diamondConsumeRankIngPB implements IdiamondConsumeRankIngPB {

//             /**
//              * Constructs a new diamondConsumeRankIngPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdiamondConsumeRankIngPB);

//             /** diamondConsumeRankIngPB lv. */
//             public lv: (number|Long);

//             /** diamondConsumeRankIngPB diamondConsumeRank. */
//             public diamondConsumeRank: number;

//             /** diamondConsumeRankIngPB roleId. */
//             public roleId: (number|Long);

//             /** diamondConsumeRankIngPB name. */
//             public name: string;

//             /** diamondConsumeRankIngPB diamondConsumeNum. */
//             public diamondConsumeNum: (number|Long);

//             /** diamondConsumeRankIngPB gangName. */
//             public gangName: string;

//             /** diamondConsumeRankIngPB weaponId. */
//             public weaponId: (number|Long);

//             /** diamondConsumeRankIngPB clothesId. */
//             public clothesId: (number|Long);

//             /**
//              * Creates a new diamondConsumeRankIngPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns diamondConsumeRankIngPB instance
//              */
//             public static create(properties?: luck.protobuf.IdiamondConsumeRankIngPB): luck.protobuf.diamondConsumeRankIngPB;

//             /**
//              * Encodes the specified diamondConsumeRankIngPB message. Does not implicitly {@link luck.protobuf.diamondConsumeRankIngPB.verify|verify} messages.
//              * @param message diamondConsumeRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdiamondConsumeRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified diamondConsumeRankIngPB message, length delimited. Does not implicitly {@link luck.protobuf.diamondConsumeRankIngPB.verify|verify} messages.
//              * @param message diamondConsumeRankIngPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdiamondConsumeRankIngPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a diamondConsumeRankIngPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns diamondConsumeRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.diamondConsumeRankIngPB;

//             /**
//              * Decodes a diamondConsumeRankIngPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns diamondConsumeRankIngPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.diamondConsumeRankIngPB;

//             /**
//              * Verifies a diamondConsumeRankIngPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a VipRewardPB. */
//         interface IVipRewardPB {

//             /** VipRewardPB vipLv */
//             vipLv: number;

//             /** VipRewardPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a VipRewardPB. */
//         class VipRewardPB implements IVipRewardPB {

//             /**
//              * Constructs a new VipRewardPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IVipRewardPB);

//             /** VipRewardPB vipLv. */
//             public vipLv: number;

//             /** VipRewardPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new VipRewardPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns VipRewardPB instance
//              */
//             public static create(properties?: luck.protobuf.IVipRewardPB): luck.protobuf.VipRewardPB;

//             /**
//              * Encodes the specified VipRewardPB message. Does not implicitly {@link luck.protobuf.VipRewardPB.verify|verify} messages.
//              * @param message VipRewardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IVipRewardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified VipRewardPB message, length delimited. Does not implicitly {@link luck.protobuf.VipRewardPB.verify|verify} messages.
//              * @param message VipRewardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IVipRewardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a VipRewardPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns VipRewardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.VipRewardPB;

//             /**
//              * Decodes a VipRewardPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns VipRewardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.VipRewardPB;

//             /**
//              * Verifies a VipRewardPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a MonthCardPB. */
//         interface IMonthCardPB {

//             /** MonthCardPB monthCardId */
//             monthCardId: number;

//             /** MonthCardPB days */
//             days: number;

//             /** MonthCardPB startTime */
//             startTime: (number|Long);

//             /** MonthCardPB beGain */
//             beGain: boolean;
//         }

//         /** Represents a MonthCardPB. */
//         class MonthCardPB implements IMonthCardPB {

//             /**
//              * Constructs a new MonthCardPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IMonthCardPB);

//             /** MonthCardPB monthCardId. */
//             public monthCardId: number;

//             /** MonthCardPB days. */
//             public days: number;

//             /** MonthCardPB startTime. */
//             public startTime: (number|Long);

//             /** MonthCardPB beGain. */
//             public beGain: boolean;

//             /**
//              * Creates a new MonthCardPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns MonthCardPB instance
//              */
//             public static create(properties?: luck.protobuf.IMonthCardPB): luck.protobuf.MonthCardPB;

//             /**
//              * Encodes the specified MonthCardPB message. Does not implicitly {@link luck.protobuf.MonthCardPB.verify|verify} messages.
//              * @param message MonthCardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IMonthCardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified MonthCardPB message, length delimited. Does not implicitly {@link luck.protobuf.MonthCardPB.verify|verify} messages.
//              * @param message MonthCardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IMonthCardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a MonthCardPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns MonthCardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.MonthCardPB;

//             /**
//              * Decodes a MonthCardPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns MonthCardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.MonthCardPB;

//             /**
//              * Verifies a MonthCardPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a NoticePB. */
//         interface INoticePB {

//             /** NoticePB noticeId */
//             noticeId: number;

//             /** NoticePB title */
//             title: string;

//             /** NoticePB context */
//             context: string;
//         }

//         /** Represents a NoticePB. */
//         class NoticePB implements INoticePB {

//             /**
//              * Constructs a new NoticePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.INoticePB);

//             /** NoticePB noticeId. */
//             public noticeId: number;

//             /** NoticePB title. */
//             public title: string;

//             /** NoticePB context. */
//             public context: string;

//             /**
//              * Creates a new NoticePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns NoticePB instance
//              */
//             public static create(properties?: luck.protobuf.INoticePB): luck.protobuf.NoticePB;

//             /**
//              * Encodes the specified NoticePB message. Does not implicitly {@link luck.protobuf.NoticePB.verify|verify} messages.
//              * @param message NoticePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.INoticePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified NoticePB message, length delimited. Does not implicitly {@link luck.protobuf.NoticePB.verify|verify} messages.
//              * @param message NoticePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.INoticePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a NoticePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns NoticePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.NoticePB;

//             /**
//              * Decodes a NoticePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns NoticePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.NoticePB;

//             /**
//              * Verifies a NoticePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityTaskPB. */
//         interface IActivityTaskPB {

//             /** ActivityTaskPB activityTaskId */
//             activityTaskId: number;

//             /** ActivityTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** ActivityTaskPB bGain */
//             bGain: boolean;

//             /** ActivityTaskPB bDeblock */
//             bDeblock: boolean;

//             /** ActivityTaskPB haveCompleteTimes */
//             haveCompleteTimes: number;

//             /** ActivityTaskPB canDrawTimes */
//             canDrawTimes: number;
//         }

//         /** Represents an ActivityTaskPB. */
//         class ActivityTaskPB implements IActivityTaskPB {

//             /**
//              * Constructs a new ActivityTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityTaskPB);

//             /** ActivityTaskPB activityTaskId. */
//             public activityTaskId: number;

//             /** ActivityTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** ActivityTaskPB bGain. */
//             public bGain: boolean;

//             /** ActivityTaskPB bDeblock. */
//             public bDeblock: boolean;

//             /** ActivityTaskPB haveCompleteTimes. */
//             public haveCompleteTimes: number;

//             /** ActivityTaskPB canDrawTimes. */
//             public canDrawTimes: number;

//             /**
//              * Creates a new ActivityTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.IActivityTaskPB): luck.protobuf.ActivityTaskPB;

//             /**
//              * Encodes the specified ActivityTaskPB message. Does not implicitly {@link luck.protobuf.ActivityTaskPB.verify|verify} messages.
//              * @param message ActivityTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.ActivityTaskPB.verify|verify} messages.
//              * @param message ActivityTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityTaskPB;

//             /**
//              * Decodes an ActivityTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityTaskPB;

//             /**
//              * Verifies an ActivityTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GameSystemPB. */
//         interface IGameSystemPB {

//             /** GameSystemPB openServiceTime */
//             openServiceTime: (number|Long);
//         }

//         /** Represents a GameSystemPB. */
//         class GameSystemPB implements IGameSystemPB {

//             /**
//              * Constructs a new GameSystemPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGameSystemPB);

//             /** GameSystemPB openServiceTime. */
//             public openServiceTime: (number|Long);

//             /**
//              * Creates a new GameSystemPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GameSystemPB instance
//              */
//             public static create(properties?: luck.protobuf.IGameSystemPB): luck.protobuf.GameSystemPB;

//             /**
//              * Encodes the specified GameSystemPB message. Does not implicitly {@link luck.protobuf.GameSystemPB.verify|verify} messages.
//              * @param message GameSystemPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGameSystemPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GameSystemPB message, length delimited. Does not implicitly {@link luck.protobuf.GameSystemPB.verify|verify} messages.
//              * @param message GameSystemPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGameSystemPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GameSystemPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GameSystemPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GameSystemPB;

//             /**
//              * Decodes a GameSystemPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GameSystemPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GameSystemPB;

//             /**
//              * Verifies a GameSystemPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a MinePB. */
//         interface IMinePB {

//             /** MinePB id */
//             id: number;

//             /** MinePB lastUpdateTime */
//             lastUpdateTime: (number|Long);

//             /** MinePB gold */
//             gold: (number|Long);

//             /** MinePB diamond */
//             diamond: (number|Long);

//             /** MinePB beginTime */
//             beginTime: (number|Long);

//             /** MinePB goblinId */
//             goblinId: number;

//             /** MinePB type */
//             type: number;

//             /** MinePB goblinNum */
//             goblinNum: number;

//             /** MinePB refreshNum */
//             refreshNum: number;
//         }

//         /** Represents a MinePB. */
//         class MinePB implements IMinePB {

//             /**
//              * Constructs a new MinePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IMinePB);

//             /** MinePB id. */
//             public id: number;

//             /** MinePB lastUpdateTime. */
//             public lastUpdateTime: (number|Long);

//             /** MinePB gold. */
//             public gold: (number|Long);

//             /** MinePB diamond. */
//             public diamond: (number|Long);

//             /** MinePB beginTime. */
//             public beginTime: (number|Long);

//             /** MinePB goblinId. */
//             public goblinId: number;

//             /** MinePB type. */
//             public type: number;

//             /** MinePB goblinNum. */
//             public goblinNum: number;

//             /** MinePB refreshNum. */
//             public refreshNum: number;

//             /**
//              * Creates a new MinePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns MinePB instance
//              */
//             public static create(properties?: luck.protobuf.IMinePB): luck.protobuf.MinePB;

//             /**
//              * Encodes the specified MinePB message. Does not implicitly {@link luck.protobuf.MinePB.verify|verify} messages.
//              * @param message MinePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IMinePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified MinePB message, length delimited. Does not implicitly {@link luck.protobuf.MinePB.verify|verify} messages.
//              * @param message MinePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IMinePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a MinePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns MinePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.MinePB;

//             /**
//              * Decodes a MinePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns MinePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.MinePB;

//             /**
//              * Verifies a MinePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DiggingPB. */
//         interface IDiggingPB {

//             /** DiggingPB mineList */
//             mineList?: (luck.protobuf.IMinePB[]|null);
//         }

//         /** Represents a DiggingPB. */
//         class DiggingPB implements IDiggingPB {

//             /**
//              * Constructs a new DiggingPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDiggingPB);

//             /** DiggingPB mineList. */
//             public mineList: luck.protobuf.IMinePB[];

//             /**
//              * Creates a new DiggingPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DiggingPB instance
//              */
//             public static create(properties?: luck.protobuf.IDiggingPB): luck.protobuf.DiggingPB;

//             /**
//              * Encodes the specified DiggingPB message. Does not implicitly {@link luck.protobuf.DiggingPB.verify|verify} messages.
//              * @param message DiggingPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDiggingPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DiggingPB message, length delimited. Does not implicitly {@link luck.protobuf.DiggingPB.verify|verify} messages.
//              * @param message DiggingPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDiggingPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DiggingPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DiggingPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DiggingPB;

//             /**
//              * Decodes a DiggingPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DiggingPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DiggingPB;

//             /**
//              * Verifies a DiggingPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an activityTaskRewardPB. */
//         interface IactivityTaskRewardPB {

//             /** activityTaskRewardPB type */
//             type: number;

//             /** activityTaskRewardPB num */
//             num: number;

//             /** activityTaskRewardPB bGain */
//             bGain: boolean;
//         }

//         /** Represents an activityTaskRewardPB. */
//         class activityTaskRewardPB implements IactivityTaskRewardPB {

//             /**
//              * Constructs a new activityTaskRewardPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IactivityTaskRewardPB);

//             /** activityTaskRewardPB type. */
//             public type: number;

//             /** activityTaskRewardPB num. */
//             public num: number;

//             /** activityTaskRewardPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new activityTaskRewardPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns activityTaskRewardPB instance
//              */
//             public static create(properties?: luck.protobuf.IactivityTaskRewardPB): luck.protobuf.activityTaskRewardPB;

//             /**
//              * Encodes the specified activityTaskRewardPB message. Does not implicitly {@link luck.protobuf.activityTaskRewardPB.verify|verify} messages.
//              * @param message activityTaskRewardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IactivityTaskRewardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified activityTaskRewardPB message, length delimited. Does not implicitly {@link luck.protobuf.activityTaskRewardPB.verify|verify} messages.
//              * @param message activityTaskRewardPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IactivityTaskRewardPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an activityTaskRewardPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns activityTaskRewardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.activityTaskRewardPB;

//             /**
//              * Decodes an activityTaskRewardPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns activityTaskRewardPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.activityTaskRewardPB;

//             /**
//              * Verifies an activityTaskRewardPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a pveBallteFinishReward. */
//         interface IpveBallteFinishReward {

//             /** pveBallteFinishReward playerId */
//             playerId: (number|Long);

//             /** pveBallteFinishReward weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** pveBallteFinishReward cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** pveBallteFinishReward clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** pveBallteFinishReward propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** pveBallteFinishReward materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** pveBallteFinishReward gold */
//             gold?: (number|Long|null);

//             /** pveBallteFinishReward diamond */
//             diamond?: (number|Long|null);
//         }

//         /** Represents a pveBallteFinishReward. */
//         class pveBallteFinishReward implements IpveBallteFinishReward {

//             /**
//              * Constructs a new pveBallteFinishReward.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IpveBallteFinishReward);

//             /** pveBallteFinishReward playerId. */
//             public playerId: (number|Long);

//             /** pveBallteFinishReward weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** pveBallteFinishReward cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** pveBallteFinishReward clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** pveBallteFinishReward propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** pveBallteFinishReward materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** pveBallteFinishReward gold. */
//             public gold: (number|Long);

//             /** pveBallteFinishReward diamond. */
//             public diamond: (number|Long);

//             /**
//              * Creates a new pveBallteFinishReward instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns pveBallteFinishReward instance
//              */
//             public static create(properties?: luck.protobuf.IpveBallteFinishReward): luck.protobuf.pveBallteFinishReward;

//             /**
//              * Encodes the specified pveBallteFinishReward message. Does not implicitly {@link luck.protobuf.pveBallteFinishReward.verify|verify} messages.
//              * @param message pveBallteFinishReward message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IpveBallteFinishReward, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified pveBallteFinishReward message, length delimited. Does not implicitly {@link luck.protobuf.pveBallteFinishReward.verify|verify} messages.
//              * @param message pveBallteFinishReward message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IpveBallteFinishReward, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a pveBallteFinishReward message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns pveBallteFinishReward
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.pveBallteFinishReward;

//             /**
//              * Decodes a pveBallteFinishReward message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns pveBallteFinishReward
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.pveBallteFinishReward;

//             /**
//              * Verifies a pveBallteFinishReward message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityLotteryPB. */
//         interface IActivityLotteryPB {

//             /** ActivityLotteryPB activityId */
//             activityId: number;

//             /** ActivityLotteryPB poolList */
//             poolList?: (number[]|null);

//             /** ActivityLotteryPB lastLotteryTime */
//             lastLotteryTime: (number|Long);

//             /** ActivityLotteryPB canFreeLottery */
//             canFreeLottery: boolean;
//         }

//         /** Represents an ActivityLotteryPB. */
//         class ActivityLotteryPB implements IActivityLotteryPB {

//             /**
//              * Constructs a new ActivityLotteryPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityLotteryPB);

//             /** ActivityLotteryPB activityId. */
//             public activityId: number;

//             /** ActivityLotteryPB poolList. */
//             public poolList: number[];

//             /** ActivityLotteryPB lastLotteryTime. */
//             public lastLotteryTime: (number|Long);

//             /** ActivityLotteryPB canFreeLottery. */
//             public canFreeLottery: boolean;

//             /**
//              * Creates a new ActivityLotteryPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityLotteryPB instance
//              */
//             public static create(properties?: luck.protobuf.IActivityLotteryPB): luck.protobuf.ActivityLotteryPB;

//             /**
//              * Encodes the specified ActivityLotteryPB message. Does not implicitly {@link luck.protobuf.ActivityLotteryPB.verify|verify} messages.
//              * @param message ActivityLotteryPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityLotteryPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityLotteryPB message, length delimited. Does not implicitly {@link luck.protobuf.ActivityLotteryPB.verify|verify} messages.
//              * @param message ActivityLotteryPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityLotteryPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityLotteryPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityLotteryPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityLotteryPB;

//             /**
//              * Decodes an ActivityLotteryPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityLotteryPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityLotteryPB;

//             /**
//              * Verifies an ActivityLotteryPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GainBuffPB. */
//         interface IGainBuffPB {

//             /** GainBuffPB buffId */
//             buffId: number;

//             /** GainBuffPB multiple */
//             multiple: number;

//             /** GainBuffPB startTime */
//             startTime: (number|Long);

//             /** GainBuffPB endTime */
//             endTime: (number|Long);
//         }

//         /** Represents a GainBuffPB. */
//         class GainBuffPB implements IGainBuffPB {

//             /**
//              * Constructs a new GainBuffPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGainBuffPB);

//             /** GainBuffPB buffId. */
//             public buffId: number;

//             /** GainBuffPB multiple. */
//             public multiple: number;

//             /** GainBuffPB startTime. */
//             public startTime: (number|Long);

//             /** GainBuffPB endTime. */
//             public endTime: (number|Long);

//             /**
//              * Creates a new GainBuffPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GainBuffPB instance
//              */
//             public static create(properties?: luck.protobuf.IGainBuffPB): luck.protobuf.GainBuffPB;

//             /**
//              * Encodes the specified GainBuffPB message. Does not implicitly {@link luck.protobuf.GainBuffPB.verify|verify} messages.
//              * @param message GainBuffPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGainBuffPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GainBuffPB message, length delimited. Does not implicitly {@link luck.protobuf.GainBuffPB.verify|verify} messages.
//              * @param message GainBuffPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGainBuffPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GainBuffPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GainBuffPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GainBuffPB;

//             /**
//              * Decodes a GainBuffPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GainBuffPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GainBuffPB;

//             /**
//              * Verifies a GainBuffPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RolePB. */
//         interface IRolePB {

//             /** RolePB id */
//             id: (number|Long);

//             /** RolePB pid */
//             pid: (number|Long);

//             /** RolePB roleId */
//             roleId: number;

//             /** RolePB favorability */
//             favorability: number;

//             /** RolePB mood */
//             mood: number;

//             /** RolePB imageId */
//             imageId: number;

//             /** RolePB chatScheduleMap */
//             chatScheduleMap?: (luck.protobuf.IRoleChatPB[]|null);

//             /** RolePB haveGetFavorability */
//             haveGetFavorability: number;

//             /** RolePB imageList */
//             imageList?: (number[]|null);
//         }

//         /** Represents a RolePB. */
//         class RolePB implements IRolePB {

//             /**
//              * Constructs a new RolePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRolePB);

//             /** RolePB id. */
//             public id: (number|Long);

//             /** RolePB pid. */
//             public pid: (number|Long);

//             /** RolePB roleId. */
//             public roleId: number;

//             /** RolePB favorability. */
//             public favorability: number;

//             /** RolePB mood. */
//             public mood: number;

//             /** RolePB imageId. */
//             public imageId: number;

//             /** RolePB chatScheduleMap. */
//             public chatScheduleMap: luck.protobuf.IRoleChatPB[];

//             /** RolePB haveGetFavorability. */
//             public haveGetFavorability: number;

//             /** RolePB imageList. */
//             public imageList: number[];

//             /**
//              * Creates a new RolePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RolePB instance
//              */
//             public static create(properties?: luck.protobuf.IRolePB): luck.protobuf.RolePB;

//             /**
//              * Encodes the specified RolePB message. Does not implicitly {@link luck.protobuf.RolePB.verify|verify} messages.
//              * @param message RolePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRolePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RolePB message, length delimited. Does not implicitly {@link luck.protobuf.RolePB.verify|verify} messages.
//              * @param message RolePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRolePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RolePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RolePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RolePB;

//             /**
//              * Decodes a RolePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RolePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RolePB;

//             /**
//              * Verifies a RolePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SpecialTaskPB. */
//         interface ISpecialTaskPB {

//             /** SpecialTaskPB roleId */
//             roleId: number;

//             /** SpecialTaskPB specialTaskId */
//             specialTaskId: number;

//             /** SpecialTaskPB condition */
//             condition: luck.protobuf.ITaskConditionPB;

//             /** SpecialTaskPB bGain */
//             bGain: boolean;
//         }

//         /** Represents a SpecialTaskPB. */
//         class SpecialTaskPB implements ISpecialTaskPB {

//             /**
//              * Constructs a new SpecialTaskPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISpecialTaskPB);

//             /** SpecialTaskPB roleId. */
//             public roleId: number;

//             /** SpecialTaskPB specialTaskId. */
//             public specialTaskId: number;

//             /** SpecialTaskPB condition. */
//             public condition: luck.protobuf.ITaskConditionPB;

//             /** SpecialTaskPB bGain. */
//             public bGain: boolean;

//             /**
//              * Creates a new SpecialTaskPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SpecialTaskPB instance
//              */
//             public static create(properties?: luck.protobuf.ISpecialTaskPB): luck.protobuf.SpecialTaskPB;

//             /**
//              * Encodes the specified SpecialTaskPB message. Does not implicitly {@link luck.protobuf.SpecialTaskPB.verify|verify} messages.
//              * @param message SpecialTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISpecialTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SpecialTaskPB message, length delimited. Does not implicitly {@link luck.protobuf.SpecialTaskPB.verify|verify} messages.
//              * @param message SpecialTaskPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISpecialTaskPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SpecialTaskPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SpecialTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SpecialTaskPB;

//             /**
//              * Decodes a SpecialTaskPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SpecialTaskPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SpecialTaskPB;

//             /**
//              * Verifies a SpecialTaskPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoleChatPB. */
//         interface IRoleChatPB {

//             /** RoleChatPB startId */
//             startId: number;

//             /** RoleChatPB endId */
//             endId: number;
//         }

//         /** Represents a RoleChatPB. */
//         class RoleChatPB implements IRoleChatPB {

//             /**
//              * Constructs a new RoleChatPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoleChatPB);

//             /** RoleChatPB startId. */
//             public startId: number;

//             /** RoleChatPB endId. */
//             public endId: number;

//             /**
//              * Creates a new RoleChatPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoleChatPB instance
//              */
//             public static create(properties?: luck.protobuf.IRoleChatPB): luck.protobuf.RoleChatPB;

//             /**
//              * Encodes the specified RoleChatPB message. Does not implicitly {@link luck.protobuf.RoleChatPB.verify|verify} messages.
//              * @param message RoleChatPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoleChatPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoleChatPB message, length delimited. Does not implicitly {@link luck.protobuf.RoleChatPB.verify|verify} messages.
//              * @param message RoleChatPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoleChatPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoleChatPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoleChatPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoleChatPB;

//             /**
//              * Decodes a RoleChatPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoleChatPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoleChatPB;

//             /**
//              * Verifies a RoleChatPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GameBulletDataPB. */
//         interface IGameBulletDataPB {

//             /** GameBulletDataPB RandomFameNumber */
//             RandomFameNumber: number;

//             /** GameBulletDataPB CurrFame */
//             CurrFame: number;

//             /** GameBulletDataPB battleBulletPb */
//             battleBulletPb?: (luck.protobuf.IBattleBulletPB[]|null);

//             /** GameBulletDataPB battleRolePb */
//             battleRolePb?: (luck.protobuf.IBattleRolePB[]|null);

//             /** GameBulletDataPB battleMonsterPb */
//             battleMonsterPb?: (luck.protobuf.IBattleMonsterPB[]|null);
//         }

//         /** Represents a GameBulletDataPB. */
//         class GameBulletDataPB implements IGameBulletDataPB {

//             /**
//              * Constructs a new GameBulletDataPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGameBulletDataPB);

//             /** GameBulletDataPB RandomFameNumber. */
//             public RandomFameNumber: number;

//             /** GameBulletDataPB CurrFame. */
//             public CurrFame: number;

//             /** GameBulletDataPB battleBulletPb. */
//             public battleBulletPb: luck.protobuf.IBattleBulletPB[];

//             /** GameBulletDataPB battleRolePb. */
//             public battleRolePb: luck.protobuf.IBattleRolePB[];

//             /** GameBulletDataPB battleMonsterPb. */
//             public battleMonsterPb: luck.protobuf.IBattleMonsterPB[];

//             /**
//              * Creates a new GameBulletDataPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GameBulletDataPB instance
//              */
//             public static create(properties?: luck.protobuf.IGameBulletDataPB): luck.protobuf.GameBulletDataPB;

//             /**
//              * Encodes the specified GameBulletDataPB message. Does not implicitly {@link luck.protobuf.GameBulletDataPB.verify|verify} messages.
//              * @param message GameBulletDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGameBulletDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GameBulletDataPB message, length delimited. Does not implicitly {@link luck.protobuf.GameBulletDataPB.verify|verify} messages.
//              * @param message GameBulletDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGameBulletDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GameBulletDataPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GameBulletDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GameBulletDataPB;

//             /**
//              * Decodes a GameBulletDataPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GameBulletDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GameBulletDataPB;

//             /**
//              * Verifies a GameBulletDataPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleBulletPB. */
//         interface IBattleBulletPB {

//             /** BattleBulletPB campeID */
//             campeID: number;

//             /** BattleBulletPB bulletID */
//             bulletID: number;

//             /** BattleBulletPB StartPosX */
//             StartPosX: number;

//             /** BattleBulletPB StartPosY */
//             StartPosY: number;

//             /** BattleBulletPB StartPosZ */
//             StartPosZ: number;

//             /** BattleBulletPB AngleX */
//             AngleX: number;

//             /** BattleBulletPB AngleY */
//             AngleY: number;

//             /** BattleBulletPB AngleZ */
//             AngleZ: number;

//             /** BattleBulletPB PosX */
//             PosX: number;

//             /** BattleBulletPB PosY */
//             PosY: number;

//             /** BattleBulletPB PosZ */
//             PosZ: number;

//             /** BattleBulletPB damageType */
//             damageType: number;

//             /** BattleBulletPB Dir */
//             Dir: number;

//             /** BattleBulletPB Speed */
//             Speed: number;

//             /** BattleBulletPB BulletDestructionMethod */
//             BulletDestructionMethod: number;

//             /** BattleBulletPB AttackWay0 */
//             AttackWay0: boolean;

//             /** BattleBulletPB AttackWay1 */
//             AttackWay1: boolean;

//             /** BattleBulletPB AttackWayDis */
//             AttackWayDis: number;

//             /** BattleBulletPB PenetrationNuber */
//             PenetrationNuber: number;

//             /** BattleBulletPB targetList */
//             targetList?: (number[]|null);

//             /** BattleBulletPB TargetTempList */
//             TargetTempList?: (number[]|null);

//             /** BattleBulletPB CanUpdate */
//             CanUpdate: boolean;

//             /** BattleBulletPB BulletFlyCos */
//             BulletFlyCos: number;

//             /** BattleBulletPB timer */
//             timer: number;

//             /** BattleBulletPB hurtCalculate */
//             hurtCalculate: number;

//             /** BattleBulletPB buff_AttackAdd */
//             buff_AttackAdd: number;

//             /** BattleBulletPB attackhurtDist */
//             attackhurtDist: number;

//             /** BattleBulletPB AttackRolePosZ */
//             AttackRolePosZ: number;

//             /** BattleBulletPB attackRoleLevel */
//             attackRoleLevel: number;

//             /** BattleBulletPB attackRoleNoPropertyPower */
//             attackRoleNoPropertyPower: number;

//             /** BattleBulletPB attackRoleIcePropertyPower */
//             attackRoleIcePropertyPower: number;

//             /** BattleBulletPB attackRoleFirePropertyPower */
//             attackRoleFirePropertyPower: number;

//             /** BattleBulletPB attackRoleElectricPropertyPower */
//             attackRoleElectricPropertyPower: number;

//             /** BattleBulletPB attackRoleLandPropertyPower */
//             attackRoleLandPropertyPower: number;

//             /** BattleBulletPB attackRolePoisonPropertyPower */
//             attackRolePoisonPropertyPower: number;

//             /** BattleBulletPB attackRoleLightPropertyPower */
//             attackRoleLightPropertyPower: number;

//             /** BattleBulletPB attackRoleDarkPropertyPower */
//             attackRoleDarkPropertyPower: number;

//             /** BattleBulletPB attackRoleAttackPropertyHurt */
//             attackRoleAttackPropertyHurt: number;

//             /** BattleBulletPB attackRoleIcePropertyHurt */
//             attackRoleIcePropertyHurt: number;

//             /** BattleBulletPB attackRoleFirePropertyHurt */
//             attackRoleFirePropertyHurt: number;

//             /** BattleBulletPB attackRoleElectricPropertyHurt */
//             attackRoleElectricPropertyHurt: number;

//             /** BattleBulletPB attackRoleLandPropertyHurt */
//             attackRoleLandPropertyHurt: number;

//             /** BattleBulletPB attackRolePoisonPropertyHurt */
//             attackRolePoisonPropertyHurt: number;

//             /** BattleBulletPB attackRoleLightPropertyHurt */
//             attackRoleLightPropertyHurt: number;

//             /** BattleBulletPB attackRoleDarkPropertyHurt */
//             attackRoleDarkPropertyHurt: number;

//             /** BattleBulletPB attackRoleHitRate */
//             attackRoleHitRate: number;

//             /** BattleBulletPB attackRoleCri */
//             attackRoleCri: number;

//             /** BattleBulletPB attackRoleCriStrength */
//             attackRoleCriStrength: number;

//             /** BattleBulletPB bulletType */
//             bulletType: number;

//             /** BattleBulletPB bulletDataPb */
//             bulletDataPb: luck.protobuf.IBattleBulletDataPB;
//         }

//         /** Represents a BattleBulletPB. */
//         class BattleBulletPB implements IBattleBulletPB {

//             /**
//              * Constructs a new BattleBulletPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleBulletPB);

//             /** BattleBulletPB campeID. */
//             public campeID: number;

//             /** BattleBulletPB bulletID. */
//             public bulletID: number;

//             /** BattleBulletPB StartPosX. */
//             public StartPosX: number;

//             /** BattleBulletPB StartPosY. */
//             public StartPosY: number;

//             /** BattleBulletPB StartPosZ. */
//             public StartPosZ: number;

//             /** BattleBulletPB AngleX. */
//             public AngleX: number;

//             /** BattleBulletPB AngleY. */
//             public AngleY: number;

//             /** BattleBulletPB AngleZ. */
//             public AngleZ: number;

//             /** BattleBulletPB PosX. */
//             public PosX: number;

//             /** BattleBulletPB PosY. */
//             public PosY: number;

//             /** BattleBulletPB PosZ. */
//             public PosZ: number;

//             /** BattleBulletPB damageType. */
//             public damageType: number;

//             /** BattleBulletPB Dir. */
//             public Dir: number;

//             /** BattleBulletPB Speed. */
//             public Speed: number;

//             /** BattleBulletPB BulletDestructionMethod. */
//             public BulletDestructionMethod: number;

//             /** BattleBulletPB AttackWay0. */
//             public AttackWay0: boolean;

//             /** BattleBulletPB AttackWay1. */
//             public AttackWay1: boolean;

//             /** BattleBulletPB AttackWayDis. */
//             public AttackWayDis: number;

//             /** BattleBulletPB PenetrationNuber. */
//             public PenetrationNuber: number;

//             /** BattleBulletPB targetList. */
//             public targetList: number[];

//             /** BattleBulletPB TargetTempList. */
//             public TargetTempList: number[];

//             /** BattleBulletPB CanUpdate. */
//             public CanUpdate: boolean;

//             /** BattleBulletPB BulletFlyCos. */
//             public BulletFlyCos: number;

//             /** BattleBulletPB timer. */
//             public timer: number;

//             /** BattleBulletPB hurtCalculate. */
//             public hurtCalculate: number;

//             /** BattleBulletPB buff_AttackAdd. */
//             public buff_AttackAdd: number;

//             /** BattleBulletPB attackhurtDist. */
//             public attackhurtDist: number;

//             /** BattleBulletPB AttackRolePosZ. */
//             public AttackRolePosZ: number;

//             /** BattleBulletPB attackRoleLevel. */
//             public attackRoleLevel: number;

//             /** BattleBulletPB attackRoleNoPropertyPower. */
//             public attackRoleNoPropertyPower: number;

//             /** BattleBulletPB attackRoleIcePropertyPower. */
//             public attackRoleIcePropertyPower: number;

//             /** BattleBulletPB attackRoleFirePropertyPower. */
//             public attackRoleFirePropertyPower: number;

//             /** BattleBulletPB attackRoleElectricPropertyPower. */
//             public attackRoleElectricPropertyPower: number;

//             /** BattleBulletPB attackRoleLandPropertyPower. */
//             public attackRoleLandPropertyPower: number;

//             /** BattleBulletPB attackRolePoisonPropertyPower. */
//             public attackRolePoisonPropertyPower: number;

//             /** BattleBulletPB attackRoleLightPropertyPower. */
//             public attackRoleLightPropertyPower: number;

//             /** BattleBulletPB attackRoleDarkPropertyPower. */
//             public attackRoleDarkPropertyPower: number;

//             /** BattleBulletPB attackRoleAttackPropertyHurt. */
//             public attackRoleAttackPropertyHurt: number;

//             /** BattleBulletPB attackRoleIcePropertyHurt. */
//             public attackRoleIcePropertyHurt: number;

//             /** BattleBulletPB attackRoleFirePropertyHurt. */
//             public attackRoleFirePropertyHurt: number;

//             /** BattleBulletPB attackRoleElectricPropertyHurt. */
//             public attackRoleElectricPropertyHurt: number;

//             /** BattleBulletPB attackRoleLandPropertyHurt. */
//             public attackRoleLandPropertyHurt: number;

//             /** BattleBulletPB attackRolePoisonPropertyHurt. */
//             public attackRolePoisonPropertyHurt: number;

//             /** BattleBulletPB attackRoleLightPropertyHurt. */
//             public attackRoleLightPropertyHurt: number;

//             /** BattleBulletPB attackRoleDarkPropertyHurt. */
//             public attackRoleDarkPropertyHurt: number;

//             /** BattleBulletPB attackRoleHitRate. */
//             public attackRoleHitRate: number;

//             /** BattleBulletPB attackRoleCri. */
//             public attackRoleCri: number;

//             /** BattleBulletPB attackRoleCriStrength. */
//             public attackRoleCriStrength: number;

//             /** BattleBulletPB bulletType. */
//             public bulletType: number;

//             /** BattleBulletPB bulletDataPb. */
//             public bulletDataPb: luck.protobuf.IBattleBulletDataPB;

//             /**
//              * Creates a new BattleBulletPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleBulletPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleBulletPB): luck.protobuf.BattleBulletPB;

//             /**
//              * Encodes the specified BattleBulletPB message. Does not implicitly {@link luck.protobuf.BattleBulletPB.verify|verify} messages.
//              * @param message BattleBulletPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleBulletPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleBulletPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleBulletPB.verify|verify} messages.
//              * @param message BattleBulletPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleBulletPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleBulletPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleBulletPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleBulletPB;

//             /**
//              * Decodes a BattleBulletPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleBulletPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleBulletPB;

//             /**
//              * Verifies a BattleBulletPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleBulletDataPB. */
//         interface IBattleBulletDataPB {

//             /** BattleBulletDataPB ID */
//             ID: number;

//             /** BattleBulletDataPB Name */
//             Name: string;

//             /** BattleBulletDataPB BulletFXPrefab */
//             BulletFXPrefab: string;

//             /** BattleBulletDataPB MuzzleFxPrefab */
//             MuzzleFxPrefab: string;

//             /** BattleBulletDataPB HitFXPrefab */
//             HitFXPrefab: string;

//             /** BattleBulletDataPB StartPos */
//             StartPos: string;

//             /** BattleBulletDataPB AttackWay */
//             AttackWay: string;

//             /** BattleBulletDataPB AttackWayCon */
//             AttackWayCon: string;

//             /** BattleBulletDataPB HurtCalculate */
//             HurtCalculate: number;

//             /** BattleBulletDataPB HurtCalculateCoe */
//             HurtCalculateCoe: number;

//             /** BattleBulletDataPB BulletCount */
//             BulletCount: number;

//             /** BattleBulletDataPB FlyDirection */
//             FlyDirection: number;

//             /** BattleBulletDataPB FlyWay */
//             FlyWay: number;

//             /** BattleBulletDataPB FlyWayCoe */
//             FlyWayCoe: number;

//             /** BattleBulletDataPB FlySpeed */
//             FlySpeed: number;

//             /** BattleBulletDataPB BulletDestructionMethod */
//             BulletDestructionMethod: number;

//             /** BattleBulletDataPB FlyCos */
//             FlyCos: number;

//             /** BattleBulletDataPB PenetrationCount */
//             PenetrationCount: number;

//             /** BattleBulletDataPB RepelDis */
//             RepelDis: number;

//             /** BattleBulletDataPB timer */
//             timer: number;
//         }

//         /** Represents a BattleBulletDataPB. */
//         class BattleBulletDataPB implements IBattleBulletDataPB {

//             /**
//              * Constructs a new BattleBulletDataPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleBulletDataPB);

//             /** BattleBulletDataPB ID. */
//             public ID: number;

//             /** BattleBulletDataPB Name. */
//             public Name: string;

//             /** BattleBulletDataPB BulletFXPrefab. */
//             public BulletFXPrefab: string;

//             /** BattleBulletDataPB MuzzleFxPrefab. */
//             public MuzzleFxPrefab: string;

//             /** BattleBulletDataPB HitFXPrefab. */
//             public HitFXPrefab: string;

//             /** BattleBulletDataPB StartPos. */
//             public StartPos: string;

//             /** BattleBulletDataPB AttackWay. */
//             public AttackWay: string;

//             /** BattleBulletDataPB AttackWayCon. */
//             public AttackWayCon: string;

//             /** BattleBulletDataPB HurtCalculate. */
//             public HurtCalculate: number;

//             /** BattleBulletDataPB HurtCalculateCoe. */
//             public HurtCalculateCoe: number;

//             /** BattleBulletDataPB BulletCount. */
//             public BulletCount: number;

//             /** BattleBulletDataPB FlyDirection. */
//             public FlyDirection: number;

//             /** BattleBulletDataPB FlyWay. */
//             public FlyWay: number;

//             /** BattleBulletDataPB FlyWayCoe. */
//             public FlyWayCoe: number;

//             /** BattleBulletDataPB FlySpeed. */
//             public FlySpeed: number;

//             /** BattleBulletDataPB BulletDestructionMethod. */
//             public BulletDestructionMethod: number;

//             /** BattleBulletDataPB FlyCos. */
//             public FlyCos: number;

//             /** BattleBulletDataPB PenetrationCount. */
//             public PenetrationCount: number;

//             /** BattleBulletDataPB RepelDis. */
//             public RepelDis: number;

//             /** BattleBulletDataPB timer. */
//             public timer: number;

//             /**
//              * Creates a new BattleBulletDataPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleBulletDataPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleBulletDataPB): luck.protobuf.BattleBulletDataPB;

//             /**
//              * Encodes the specified BattleBulletDataPB message. Does not implicitly {@link luck.protobuf.BattleBulletDataPB.verify|verify} messages.
//              * @param message BattleBulletDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleBulletDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleBulletDataPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleBulletDataPB.verify|verify} messages.
//              * @param message BattleBulletDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleBulletDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleBulletDataPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleBulletDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleBulletDataPB;

//             /**
//              * Decodes a BattleBulletDataPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleBulletDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleBulletDataPB;

//             /**
//              * Verifies a BattleBulletDataPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleRolePB. */
//         interface IBattleRolePB {

//             /** BattleRolePB PosX */
//             PosX: number;

//             /** BattleRolePB PosY */
//             PosY: number;

//             /** BattleRolePB PosZ */
//             PosZ: number;

//             /** BattleRolePB AngleX */
//             AngleX: number;

//             /** BattleRolePB AngleY */
//             AngleY: number;

//             /** BattleRolePB AngleZ */
//             AngleZ: number;

//             /** BattleRolePB StateID */
//             StateID: number;

//             /** BattleRolePB CurrWeaponID */
//             CurrWeaponID: number;

//             /** BattleRolePB SwithWeaponState */
//             SwithWeaponState: number;

//             /** BattleRolePB SwithWeaponTimer */
//             SwithWeaponTimer: number;

//             /** BattleRolePB HitTimer */
//             HitTimer: number;

//             /** BattleRolePB CurrWeaponAttackTime */
//             CurrWeaponAttackTime: number;

//             /** BattleRolePB KnifAttackEndTime */
//             KnifAttackEndTime: number;

//             /** BattleRolePB KinfeAttackState */
//             KinfeAttackState: number;

//             /** BattleRolePB IsAttackState */
//             IsAttackState: boolean;

//             /** BattleRolePB IsMoveState */
//             IsMoveState: boolean;

//             /** BattleRolePB isCanAttack */
//             isCanAttack: boolean;

//             /** BattleRolePB playerDataPb */
//             playerDataPb: luck.protobuf.IBattlePlayerDataPB;

//             /** BattleRolePB weaponPBList */
//             weaponPBList?: (luck.protobuf.IBattleWeaponPB[]|null);
//         }

//         /** Represents a BattleRolePB. */
//         class BattleRolePB implements IBattleRolePB {

//             /**
//              * Constructs a new BattleRolePB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleRolePB);

//             /** BattleRolePB PosX. */
//             public PosX: number;

//             /** BattleRolePB PosY. */
//             public PosY: number;

//             /** BattleRolePB PosZ. */
//             public PosZ: number;

//             /** BattleRolePB AngleX. */
//             public AngleX: number;

//             /** BattleRolePB AngleY. */
//             public AngleY: number;

//             /** BattleRolePB AngleZ. */
//             public AngleZ: number;

//             /** BattleRolePB StateID. */
//             public StateID: number;

//             /** BattleRolePB CurrWeaponID. */
//             public CurrWeaponID: number;

//             /** BattleRolePB SwithWeaponState. */
//             public SwithWeaponState: number;

//             /** BattleRolePB SwithWeaponTimer. */
//             public SwithWeaponTimer: number;

//             /** BattleRolePB HitTimer. */
//             public HitTimer: number;

//             /** BattleRolePB CurrWeaponAttackTime. */
//             public CurrWeaponAttackTime: number;

//             /** BattleRolePB KnifAttackEndTime. */
//             public KnifAttackEndTime: number;

//             /** BattleRolePB KinfeAttackState. */
//             public KinfeAttackState: number;

//             /** BattleRolePB IsAttackState. */
//             public IsAttackState: boolean;

//             /** BattleRolePB IsMoveState. */
//             public IsMoveState: boolean;

//             /** BattleRolePB isCanAttack. */
//             public isCanAttack: boolean;

//             /** BattleRolePB playerDataPb. */
//             public playerDataPb: luck.protobuf.IBattlePlayerDataPB;

//             /** BattleRolePB weaponPBList. */
//             public weaponPBList: luck.protobuf.IBattleWeaponPB[];

//             /**
//              * Creates a new BattleRolePB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleRolePB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleRolePB): luck.protobuf.BattleRolePB;

//             /**
//              * Encodes the specified BattleRolePB message. Does not implicitly {@link luck.protobuf.BattleRolePB.verify|verify} messages.
//              * @param message BattleRolePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleRolePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleRolePB message, length delimited. Does not implicitly {@link luck.protobuf.BattleRolePB.verify|verify} messages.
//              * @param message BattleRolePB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleRolePB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleRolePB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleRolePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleRolePB;

//             /**
//              * Decodes a BattleRolePB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleRolePB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleRolePB;

//             /**
//              * Verifies a BattleRolePB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattlePlayerDataPB. */
//         interface IBattlePlayerDataPB {

//             /** BattlePlayerDataPB weaponList */
//             weaponList?: (luck.protobuf.IBattleWeaponPB[]|null);

//             /** BattlePlayerDataPB PlayerID */
//             PlayerID: number;

//             /** BattlePlayerDataPB RoleID */
//             RoleID: number;

//             /** BattlePlayerDataPB CampID */
//             CampID: number;

//             /** BattlePlayerDataPB ClothsVoID */
//             ClothsVoID: number;

//             /** BattlePlayerDataPB PrefabName */
//             PrefabName: string;

//             /** BattlePlayerDataPB Level */
//             Level: number;

//             /** BattlePlayerDataPB Experience */
//             Experience: number;

//             /** BattlePlayerDataPB Weight */
//             Weight: number;

//             /** BattlePlayerDataPB BodyPower */
//             BodyPower: number;

//             /** BattlePlayerDataPB GameCoin */
//             GameCoin: number;

//             /** BattlePlayerDataPB RechargeCoin */
//             RechargeCoin: number;

//             /** BattlePlayerDataPB MoveSpeed */
//             MoveSpeed: number;

//             /** BattlePlayerDataPB Hit */
//             Hit: number;

//             /** BattlePlayerDataPB Dodge */
//             Dodge: number;

//             /** BattlePlayerDataPB Cir */
//             Cir: number;

//             /** BattlePlayerDataPB CriStrength */
//             CriStrength: number;

//             /** BattlePlayerDataPB GoldCoinPlus */
//             GoldCoinPlus: number;

//             /** BattlePlayerDataPB ProPlus */
//             ProPlus: number;

//             /** BattlePlayerDataPB MaxHp */
//             MaxHp: (number|Long);

//             /** BattlePlayerDataPB CurrHp */
//             CurrHp: (number|Long);

//             /** BattlePlayerDataPB CostBulletJiaCheng */
//             CostBulletJiaCheng: number;

//             /** BattlePlayerDataPB NoPropertyResistance */
//             NoPropertyResistance: number;

//             /** BattlePlayerDataPB IcePropertyResistance */
//             IcePropertyResistance: number;

//             /** BattlePlayerDataPB FirePropertyResistance */
//             FirePropertyResistance: number;

//             /** BattlePlayerDataPB ElectricPropertyResistance */
//             ElectricPropertyResistance: number;

//             /** BattlePlayerDataPB LandPropertyResistance */
//             LandPropertyResistance: number;

//             /** BattlePlayerDataPB PoisonPropertyResistance */
//             PoisonPropertyResistance: number;

//             /** BattlePlayerDataPB LightPropertyResistance */
//             LightPropertyResistance: number;

//             /** BattlePlayerDataPB DarkPropertyResistance */
//             DarkPropertyResistance: number;

//             /** BattlePlayerDataPB ClothsInlay */
//             ClothsInlay: number;

//             /** BattlePlayerDataPB NoPropertyReduction */
//             NoPropertyReduction: number;

//             /** BattlePlayerDataPB IcePropertyReduction */
//             IcePropertyReduction: number;

//             /** BattlePlayerDataPB FirePropertyReduction */
//             FirePropertyReduction: number;

//             /** BattlePlayerDataPB ElectricPropertyReduction */
//             ElectricPropertyReduction: number;

//             /** BattlePlayerDataPB LandPropertyReduction */
//             LandPropertyReduction: number;

//             /** BattlePlayerDataPB PoisonPropertyReduction */
//             PoisonPropertyReduction: number;

//             /** BattlePlayerDataPB LightPropertyReduction */
//             LightPropertyReduction: number;

//             /** BattlePlayerDataPB DarkPropertyReduction */
//             DarkPropertyReduction: number;

//             /** BattlePlayerDataPB skillList */
//             skillList?: (number[]|null);
//         }

//         /** Represents a BattlePlayerDataPB. */
//         class BattlePlayerDataPB implements IBattlePlayerDataPB {

//             /**
//              * Constructs a new BattlePlayerDataPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattlePlayerDataPB);

//             /** BattlePlayerDataPB weaponList. */
//             public weaponList: luck.protobuf.IBattleWeaponPB[];

//             /** BattlePlayerDataPB PlayerID. */
//             public PlayerID: number;

//             /** BattlePlayerDataPB RoleID. */
//             public RoleID: number;

//             /** BattlePlayerDataPB CampID. */
//             public CampID: number;

//             /** BattlePlayerDataPB ClothsVoID. */
//             public ClothsVoID: number;

//             /** BattlePlayerDataPB PrefabName. */
//             public PrefabName: string;

//             /** BattlePlayerDataPB Level. */
//             public Level: number;

//             /** BattlePlayerDataPB Experience. */
//             public Experience: number;

//             /** BattlePlayerDataPB Weight. */
//             public Weight: number;

//             /** BattlePlayerDataPB BodyPower. */
//             public BodyPower: number;

//             /** BattlePlayerDataPB GameCoin. */
//             public GameCoin: number;

//             /** BattlePlayerDataPB RechargeCoin. */
//             public RechargeCoin: number;

//             /** BattlePlayerDataPB MoveSpeed. */
//             public MoveSpeed: number;

//             /** BattlePlayerDataPB Hit. */
//             public Hit: number;

//             /** BattlePlayerDataPB Dodge. */
//             public Dodge: number;

//             /** BattlePlayerDataPB Cir. */
//             public Cir: number;

//             /** BattlePlayerDataPB CriStrength. */
//             public CriStrength: number;

//             /** BattlePlayerDataPB GoldCoinPlus. */
//             public GoldCoinPlus: number;

//             /** BattlePlayerDataPB ProPlus. */
//             public ProPlus: number;

//             /** BattlePlayerDataPB MaxHp. */
//             public MaxHp: (number|Long);

//             /** BattlePlayerDataPB CurrHp. */
//             public CurrHp: (number|Long);

//             /** BattlePlayerDataPB CostBulletJiaCheng. */
//             public CostBulletJiaCheng: number;

//             /** BattlePlayerDataPB NoPropertyResistance. */
//             public NoPropertyResistance: number;

//             /** BattlePlayerDataPB IcePropertyResistance. */
//             public IcePropertyResistance: number;

//             /** BattlePlayerDataPB FirePropertyResistance. */
//             public FirePropertyResistance: number;

//             /** BattlePlayerDataPB ElectricPropertyResistance. */
//             public ElectricPropertyResistance: number;

//             /** BattlePlayerDataPB LandPropertyResistance. */
//             public LandPropertyResistance: number;

//             /** BattlePlayerDataPB PoisonPropertyResistance. */
//             public PoisonPropertyResistance: number;

//             /** BattlePlayerDataPB LightPropertyResistance. */
//             public LightPropertyResistance: number;

//             /** BattlePlayerDataPB DarkPropertyResistance. */
//             public DarkPropertyResistance: number;

//             /** BattlePlayerDataPB ClothsInlay. */
//             public ClothsInlay: number;

//             /** BattlePlayerDataPB NoPropertyReduction. */
//             public NoPropertyReduction: number;

//             /** BattlePlayerDataPB IcePropertyReduction. */
//             public IcePropertyReduction: number;

//             /** BattlePlayerDataPB FirePropertyReduction. */
//             public FirePropertyReduction: number;

//             /** BattlePlayerDataPB ElectricPropertyReduction. */
//             public ElectricPropertyReduction: number;

//             /** BattlePlayerDataPB LandPropertyReduction. */
//             public LandPropertyReduction: number;

//             /** BattlePlayerDataPB PoisonPropertyReduction. */
//             public PoisonPropertyReduction: number;

//             /** BattlePlayerDataPB LightPropertyReduction. */
//             public LightPropertyReduction: number;

//             /** BattlePlayerDataPB DarkPropertyReduction. */
//             public DarkPropertyReduction: number;

//             /** BattlePlayerDataPB skillList. */
//             public skillList: number[];

//             /**
//              * Creates a new BattlePlayerDataPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattlePlayerDataPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattlePlayerDataPB): luck.protobuf.BattlePlayerDataPB;

//             /**
//              * Encodes the specified BattlePlayerDataPB message. Does not implicitly {@link luck.protobuf.BattlePlayerDataPB.verify|verify} messages.
//              * @param message BattlePlayerDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattlePlayerDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattlePlayerDataPB message, length delimited. Does not implicitly {@link luck.protobuf.BattlePlayerDataPB.verify|verify} messages.
//              * @param message BattlePlayerDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattlePlayerDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattlePlayerDataPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattlePlayerDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattlePlayerDataPB;

//             /**
//              * Decodes a BattlePlayerDataPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattlePlayerDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattlePlayerDataPB;

//             /**
//              * Verifies a BattlePlayerDataPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleWeaponPB. */
//         interface IBattleWeaponPB {

//             /** BattleWeaponPB WeaponID */
//             WeaponID: number;

//             /** BattleWeaponPB weaponPb */
//             weaponPb: luck.protobuf.IBattleWeaponDataPB;
//         }

//         /** Represents a BattleWeaponPB. */
//         class BattleWeaponPB implements IBattleWeaponPB {

//             /**
//              * Constructs a new BattleWeaponPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleWeaponPB);

//             /** BattleWeaponPB WeaponID. */
//             public WeaponID: number;

//             /** BattleWeaponPB weaponPb. */
//             public weaponPb: luck.protobuf.IBattleWeaponDataPB;

//             /**
//              * Creates a new BattleWeaponPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleWeaponPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleWeaponPB): luck.protobuf.BattleWeaponPB;

//             /**
//              * Encodes the specified BattleWeaponPB message. Does not implicitly {@link luck.protobuf.BattleWeaponPB.verify|verify} messages.
//              * @param message BattleWeaponPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleWeaponPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleWeaponPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleWeaponPB.verify|verify} messages.
//              * @param message BattleWeaponPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleWeaponPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleWeaponPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleWeaponPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleWeaponPB;

//             /**
//              * Decodes a BattleWeaponPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleWeaponPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleWeaponPB;

//             /**
//              * Verifies a BattleWeaponPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleWeaponDataPB. */
//         interface IBattleWeaponDataPB {

//             /** BattleWeaponDataPB WeaponID */
//             WeaponID: number;

//             /** BattleWeaponDataPB Uid */
//             Uid: number;

//             /** BattleWeaponDataPB WeaponNode */
//             WeaponNode: number;

//             /** BattleWeaponDataPB CostBulletCount */
//             CostBulletCount: number;

//             /** BattleWeaponDataPB CurrBullet */
//             CurrBullet: number;

//             /** BattleWeaponDataPB BombLoad */
//             BombLoad: number;

//             /** BattleWeaponDataPB bulletDataPb */
//             bulletDataPb: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata1 */
//             Bulletdata1: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata2 */
//             Bulletdata2: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata3 */
//             Bulletdata3: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB InlayHoleCount */
//             InlayHoleCount: number;

//             /** BattleWeaponDataPB InlayHoleEffect1 */
//             InlayHoleEffect1: string;

//             /** BattleWeaponDataPB InlayHoleEffect2 */
//             InlayHoleEffect2: string;

//             /** BattleWeaponDataPB InlayHoleEffect3 */
//             InlayHoleEffect3: string;

//             /** BattleWeaponDataPB InlayHoleEffect4 */
//             InlayHoleEffect4: string;

//             /** BattleWeaponDataPB NoPropertyPower */
//             NoPropertyPower: number;

//             /** BattleWeaponDataPB IcePropertyPower */
//             IcePropertyPower: number;

//             /** BattleWeaponDataPB FirePropertyPower */
//             FirePropertyPower: number;

//             /** BattleWeaponDataPB ElectricPropertyPower */
//             ElectricPropertyPower: number;

//             /** BattleWeaponDataPB LandPropertyPower */
//             LandPropertyPower: number;

//             /** BattleWeaponDataPB PoisonPropertyPower */
//             PoisonPropertyPower: number;

//             /** BattleWeaponDataPB LightPropertyPower */
//             LightPropertyPower: number;

//             /** BattleWeaponDataPB DarkPropertyPower */
//             DarkPropertyPower: number;

//             /** BattleWeaponDataPB NoPropertyStreng */
//             NoPropertyStreng: number;

//             /** BattleWeaponDataPB IcePropertyStreng */
//             IcePropertyStreng: number;

//             /** BattleWeaponDataPB FirePropertyStreng */
//             FirePropertyStreng: number;

//             /** BattleWeaponDataPB ElectricPropertyStreng */
//             ElectricPropertyStreng: number;

//             /** BattleWeaponDataPB LandPropertyStreng */
//             LandPropertyStreng: number;

//             /** BattleWeaponDataPB PoisonPropertyStreng */
//             PoisonPropertyStreng: number;

//             /** BattleWeaponDataPB LightPropertyStreng */
//             LightPropertyStreng: number;

//             /** BattleWeaponDataPB DarkPropertyStreng */
//             DarkPropertyStreng: number;

//             /** BattleWeaponDataPB NoPropertyHurt */
//             NoPropertyHurt: number;

//             /** BattleWeaponDataPB IcePropertyHurt */
//             IcePropertyHurt: number;

//             /** BattleWeaponDataPB FirePropertyHurt */
//             FirePropertyHurt: number;

//             /** BattleWeaponDataPB ElectricPropertyHurt */
//             ElectricPropertyHurt: number;

//             /** BattleWeaponDataPB LandPropertyHurt */
//             LandPropertyHurt: number;

//             /** BattleWeaponDataPB PoisonPropertyHurt */
//             PoisonPropertyHurt: number;

//             /** BattleWeaponDataPB LightPropertyHurt */
//             LightPropertyHurt: number;

//             /** BattleWeaponDataPB DarkPropertyHurt */
//             DarkPropertyHurt: number;

//             /** BattleWeaponDataPB AttackSpeed */
//             AttackSpeed: number;

//             /** BattleWeaponDataPB skillList */
//             skillList?: (number[]|null);

//             /** BattleWeaponDataPB WeaponType */
//             WeaponType: number;
//         }

//         /** Represents a BattleWeaponDataPB. */
//         class BattleWeaponDataPB implements IBattleWeaponDataPB {

//             /**
//              * Constructs a new BattleWeaponDataPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleWeaponDataPB);

//             /** BattleWeaponDataPB WeaponID. */
//             public WeaponID: number;

//             /** BattleWeaponDataPB Uid. */
//             public Uid: number;

//             /** BattleWeaponDataPB WeaponNode. */
//             public WeaponNode: number;

//             /** BattleWeaponDataPB CostBulletCount. */
//             public CostBulletCount: number;

//             /** BattleWeaponDataPB CurrBullet. */
//             public CurrBullet: number;

//             /** BattleWeaponDataPB BombLoad. */
//             public BombLoad: number;

//             /** BattleWeaponDataPB bulletDataPb. */
//             public bulletDataPb: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata1. */
//             public Bulletdata1: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata2. */
//             public Bulletdata2: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB Bulletdata3. */
//             public Bulletdata3: luck.protobuf.IBattleBulletDataPB;

//             /** BattleWeaponDataPB InlayHoleCount. */
//             public InlayHoleCount: number;

//             /** BattleWeaponDataPB InlayHoleEffect1. */
//             public InlayHoleEffect1: string;

//             /** BattleWeaponDataPB InlayHoleEffect2. */
//             public InlayHoleEffect2: string;

//             /** BattleWeaponDataPB InlayHoleEffect3. */
//             public InlayHoleEffect3: string;

//             /** BattleWeaponDataPB InlayHoleEffect4. */
//             public InlayHoleEffect4: string;

//             /** BattleWeaponDataPB NoPropertyPower. */
//             public NoPropertyPower: number;

//             /** BattleWeaponDataPB IcePropertyPower. */
//             public IcePropertyPower: number;

//             /** BattleWeaponDataPB FirePropertyPower. */
//             public FirePropertyPower: number;

//             /** BattleWeaponDataPB ElectricPropertyPower. */
//             public ElectricPropertyPower: number;

//             /** BattleWeaponDataPB LandPropertyPower. */
//             public LandPropertyPower: number;

//             /** BattleWeaponDataPB PoisonPropertyPower. */
//             public PoisonPropertyPower: number;

//             /** BattleWeaponDataPB LightPropertyPower. */
//             public LightPropertyPower: number;

//             /** BattleWeaponDataPB DarkPropertyPower. */
//             public DarkPropertyPower: number;

//             /** BattleWeaponDataPB NoPropertyStreng. */
//             public NoPropertyStreng: number;

//             /** BattleWeaponDataPB IcePropertyStreng. */
//             public IcePropertyStreng: number;

//             /** BattleWeaponDataPB FirePropertyStreng. */
//             public FirePropertyStreng: number;

//             /** BattleWeaponDataPB ElectricPropertyStreng. */
//             public ElectricPropertyStreng: number;

//             /** BattleWeaponDataPB LandPropertyStreng. */
//             public LandPropertyStreng: number;

//             /** BattleWeaponDataPB PoisonPropertyStreng. */
//             public PoisonPropertyStreng: number;

//             /** BattleWeaponDataPB LightPropertyStreng. */
//             public LightPropertyStreng: number;

//             /** BattleWeaponDataPB DarkPropertyStreng. */
//             public DarkPropertyStreng: number;

//             /** BattleWeaponDataPB NoPropertyHurt. */
//             public NoPropertyHurt: number;

//             /** BattleWeaponDataPB IcePropertyHurt. */
//             public IcePropertyHurt: number;

//             /** BattleWeaponDataPB FirePropertyHurt. */
//             public FirePropertyHurt: number;

//             /** BattleWeaponDataPB ElectricPropertyHurt. */
//             public ElectricPropertyHurt: number;

//             /** BattleWeaponDataPB LandPropertyHurt. */
//             public LandPropertyHurt: number;

//             /** BattleWeaponDataPB PoisonPropertyHurt. */
//             public PoisonPropertyHurt: number;

//             /** BattleWeaponDataPB LightPropertyHurt. */
//             public LightPropertyHurt: number;

//             /** BattleWeaponDataPB DarkPropertyHurt. */
//             public DarkPropertyHurt: number;

//             /** BattleWeaponDataPB AttackSpeed. */
//             public AttackSpeed: number;

//             /** BattleWeaponDataPB skillList. */
//             public skillList: number[];

//             /** BattleWeaponDataPB WeaponType. */
//             public WeaponType: number;

//             /**
//              * Creates a new BattleWeaponDataPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleWeaponDataPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleWeaponDataPB): luck.protobuf.BattleWeaponDataPB;

//             /**
//              * Encodes the specified BattleWeaponDataPB message. Does not implicitly {@link luck.protobuf.BattleWeaponDataPB.verify|verify} messages.
//              * @param message BattleWeaponDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleWeaponDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleWeaponDataPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleWeaponDataPB.verify|verify} messages.
//              * @param message BattleWeaponDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleWeaponDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleWeaponDataPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleWeaponDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleWeaponDataPB;

//             /**
//              * Decodes a BattleWeaponDataPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleWeaponDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleWeaponDataPB;

//             /**
//              * Verifies a BattleWeaponDataPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleMonsterPB. */
//         interface IBattleMonsterPB {

//             /** BattleMonsterPB PosX */
//             PosX: number;

//             /** BattleMonsterPB PosY */
//             PosY: number;

//             /** BattleMonsterPB PosZ */
//             PosZ: number;

//             /** BattleMonsterPB AngleX */
//             AngleX: number;

//             /** BattleMonsterPB AngleY */
//             AngleY: number;

//             /** BattleMonsterPB AngleZ */
//             AngleZ: number;

//             /** BattleMonsterPB TargetX */
//             TargetX: number;

//             /** BattleMonsterPB TargetY */
//             TargetY: number;

//             /** BattleMonsterPB TargetZ */
//             TargetZ: number;

//             /** BattleMonsterPB monsterPb */
//             monsterPb: luck.protobuf.IBattleMonsterDataPB;

//             /** BattleMonsterPB CurrStateID */
//             CurrStateID: number;

//             /** BattleMonsterPB IsAttackState */
//             IsAttackState: boolean;

//             /** BattleMonsterPB IsMoveState */
//             IsMoveState: boolean;

//             /** BattleMonsterPB isCanAttack */
//             isCanAttack: boolean;

//             /** BattleMonsterPB AttackTimer */
//             AttackTimer: number;

//             /** BattleMonsterPB HitTimer */
//             HitTimer: number;
//         }

//         /** Represents a BattleMonsterPB. */
//         class BattleMonsterPB implements IBattleMonsterPB {

//             /**
//              * Constructs a new BattleMonsterPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleMonsterPB);

//             /** BattleMonsterPB PosX. */
//             public PosX: number;

//             /** BattleMonsterPB PosY. */
//             public PosY: number;

//             /** BattleMonsterPB PosZ. */
//             public PosZ: number;

//             /** BattleMonsterPB AngleX. */
//             public AngleX: number;

//             /** BattleMonsterPB AngleY. */
//             public AngleY: number;

//             /** BattleMonsterPB AngleZ. */
//             public AngleZ: number;

//             /** BattleMonsterPB TargetX. */
//             public TargetX: number;

//             /** BattleMonsterPB TargetY. */
//             public TargetY: number;

//             /** BattleMonsterPB TargetZ. */
//             public TargetZ: number;

//             /** BattleMonsterPB monsterPb. */
//             public monsterPb: luck.protobuf.IBattleMonsterDataPB;

//             /** BattleMonsterPB CurrStateID. */
//             public CurrStateID: number;

//             /** BattleMonsterPB IsAttackState. */
//             public IsAttackState: boolean;

//             /** BattleMonsterPB IsMoveState. */
//             public IsMoveState: boolean;

//             /** BattleMonsterPB isCanAttack. */
//             public isCanAttack: boolean;

//             /** BattleMonsterPB AttackTimer. */
//             public AttackTimer: number;

//             /** BattleMonsterPB HitTimer. */
//             public HitTimer: number;

//             /**
//              * Creates a new BattleMonsterPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleMonsterPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleMonsterPB): luck.protobuf.BattleMonsterPB;

//             /**
//              * Encodes the specified BattleMonsterPB message. Does not implicitly {@link luck.protobuf.BattleMonsterPB.verify|verify} messages.
//              * @param message BattleMonsterPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleMonsterPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleMonsterPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleMonsterPB.verify|verify} messages.
//              * @param message BattleMonsterPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleMonsterPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleMonsterPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleMonsterPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleMonsterPB;

//             /**
//              * Decodes a BattleMonsterPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleMonsterPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleMonsterPB;

//             /**
//              * Verifies a BattleMonsterPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleMonsterDataPB. */
//         interface IBattleMonsterDataPB {

//             /** BattleMonsterDataPB ID */
//             ID: number;

//             /** BattleMonsterDataPB serveID */
//             serveID: number;

//             /** BattleMonsterDataPB Name */
//             Name: string;

//             /** BattleMonsterDataPB Lelel */
//             Lelel: number;

//             /** BattleMonsterDataPB CampID */
//             CampID: number;

//             /** BattleMonsterDataPB PrefabName */
//             PrefabName: string;

//             /** BattleMonsterDataPB MonsterType */
//             MonsterType: number;

//             /** BattleMonsterDataPB WarnRange */
//             WarnRange: number;

//             /** BattleMonsterDataPB Pursuit */
//             Pursuit: number;

//             /** BattleMonsterDataPB CurrHp */
//             CurrHp: (number|Long);

//             /** BattleMonsterDataPB MaxHp */
//             MaxHp: (number|Long);

//             /** BattleMonsterDataPB ModeOfPursuit */
//             ModeOfPursuit: number;

//             /** BattleMonsterDataPB Time */
//             Time: number;

//             /** BattleMonsterDataPB Probability */
//             Probability: number;

//             /** BattleMonsterDataPB NoPropertyResistance */
//             NoPropertyResistance: number;

//             /** BattleMonsterDataPB IcePropertyResistance */
//             IcePropertyResistance: number;

//             /** BattleMonsterDataPB FirePropertyResistance */
//             FirePropertyResistance: number;

//             /** BattleMonsterDataPB ElectricPropertyResistance */
//             ElectricPropertyResistance: number;

//             /** BattleMonsterDataPB LandPropertyResistance */
//             LandPropertyResistance: number;

//             /** BattleMonsterDataPB PoisonPropertyResistance */
//             PoisonPropertyResistance: number;

//             /** BattleMonsterDataPB LightPropertyResistance */
//             LightPropertyResistance: number;

//             /** BattleMonsterDataPB DarkPropertyResistance */
//             DarkPropertyResistance: number;

//             /** BattleMonsterDataPB NoPropertyReduction */
//             NoPropertyReduction: number;

//             /** BattleMonsterDataPB IcePropertyReduction */
//             IcePropertyReduction: number;

//             /** BattleMonsterDataPB FirePropertyReduction */
//             FirePropertyReduction: number;

//             /** BattleMonsterDataPB ElectricPropertyReduction */
//             ElectricPropertyReduction: number;

//             /** BattleMonsterDataPB LandPropertyReduction */
//             LandPropertyReduction: number;

//             /** BattleMonsterDataPB PoisonPropertyReduction */
//             PoisonPropertyReduction: number;

//             /** BattleMonsterDataPB LightPropertyReduction */
//             LightPropertyReduction: number;

//             /** BattleMonsterDataPB DarkPropertyReduction */
//             DarkPropertyReduction: number;

//             /** BattleMonsterDataPB AttackType */
//             AttackType: number;

//             /** BattleMonsterDataPB AttackLenth */
//             AttackLenth: number;

//             /** BattleMonsterDataPB MoveSpeed */
//             MoveSpeed: number;

//             /** BattleMonsterDataPB Hit */
//             Hit: number;

//             /** BattleMonsterDataPB Dodge */
//             Dodge: number;

//             /** BattleMonsterDataPB Cri */
//             Cri: number;

//             /** BattleMonsterDataPB CriStrength */
//             CriStrength: number;

//             /** BattleMonsterDataPB skillList */
//             skillList?: (number[]|null);

//             /** BattleMonsterDataPB NoPropertyHurt */
//             NoPropertyHurt: number;

//             /** BattleMonsterDataPB IcePropertyHurt */
//             IcePropertyHurt: number;

//             /** BattleMonsterDataPB FirePropertyHurt */
//             FirePropertyHurt: number;

//             /** BattleMonsterDataPB ElectricPropertyHurt */
//             ElectricPropertyHurt: number;

//             /** BattleMonsterDataPB LandPropertyHurt */
//             LandPropertyHurt: number;

//             /** BattleMonsterDataPB PoisonPropertyHurt */
//             PoisonPropertyHurt: number;

//             /** BattleMonsterDataPB LightPropertyHurt */
//             LightPropertyHurt: number;

//             /** BattleMonsterDataPB DarkPropertyHurt */
//             DarkPropertyHurt: number;

//             /** BattleMonsterDataPB NoPropertyPower */
//             NoPropertyPower: number;

//             /** BattleMonsterDataPB IcePropertyPower */
//             IcePropertyPower: number;

//             /** BattleMonsterDataPB FirePropertyPower */
//             FirePropertyPower: number;

//             /** BattleMonsterDataPB ElectricPropertyPower */
//             ElectricPropertyPower: number;

//             /** BattleMonsterDataPB LandPropertyPower */
//             LandPropertyPower: number;

//             /** BattleMonsterDataPB PoisonPropertyPower */
//             PoisonPropertyPower: number;

//             /** BattleMonsterDataPB LightPropertyPower */
//             LightPropertyPower: number;

//             /** BattleMonsterDataPB DarkPropertyPower */
//             DarkPropertyPower: number;

//             /** BattleMonsterDataPB AttackSpeed */
//             AttackSpeed: number;

//             /** BattleMonsterDataPB GeneratingEffect */
//             GeneratingEffect: string;

//             /** BattleMonsterDataPB bulletDataPb */
//             bulletDataPb: luck.protobuf.IBattleBulletDataPB;
//         }

//         /** Represents a BattleMonsterDataPB. */
//         class BattleMonsterDataPB implements IBattleMonsterDataPB {

//             /**
//              * Constructs a new BattleMonsterDataPB.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleMonsterDataPB);

//             /** BattleMonsterDataPB ID. */
//             public ID: number;

//             /** BattleMonsterDataPB serveID. */
//             public serveID: number;

//             /** BattleMonsterDataPB Name. */
//             public Name: string;

//             /** BattleMonsterDataPB Lelel. */
//             public Lelel: number;

//             /** BattleMonsterDataPB CampID. */
//             public CampID: number;

//             /** BattleMonsterDataPB PrefabName. */
//             public PrefabName: string;

//             /** BattleMonsterDataPB MonsterType. */
//             public MonsterType: number;

//             /** BattleMonsterDataPB WarnRange. */
//             public WarnRange: number;

//             /** BattleMonsterDataPB Pursuit. */
//             public Pursuit: number;

//             /** BattleMonsterDataPB CurrHp. */
//             public CurrHp: (number|Long);

//             /** BattleMonsterDataPB MaxHp. */
//             public MaxHp: (number|Long);

//             /** BattleMonsterDataPB ModeOfPursuit. */
//             public ModeOfPursuit: number;

//             /** BattleMonsterDataPB Time. */
//             public Time: number;

//             /** BattleMonsterDataPB Probability. */
//             public Probability: number;

//             /** BattleMonsterDataPB NoPropertyResistance. */
//             public NoPropertyResistance: number;

//             /** BattleMonsterDataPB IcePropertyResistance. */
//             public IcePropertyResistance: number;

//             /** BattleMonsterDataPB FirePropertyResistance. */
//             public FirePropertyResistance: number;

//             /** BattleMonsterDataPB ElectricPropertyResistance. */
//             public ElectricPropertyResistance: number;

//             /** BattleMonsterDataPB LandPropertyResistance. */
//             public LandPropertyResistance: number;

//             /** BattleMonsterDataPB PoisonPropertyResistance. */
//             public PoisonPropertyResistance: number;

//             /** BattleMonsterDataPB LightPropertyResistance. */
//             public LightPropertyResistance: number;

//             /** BattleMonsterDataPB DarkPropertyResistance. */
//             public DarkPropertyResistance: number;

//             /** BattleMonsterDataPB NoPropertyReduction. */
//             public NoPropertyReduction: number;

//             /** BattleMonsterDataPB IcePropertyReduction. */
//             public IcePropertyReduction: number;

//             /** BattleMonsterDataPB FirePropertyReduction. */
//             public FirePropertyReduction: number;

//             /** BattleMonsterDataPB ElectricPropertyReduction. */
//             public ElectricPropertyReduction: number;

//             /** BattleMonsterDataPB LandPropertyReduction. */
//             public LandPropertyReduction: number;

//             /** BattleMonsterDataPB PoisonPropertyReduction. */
//             public PoisonPropertyReduction: number;

//             /** BattleMonsterDataPB LightPropertyReduction. */
//             public LightPropertyReduction: number;

//             /** BattleMonsterDataPB DarkPropertyReduction. */
//             public DarkPropertyReduction: number;

//             /** BattleMonsterDataPB AttackType. */
//             public AttackType: number;

//             /** BattleMonsterDataPB AttackLenth. */
//             public AttackLenth: number;

//             /** BattleMonsterDataPB MoveSpeed. */
//             public MoveSpeed: number;

//             /** BattleMonsterDataPB Hit. */
//             public Hit: number;

//             /** BattleMonsterDataPB Dodge. */
//             public Dodge: number;

//             /** BattleMonsterDataPB Cri. */
//             public Cri: number;

//             /** BattleMonsterDataPB CriStrength. */
//             public CriStrength: number;

//             /** BattleMonsterDataPB skillList. */
//             public skillList: number[];

//             /** BattleMonsterDataPB NoPropertyHurt. */
//             public NoPropertyHurt: number;

//             /** BattleMonsterDataPB IcePropertyHurt. */
//             public IcePropertyHurt: number;

//             /** BattleMonsterDataPB FirePropertyHurt. */
//             public FirePropertyHurt: number;

//             /** BattleMonsterDataPB ElectricPropertyHurt. */
//             public ElectricPropertyHurt: number;

//             /** BattleMonsterDataPB LandPropertyHurt. */
//             public LandPropertyHurt: number;

//             /** BattleMonsterDataPB PoisonPropertyHurt. */
//             public PoisonPropertyHurt: number;

//             /** BattleMonsterDataPB LightPropertyHurt. */
//             public LightPropertyHurt: number;

//             /** BattleMonsterDataPB DarkPropertyHurt. */
//             public DarkPropertyHurt: number;

//             /** BattleMonsterDataPB NoPropertyPower. */
//             public NoPropertyPower: number;

//             /** BattleMonsterDataPB IcePropertyPower. */
//             public IcePropertyPower: number;

//             /** BattleMonsterDataPB FirePropertyPower. */
//             public FirePropertyPower: number;

//             /** BattleMonsterDataPB ElectricPropertyPower. */
//             public ElectricPropertyPower: number;

//             /** BattleMonsterDataPB LandPropertyPower. */
//             public LandPropertyPower: number;

//             /** BattleMonsterDataPB PoisonPropertyPower. */
//             public PoisonPropertyPower: number;

//             /** BattleMonsterDataPB LightPropertyPower. */
//             public LightPropertyPower: number;

//             /** BattleMonsterDataPB DarkPropertyPower. */
//             public DarkPropertyPower: number;

//             /** BattleMonsterDataPB AttackSpeed. */
//             public AttackSpeed: number;

//             /** BattleMonsterDataPB GeneratingEffect. */
//             public GeneratingEffect: string;

//             /** BattleMonsterDataPB bulletDataPb. */
//             public bulletDataPb: luck.protobuf.IBattleBulletDataPB;

//             /**
//              * Creates a new BattleMonsterDataPB instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleMonsterDataPB instance
//              */
//             public static create(properties?: luck.protobuf.IBattleMonsterDataPB): luck.protobuf.BattleMonsterDataPB;

//             /**
//              * Encodes the specified BattleMonsterDataPB message. Does not implicitly {@link luck.protobuf.BattleMonsterDataPB.verify|verify} messages.
//              * @param message BattleMonsterDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleMonsterDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleMonsterDataPB message, length delimited. Does not implicitly {@link luck.protobuf.BattleMonsterDataPB.verify|verify} messages.
//              * @param message BattleMonsterDataPB message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleMonsterDataPB, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleMonsterDataPB message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleMonsterDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleMonsterDataPB;

//             /**
//              * Decodes a BattleMonsterDataPB message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleMonsterDataPB
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleMonsterDataPB;

//             /**
//              * Verifies a BattleMonsterDataPB message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** EnumType enum. */
//         enum EnumType {
//             LOGINREQ = 1,
//             LOGINRESP = 2,
//             CREATEPLAYERREQ = 3,
//             CREATEPLAYERRESP = 4,
//             HEARTBEATREQ = 1001,
//             HEARTBEATRESP = 1002,
//             PINGREQ = 1003,
//             PINGRESP = 1004,
//             CHANGE_EQUIP_REQ = 1010,
//             CHANGE_EQUIP_RESP = 1011,
//             CHECKNODE_START_REQ = 1015,
//             CHECKNODE_START_RESP = 1016,
//             CHECKNODE_FINISH_REQ = 1017,
//             CHECKNODE_FINISH_RESP = 1018,
//             CREATEROOMREQ = 3001,
//             CREATEROOMRESP = 3002,
//             ENTERROOMREQ = 3003,
//             ENTERROOMRESP = 3004,
//             STARTBATTLEREQ = 3005,
//             STARTBATTLERESP = 3006,
//             EXITROOMREQ = 3007,
//             EXITROOMRESP = 3008,
//             GETROOMLISTREQ = 3009,
//             GETROOMLISTRESP = 3010,
//             BATTLE_OPERATION_REQ = 3011,
//             BATTLE_OPERATION_RESP = 3012,
//             BATTLE_DROP_REQ = 3015,
//             BATTLE_DROP_RESP = 3016,
//             BATTLE_GINGLE_DROP_REQ = 3017,
//             BATTLE_GINGLE_DROP_RESP = 3018,
//             BATTLE_PICKUP_REQ = 3019,
//             BATTLE_PICKUP_RESP = 3020,
//             BATTLE_GINGLE_PICKUP_REQ = 3021,
//             BATTLE_GINGLE_PICKUP_RESP = 3022,
//             LOTTERY_REQ = 3023,
//             LOTTERY_RESP = 3024,
//             SYNTHESIS_REQ = 3025,
//             SYNTHESIS_RESP = 3026,
//             RECAST_REQ = 3027,
//             RECAST_RESP = 3028,
//             RECAST_AFFIRM_REQ = 3029,
//             RECAST_AFFIRM_RESP = 3030,
//             SETTING_REQ = 3031,
//             SETTING_RESP = 3032,
//             GET_EMAIL_LIST_REQ = 3035,
//             GET_EMAIL_LIST_RESP = 3036,
//             EMAILDRAW_REQ = 3037,
//             EMAILDRAW_RESP = 3038,
//             EMAILDEL_REQ = 3039,
//             EMAILDEL_RESP = 3040,
//             EQUIP_UPGRADE_REQ = 3041,
//             EQUIP_UPGRADE_RESP = 3042,
//             EQUIP_BAPTIZE_REQ = 3043,
//             EQUIP_BAPTIZE_RESP = 3044,
//             EQUIP_INLAY_REQ = 3045,
//             EQUIP_INLAY_RESP = 3046,
//             EQUIP_INLAY_DISMANTLE_REQ = 3047,
//             EQUIP_INLAY_DISMANTLE_RESP = 3048,
//             EQUIP_ADVANCE_REQ = 3049,
//             EQUIP_ADVANCE_RESP = 3050,
//             ROLE_UNLOCK_REQ = 3051,
//             ROLE_UNLOCK_RESP = 3052,
//             ROLE_CHANGE_REQ = 3053,
//             ROLE_CHANGE_RESP = 3054,
//             STAMINA_BUY_REQ = 3055,
//             STAMINA_BUY_RESP = 3056,
//             FRIEND_RECOMMEND_REQ = 3057,
//             FRIEND_RECOMMEND_RESP = 3058,
//             FRIEND_SEARCH_REQ = 3059,
//             FRIEND_SEARCH_RESP = 3060,
//             SHOP_BUY_REQ = 3061,
//             SHOP_BUY_RESP = 3062,
//             DRAWALLEMAIL_REQ = 3063,
//             DRAWALLEMAIL_RESP = 3064,
//             FRIEND_APPLY_REQ = 3065,
//             FRIEND_APPLY_RESP = 3066,
//             FRIEND_APPROVE_APPLY_REQ = 3067,
//             FRIEND_APPROVE_APPLY_RESP = 3068,
//             FRIEND_DELETE_REQ = 3069,
//             FRIEND_DELETE_RESP = 3070,
//             GET_FRIEND_LIST_REQ = 3071,
//             GET_FRIEND_LIST_RESP = 3072,
//             SEND_CHAT_REQ = 3073,
//             SEND_CHAT_RESP = 3074,
//             GET_SHOP_LIST_REQ = 3075,
//             GET_SHOP_LIST_RESP = 3076,
//             EXPANSION_BAG_REQ = 3077,
//             EXPANSION_BAG_RESP = 3078,
//             SELL_GOODS_REQ = 3079,
//             SELL_GOODS_RESP = 3080,
//             ACTIVITY_TOLLGATE_REQ = 3081,
//             ACTIVITY_TOLLGATE_RESP = 3082,
//             COMPLETE_ACTIVITY_TOLLGATE_REQ = 3087,
//             COMPLETE_ACTIVITY_TOLLGATE_RESP = 3088,
//             PULL_GANGINFO_REQ = 3089,
//             PULL_GANGINFO_RESP = 3090,
//             PULL_ALL_GANGINFO_REQ = 3091,
//             PULL_ALL_GANGINFO_RESP = 3092,
//             CREATE_GANG_REQ = 3093,
//             CREATE_GANG_RESP = 3094,
//             APPLY_JOIN_GANG_REQ = 3095,
//             APPLY_JOIN_GANG_RESP = 3096,
//             APPROVE_JOIN_GANG_REQ = 3097,
//             APPROVE_JOIN_GANG_RESP = 3098,
//             KICK_OUT_GANG_REQ = 3099,
//             KICK_OUT_GANG_RESP = 3100,
//             QUIT_GANG_REQ = 3101,
//             QUIT_GANG_RESP = 3102,
//             CHANGE_GANG_JOB_REQ = 3103,
//             CHANGE_GANG_JOB_RESP = 3104,
//             DRAW_LOVEBENTO_REQ = 3105,
//             DRAW_LOVEBENTO_RESP = 3106,
//             PROP_CONSUME_REQ = 3107,
//             PROP_CONSUME_RESP = 3108,
//             SEARCH_GANG_REQ = 3109,
//             SEARCH_GANG_RESP = 3110,
//             BATTLE_GINGLE_RESURGENCE_REQ = 3111,
//             BATTLE_GINGLE_RESURGENCE_RESP = 3112,
//             RECONNECTION_REQ = 3113,
//             RECONNECTION_RESP = 3114,
//             JIGUANG_REGISTER_REQ = 3115,
//             JIGUANG_REGISTER_RESP = 3116,
//             DRAW_TASK_REQ = 3117,
//             DRAW_TASK_RESP = 3118,
//             DRAW_DAILY_VITALITY_REWARD_REQ = 3119,
//             DRAW_DAILY_VITALITY_REWARD_RESP = 3120,
//             CREATE_PVE_TEAM_REQ = 3121,
//             CREATE_PVE_TEAM_RESP = 3122,
//             PVE_INVITE_REQ = 3123,
//             PVE_INVITE_RESP = 3124,
//             PVE_APPLY_JOIN_TEAM_REQ = 3125,
//             PVE_APPLY_JOIN_TEAM_RESP = 3126,
//             PVE_APPROVE_JOIN_TEAM_REQ = 3127,
//             PVE_APPROVE_JOIN_TEAM_RESP = 3128,
//             PVE_PREPARE_REQ = 3129,
//             PVE_PREPARE_RESP = 3130,
//             PVE_SELECT_CUSTOMS_REQ = 3131,
//             PVE_SELECT_CUSTOMS_RESP = 3132,
//             LOAD_GANG_SHOP_REQ = 3133,
//             LOAD_GANG_SHOP_RESP = 3134,
//             GANG_SHOP_BUY_REQ = 3135,
//             GANG_SHOP_BUY_RESP = 3136,
//             PVE_QUIT_TEAM_REQ = 3137,
//             PVE_QUIT_TEAM_RESP = 3138,
//             GET_PLAYER_INFO_REQ = 3139,
//             GET_PLAYER_INFO_RESP = 3140,
//             PVE_BATTLE_START_REQ = 3141,
//             PVE_BATTLE_START_RESP = 3142,
//             GET_PLAYER_FIGHTING_REQ = 3143,
//             GET_PLAYER_FIGHTING_RESP = 3144,
//             GET_PLAYER_EQUIP_FIGHTING_REQ = 3145,
//             GET_PLAYER_EQUIP_FIGHTING_RESP = 3146,
//             GET_RANKING_REQ = 3147,
//             GET_RANKING_RESP = 3148,
//             GAIN_ACHIEVEMENT_SERIES_AWARD_REQ = 3149,
//             GAIN_ACHIEVEMENT_SERIES_AWARD_RESP = 3150,
//             DRAW_VIP_REWARD_REQ = 3153,
//             DRAW_VIP_REWARD_RESP = 3154,
//             RECHARGE_REQ = 3155,
//             RECHARGE_RESP = 3156,
//             NOTICE_REQ = 3157,
//             NOTICE_RESP = 3158,
//             EQUIP_BAPTIZE_AFFIRM_REQ = 3159,
//             EQUIP_BAPTIZE_AFFIRM_RESP = 3160,
//             ADD_BKACK_LIST_REQ = 3161,
//             ADD_BKACK_LIST_RESP = 3162,
//             DEL_BKACK_LIST_REQ = 3163,
//             DEL_BKACK_LIST_RESP = 3164,
//             BUY_GROWTH_CAPITAL_REQ = 3165,
//             BUY_GROWTH_CAPITAL_RESP = 3166,
//             GET_DIGGING_LIST_REQ = 3167,
//             GET_DIGGING_LIST_RESP = 3168,
//             REFRESH_DIGGING_REQ = 3169,
//             REFRESH_DIGGING_RESP = 3170,
//             GET_DIGGING_AWARD_REQ = 3171,
//             GET_DIGGING_AWARD_RESP = 3172,
//             LOAD_ACTIVITY_SHOP_REQ = 3173,
//             LOAD_ACTIVITY_SHOP_RESP = 3174,
//             ACTIVITY_SHOP_BUY_REQ = 3175,
//             ACTIVITY_SHOP_BUY_RESP = 3176,
//             START_DIGGING_POINT_REQ = 3177,
//             START_DIGGING_POINT_RESP = 3178,
//             FINISH_DIGGING_POINT_REQ = 3179,
//             FINISH_DIGGING_POINT_RESP = 3180,
//             DRAW_ACTIVITY_TASK_REWARD_REQ = 3181,
//             DRAW_ACTIVITY_TASK_REWARD_RESP = 3182,
//             ACTIVITY_LOTTERY_REQ = 3183,
//             ACTIVITY_LOTTERY_RESP = 3184,
//             CHANGE_NAME_REQ = 3185,
//             CHANGE_NAME_RESP = 3186,
//             SAVE_NOVICE_GUIDE_NUM_REQ = 3187,
//             SAVE_NOVICE_GUIDE_NUM_RESP = 3188,
//             DRAW_MONTH_CARD_REQ = 3189,
//             DRAW_MONTH_CARD_RESP = 3190,
//             ROLE_CHAT_REQ = 3191,
//             ROLE_CHAT_RESP = 3192,
//             ROLE_INTERACTION_REQ = 3193,
//             ROLE_INTERACTION_RESP = 3194,
//             STROKE_ROLE_REQ = 3195,
//             STROKE_ROLE_RESP = 3196,
//             CHANGE_ROLE_IMAGE_REQ = 3197,
//             CHANGE_ROLE_IMAGE_RESP = 3198,
//             CHANGE_HEAD_PORTRAIT_REQ = 3199,
//             CHANGE_HEAD_PORTRAIT_RESP = 3200,
//             CHANGE_RAHMEN_REQ = 3201,
//             CHANGE_RAHMEN_RESP = 3202,
//             GIVE_ROLE_GIFT_REQ = 3203,
//             GIVE_ROLE_GIFT_RESP = 3204,
//             GANG_SGININ_REQ = 3205,
//             GANG_SGININ_RESP = 3206,
//             DRAW_GANG_VITALITY_REWARD_REQ = 3207,
//             DRAW_GANG_VITALITY_REWARD_RESP = 3208,
//             SAVE_PERSON_MESSAGE_REQ = 3209,
//             SAVE_PERSON_MESSAGE_RESP = 3210,
//             BATTLE_SENDGAMEDATA_REQ = 3211,
//             BATTLE_SENDGAMEDATA_RESP = 3212,
//             BATTLE_SAVEGAMEDATA_RESP = 3213,
//             GM_BUILD_WEAPON_REQ = 5001,
//             GM_BUILD_WEAPON_RESP = 5002,
//             GM_BUILD_CARD_REQ = 5003,
//             GM_BUILD_CARD_RESP = 5004,
//             GM_BUILD_CLOTHES_REQ = 5005,
//             GM_BUILD_CLOTHES_RESP = 5006,
//             SGININ_REQ = 5007,
//             SGININ_RESP = 5008,
//             GM_ADD_GOODS_REQ = 5009,
//             GM_ADD_GOODS_RESP = 5010,
//             PUSH_GOODS_UPDATE_RESP = 20001,
//             PUSH_FRIEND_APPLY_RESP = 20021,
//             PUSH_ADD_FRIEND_RESP = 20022,
//             PUSH_DEL_FRIEND_RESP = 20023,
//             PUSH_EMAIL_RESP = 20011,
//             PUSH_CHAT_RESP = 20031,
//             PUSH_ILLUSTRATION_RESP = 20041,
//             PUSH_TASK_RESP = 20051,
//             PUSH_PVE_INVITE_RESP = 20061,
//             PUSH_PVE_APPROVE_JOIN_TEAM_RESP = 20071,
//             PUSH_PVE_TEAM_UPDATE_RESP = 20081,
//             PUSH_WORLD_NOTICE_RESP = 20091,
//             PUSH_REPETITION_LOGIN = 20101,
//             PUSH_GANG_UPDATE_LOGIN = 20111
//         }

//         /** ReturnCodeType enum. */
//         enum ReturnCodeType {
//             FAILED = 0,
//             SUCCESS = 1,
//             NAME_REPETITION = 2,
//             ITEM_LACK = 3,
//             ROLE_ISHAVE = 4,
//             BODY_NOT_ENOUGH_ISHAVE = 5,
//             NOT_UNLOCK = 6,
//             TARGET_NOT_ONLINE = 7,
//             GANG_NAME_REPEAT = 8,
//             GANG_APPLY_REPEAT = 9,
//             DIAMOND_NOT_ENOUGH = 10,
//             KEY_LOSE_EFFICACY = 11,
//             PACKGRID_INSUFFICIENT = 12,
//             EMAIL_HAVEDRAW = 13,
//             PVE_HAVE_TEAM = 14,
//             PVE_TEAM_NOT_EXIST = 15,
//             PVE_TEAM_MEMBER_EXIST = 16,
//             PVE_TEAM_FULL = 17,
//             LOTTERY_TICKET_NOT_ENOUGH = 18,
//             BEYOND_BUY_TIMES_DAY = 19,
//             BEYOND_BUY_TIMES_WEEK = 20,
//             BEYOND_BUY_TIMES_MONTH = 21,
//             BEYOND_BUY_TIMES_YEAR = 22,
//             REVIVE_TIMES = 23,
//             BURDEN_LIMIT = 24,
//             ADVANCE_MATERIALS_NOT_ENOUGH = 25,
//             SEND_FAILED_CHAT_REQBLACK_LIST = 26,
//             BLACK_LIST_ADD_FAILED = 27,
//             EXIST_FRIEND = 28,
//             NOT_IN_ACTIVITY_TIME = 29,
//             NOT_MINE = 30,
//             PROP_NOT_ENOUGH = 31,
//             GOLD_NOT_ENOUGH = 32,
//             MATERIALS_NOT_ENOUGH = 33
//         }

//         /** ChatType enum. */
//         enum ChatType {
//             privateChat = 1,
//             worldChat = 2,
//             gangChat = 3,
//             teamChat = 4
//         }

//         /** Properties of a LogInReq. */
//         interface ILogInReq {

//             /** LogInReq LogInKey */
//             LogInKey: string;
//         }

//         /** Represents a LogInReq. */
//         class LogInReq implements ILogInReq {

//             /**
//              * Constructs a new LogInReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILogInReq);

//             /** LogInReq LogInKey. */
//             public LogInKey: string;

//             /**
//              * Creates a new LogInReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LogInReq instance
//              */
//             public static create(properties?: luck.protobuf.ILogInReq): luck.protobuf.LogInReq;

//             /**
//              * Encodes the specified LogInReq message. Does not implicitly {@link luck.protobuf.LogInReq.verify|verify} messages.
//              * @param message LogInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILogInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LogInReq message, length delimited. Does not implicitly {@link luck.protobuf.LogInReq.verify|verify} messages.
//              * @param message LogInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILogInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LogInReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LogInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LogInReq;

//             /**
//              * Decodes a LogInReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LogInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LogInReq;

//             /**
//              * Verifies a LogInReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a HeartBeatReq. */
//         interface IHeartBeatReq {
//         }

//         /** Represents a HeartBeatReq. */
//         class HeartBeatReq implements IHeartBeatReq {

//             /**
//              * Constructs a new HeartBeatReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IHeartBeatReq);

//             /**
//              * Creates a new HeartBeatReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns HeartBeatReq instance
//              */
//             public static create(properties?: luck.protobuf.IHeartBeatReq): luck.protobuf.HeartBeatReq;

//             /**
//              * Encodes the specified HeartBeatReq message. Does not implicitly {@link luck.protobuf.HeartBeatReq.verify|verify} messages.
//              * @param message HeartBeatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IHeartBeatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified HeartBeatReq message, length delimited. Does not implicitly {@link luck.protobuf.HeartBeatReq.verify|verify} messages.
//              * @param message HeartBeatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IHeartBeatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a HeartBeatReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns HeartBeatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.HeartBeatReq;

//             /**
//              * Decodes a HeartBeatReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns HeartBeatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.HeartBeatReq;

//             /**
//              * Verifies a HeartBeatReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PingReq. */
//         interface IPingReq {
//         }

//         /** Represents a PingReq. */
//         class PingReq implements IPingReq {

//             /**
//              * Constructs a new PingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPingReq);

//             /**
//              * Creates a new PingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PingReq instance
//              */
//             public static create(properties?: luck.protobuf.IPingReq): luck.protobuf.PingReq;

//             /**
//              * Encodes the specified PingReq message. Does not implicitly {@link luck.protobuf.PingReq.verify|verify} messages.
//              * @param message PingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PingReq message, length delimited. Does not implicitly {@link luck.protobuf.PingReq.verify|verify} messages.
//              * @param message PingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PingReq;

//             /**
//              * Decodes a PingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PingReq;

//             /**
//              * Verifies a PingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BuyItemReq. */
//         interface IBuyItemReq {

//             /** BuyItemReq itemId */
//             itemId: number;

//             /** BuyItemReq itemNum */
//             itemNum: number;
//         }

//         /** Represents a BuyItemReq. */
//         class BuyItemReq implements IBuyItemReq {

//             /**
//              * Constructs a new BuyItemReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBuyItemReq);

//             /** BuyItemReq itemId. */
//             public itemId: number;

//             /** BuyItemReq itemNum. */
//             public itemNum: number;

//             /**
//              * Creates a new BuyItemReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BuyItemReq instance
//              */
//             public static create(properties?: luck.protobuf.IBuyItemReq): luck.protobuf.BuyItemReq;

//             /**
//              * Encodes the specified BuyItemReq message. Does not implicitly {@link luck.protobuf.BuyItemReq.verify|verify} messages.
//              * @param message BuyItemReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBuyItemReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BuyItemReq message, length delimited. Does not implicitly {@link luck.protobuf.BuyItemReq.verify|verify} messages.
//              * @param message BuyItemReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBuyItemReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BuyItemReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BuyItemReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BuyItemReq;

//             /**
//              * Decodes a BuyItemReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BuyItemReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BuyItemReq;

//             /**
//              * Verifies a BuyItemReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreatePlayerReq. */
//         interface ICreatePlayerReq {

//             /** CreatePlayerReq LogInKey */
//             LogInKey: string;

//             /** CreatePlayerReq name */
//             name: string;
//         }

//         /** Represents a CreatePlayerReq. */
//         class CreatePlayerReq implements ICreatePlayerReq {

//             /**
//              * Constructs a new CreatePlayerReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreatePlayerReq);

//             /** CreatePlayerReq LogInKey. */
//             public LogInKey: string;

//             /** CreatePlayerReq name. */
//             public name: string;

//             /**
//              * Creates a new CreatePlayerReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreatePlayerReq instance
//              */
//             public static create(properties?: luck.protobuf.ICreatePlayerReq): luck.protobuf.CreatePlayerReq;

//             /**
//              * Encodes the specified CreatePlayerReq message. Does not implicitly {@link luck.protobuf.CreatePlayerReq.verify|verify} messages.
//              * @param message CreatePlayerReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreatePlayerReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreatePlayerReq message, length delimited. Does not implicitly {@link luck.protobuf.CreatePlayerReq.verify|verify} messages.
//              * @param message CreatePlayerReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreatePlayerReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreatePlayerReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreatePlayerReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreatePlayerReq;

//             /**
//              * Decodes a CreatePlayerReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreatePlayerReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreatePlayerReq;

//             /**
//              * Verifies a CreatePlayerReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildWeaponReq. */
//         interface IGmBuildWeaponReq {

//             /** GmBuildWeaponReq weaponId */
//             weaponId: number;

//             /** GmBuildWeaponReq weaponNum */
//             weaponNum: number;
//         }

//         /** Represents a GmBuildWeaponReq. */
//         class GmBuildWeaponReq implements IGmBuildWeaponReq {

//             /**
//              * Constructs a new GmBuildWeaponReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildWeaponReq);

//             /** GmBuildWeaponReq weaponId. */
//             public weaponId: number;

//             /** GmBuildWeaponReq weaponNum. */
//             public weaponNum: number;

//             /**
//              * Creates a new GmBuildWeaponReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildWeaponReq instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildWeaponReq): luck.protobuf.GmBuildWeaponReq;

//             /**
//              * Encodes the specified GmBuildWeaponReq message. Does not implicitly {@link luck.protobuf.GmBuildWeaponReq.verify|verify} messages.
//              * @param message GmBuildWeaponReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildWeaponReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildWeaponReq message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildWeaponReq.verify|verify} messages.
//              * @param message GmBuildWeaponReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildWeaponReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildWeaponReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildWeaponReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildWeaponReq;

//             /**
//              * Decodes a GmBuildWeaponReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildWeaponReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildWeaponReq;

//             /**
//              * Verifies a GmBuildWeaponReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildCardReq. */
//         interface IGmBuildCardReq {

//             /** GmBuildCardReq cardId */
//             cardId: number;

//             /** GmBuildCardReq cardNum */
//             cardNum: number;
//         }

//         /** Represents a GmBuildCardReq. */
//         class GmBuildCardReq implements IGmBuildCardReq {

//             /**
//              * Constructs a new GmBuildCardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildCardReq);

//             /** GmBuildCardReq cardId. */
//             public cardId: number;

//             /** GmBuildCardReq cardNum. */
//             public cardNum: number;

//             /**
//              * Creates a new GmBuildCardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildCardReq instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildCardReq): luck.protobuf.GmBuildCardReq;

//             /**
//              * Encodes the specified GmBuildCardReq message. Does not implicitly {@link luck.protobuf.GmBuildCardReq.verify|verify} messages.
//              * @param message GmBuildCardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildCardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildCardReq message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildCardReq.verify|verify} messages.
//              * @param message GmBuildCardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildCardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildCardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildCardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildCardReq;

//             /**
//              * Decodes a GmBuildCardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildCardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildCardReq;

//             /**
//              * Verifies a GmBuildCardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildClothesReq. */
//         interface IGmBuildClothesReq {

//             /** GmBuildClothesReq clothesId */
//             clothesId: number;

//             /** GmBuildClothesReq clothesNum */
//             clothesNum: number;
//         }

//         /** Represents a GmBuildClothesReq. */
//         class GmBuildClothesReq implements IGmBuildClothesReq {

//             /**
//              * Constructs a new GmBuildClothesReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildClothesReq);

//             /** GmBuildClothesReq clothesId. */
//             public clothesId: number;

//             /** GmBuildClothesReq clothesNum. */
//             public clothesNum: number;

//             /**
//              * Creates a new GmBuildClothesReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildClothesReq instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildClothesReq): luck.protobuf.GmBuildClothesReq;

//             /**
//              * Encodes the specified GmBuildClothesReq message. Does not implicitly {@link luck.protobuf.GmBuildClothesReq.verify|verify} messages.
//              * @param message GmBuildClothesReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildClothesReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildClothesReq message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildClothesReq.verify|verify} messages.
//              * @param message GmBuildClothesReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildClothesReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildClothesReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildClothesReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildClothesReq;

//             /**
//              * Decodes a GmBuildClothesReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildClothesReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildClothesReq;

//             /**
//              * Verifies a GmBuildClothesReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmAddGoodsReq. */
//         interface IGmAddGoodsReq {

//             /** GmAddGoodsReq goodsType */
//             goodsType: number;

//             /** GmAddGoodsReq goodsId */
//             goodsId: number;

//             /** GmAddGoodsReq goodsNum */
//             goodsNum: number;
//         }

//         /** Represents a GmAddGoodsReq. */
//         class GmAddGoodsReq implements IGmAddGoodsReq {

//             /**
//              * Constructs a new GmAddGoodsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmAddGoodsReq);

//             /** GmAddGoodsReq goodsType. */
//             public goodsType: number;

//             /** GmAddGoodsReq goodsId. */
//             public goodsId: number;

//             /** GmAddGoodsReq goodsNum. */
//             public goodsNum: number;

//             /**
//              * Creates a new GmAddGoodsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmAddGoodsReq instance
//              */
//             public static create(properties?: luck.protobuf.IGmAddGoodsReq): luck.protobuf.GmAddGoodsReq;

//             /**
//              * Encodes the specified GmAddGoodsReq message. Does not implicitly {@link luck.protobuf.GmAddGoodsReq.verify|verify} messages.
//              * @param message GmAddGoodsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmAddGoodsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmAddGoodsReq message, length delimited. Does not implicitly {@link luck.protobuf.GmAddGoodsReq.verify|verify} messages.
//              * @param message GmAddGoodsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmAddGoodsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmAddGoodsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmAddGoodsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmAddGoodsReq;

//             /**
//              * Decodes a GmAddGoodsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmAddGoodsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmAddGoodsReq;

//             /**
//              * Verifies a GmAddGoodsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ChangeEquipReq. */
//         interface IChangeEquipReq {

//             /** ChangeEquipReq grooveId */
//             grooveId: number;

//             /** ChangeEquipReq equipUid */
//             equipUid: (number|Long);

//             /** ChangeEquipReq changeType */
//             changeType: number;
//         }

//         /** Represents a ChangeEquipReq. */
//         class ChangeEquipReq implements IChangeEquipReq {

//             /**
//              * Constructs a new ChangeEquipReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IChangeEquipReq);

//             /** ChangeEquipReq grooveId. */
//             public grooveId: number;

//             /** ChangeEquipReq equipUid. */
//             public equipUid: (number|Long);

//             /** ChangeEquipReq changeType. */
//             public changeType: number;

//             /**
//              * Creates a new ChangeEquipReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ChangeEquipReq instance
//              */
//             public static create(properties?: luck.protobuf.IChangeEquipReq): luck.protobuf.ChangeEquipReq;

//             /**
//              * Encodes the specified ChangeEquipReq message. Does not implicitly {@link luck.protobuf.ChangeEquipReq.verify|verify} messages.
//              * @param message ChangeEquipReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IChangeEquipReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ChangeEquipReq message, length delimited. Does not implicitly {@link luck.protobuf.ChangeEquipReq.verify|verify} messages.
//              * @param message ChangeEquipReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IChangeEquipReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ChangeEquipReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ChangeEquipReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ChangeEquipReq;

//             /**
//              * Decodes a ChangeEquipReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ChangeEquipReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ChangeEquipReq;

//             /**
//              * Verifies a ChangeEquipReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleReq. */
//         interface IBattleReq {

//             /** BattleReq operation */
//             operation: luck.protobuf.IOperationPB;
//         }

//         /** Represents a BattleReq. */
//         class BattleReq implements IBattleReq {

//             /**
//              * Constructs a new BattleReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleReq);

//             /** BattleReq operation. */
//             public operation: luck.protobuf.IOperationPB;

//             /**
//              * Creates a new BattleReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleReq instance
//              */
//             public static create(properties?: luck.protobuf.IBattleReq): luck.protobuf.BattleReq;

//             /**
//              * Encodes the specified BattleReq message. Does not implicitly {@link luck.protobuf.BattleReq.verify|verify} messages.
//              * @param message BattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleReq message, length delimited. Does not implicitly {@link luck.protobuf.BattleReq.verify|verify} messages.
//              * @param message BattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleReq;

//             /**
//              * Decodes a BattleReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleReq;

//             /**
//              * Verifies a BattleReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreateRoomReq. */
//         interface ICreateRoomReq {

//             /** CreateRoomReq roomName */
//             roomName: string;

//             /** CreateRoomReq playerId */
//             playerId: (number|Long);
//         }

//         /** Represents a CreateRoomReq. */
//         class CreateRoomReq implements ICreateRoomReq {

//             /**
//              * Constructs a new CreateRoomReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreateRoomReq);

//             /** CreateRoomReq roomName. */
//             public roomName: string;

//             /** CreateRoomReq playerId. */
//             public playerId: (number|Long);

//             /**
//              * Creates a new CreateRoomReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreateRoomReq instance
//              */
//             public static create(properties?: luck.protobuf.ICreateRoomReq): luck.protobuf.CreateRoomReq;

//             /**
//              * Encodes the specified CreateRoomReq message. Does not implicitly {@link luck.protobuf.CreateRoomReq.verify|verify} messages.
//              * @param message CreateRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreateRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreateRoomReq message, length delimited. Does not implicitly {@link luck.protobuf.CreateRoomReq.verify|verify} messages.
//              * @param message CreateRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreateRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreateRoomReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreateRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreateRoomReq;

//             /**
//              * Decodes a CreateRoomReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreateRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreateRoomReq;

//             /**
//              * Verifies a CreateRoomReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EnterRoomReq. */
//         interface IEnterRoomReq {

//             /** EnterRoomReq playerId */
//             playerId: (number|Long);

//             /** EnterRoomReq roomId */
//             roomId: (number|Long);
//         }

//         /** Represents an EnterRoomReq. */
//         class EnterRoomReq implements IEnterRoomReq {

//             /**
//              * Constructs a new EnterRoomReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEnterRoomReq);

//             /** EnterRoomReq playerId. */
//             public playerId: (number|Long);

//             /** EnterRoomReq roomId. */
//             public roomId: (number|Long);

//             /**
//              * Creates a new EnterRoomReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EnterRoomReq instance
//              */
//             public static create(properties?: luck.protobuf.IEnterRoomReq): luck.protobuf.EnterRoomReq;

//             /**
//              * Encodes the specified EnterRoomReq message. Does not implicitly {@link luck.protobuf.EnterRoomReq.verify|verify} messages.
//              * @param message EnterRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEnterRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EnterRoomReq message, length delimited. Does not implicitly {@link luck.protobuf.EnterRoomReq.verify|verify} messages.
//              * @param message EnterRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEnterRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EnterRoomReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EnterRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EnterRoomReq;

//             /**
//              * Decodes an EnterRoomReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EnterRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EnterRoomReq;

//             /**
//              * Verifies an EnterRoomReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetRoomListReq. */
//         interface IGetRoomListReq {
//         }

//         /** Represents a GetRoomListReq. */
//         class GetRoomListReq implements IGetRoomListReq {

//             /**
//              * Constructs a new GetRoomListReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetRoomListReq);

//             /**
//              * Creates a new GetRoomListReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetRoomListReq instance
//              */
//             public static create(properties?: luck.protobuf.IGetRoomListReq): luck.protobuf.GetRoomListReq;

//             /**
//              * Encodes the specified GetRoomListReq message. Does not implicitly {@link luck.protobuf.GetRoomListReq.verify|verify} messages.
//              * @param message GetRoomListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetRoomListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetRoomListReq message, length delimited. Does not implicitly {@link luck.protobuf.GetRoomListReq.verify|verify} messages.
//              * @param message GetRoomListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetRoomListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetRoomListReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetRoomListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetRoomListReq;

//             /**
//              * Decodes a GetRoomListReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetRoomListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetRoomListReq;

//             /**
//              * Verifies a GetRoomListReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ExitRoomReq. */
//         interface IExitRoomReq {

//             /** ExitRoomReq playerId */
//             playerId: (number|Long);

//             /** ExitRoomReq roomId */
//             roomId: (number|Long);
//         }

//         /** Represents an ExitRoomReq. */
//         class ExitRoomReq implements IExitRoomReq {

//             /**
//              * Constructs a new ExitRoomReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IExitRoomReq);

//             /** ExitRoomReq playerId. */
//             public playerId: (number|Long);

//             /** ExitRoomReq roomId. */
//             public roomId: (number|Long);

//             /**
//              * Creates a new ExitRoomReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ExitRoomReq instance
//              */
//             public static create(properties?: luck.protobuf.IExitRoomReq): luck.protobuf.ExitRoomReq;

//             /**
//              * Encodes the specified ExitRoomReq message. Does not implicitly {@link luck.protobuf.ExitRoomReq.verify|verify} messages.
//              * @param message ExitRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IExitRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ExitRoomReq message, length delimited. Does not implicitly {@link luck.protobuf.ExitRoomReq.verify|verify} messages.
//              * @param message ExitRoomReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IExitRoomReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ExitRoomReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ExitRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ExitRoomReq;

//             /**
//              * Decodes an ExitRoomReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ExitRoomReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ExitRoomReq;

//             /**
//              * Verifies an ExitRoomReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartBattleReq. */
//         interface IStartBattleReq {

//             /** StartBattleReq playerId */
//             playerId: (number|Long);

//             /** StartBattleReq roomId */
//             roomId: (number|Long);
//         }

//         /** Represents a StartBattleReq. */
//         class StartBattleReq implements IStartBattleReq {

//             /**
//              * Constructs a new StartBattleReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartBattleReq);

//             /** StartBattleReq playerId. */
//             public playerId: (number|Long);

//             /** StartBattleReq roomId. */
//             public roomId: (number|Long);

//             /**
//              * Creates a new StartBattleReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartBattleReq instance
//              */
//             public static create(properties?: luck.protobuf.IStartBattleReq): luck.protobuf.StartBattleReq;

//             /**
//              * Encodes the specified StartBattleReq message. Does not implicitly {@link luck.protobuf.StartBattleReq.verify|verify} messages.
//              * @param message StartBattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartBattleReq message, length delimited. Does not implicitly {@link luck.protobuf.StartBattleReq.verify|verify} messages.
//              * @param message StartBattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartBattleReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartBattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartBattleReq;

//             /**
//              * Decodes a StartBattleReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartBattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartBattleReq;

//             /**
//              * Verifies a StartBattleReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartCheckNodeReq. */
//         interface IStartCheckNodeReq {

//             /** StartCheckNodeReq checkNodeId */
//             checkNodeId: number;
//         }

//         /** Represents a StartCheckNodeReq. */
//         class StartCheckNodeReq implements IStartCheckNodeReq {

//             /**
//              * Constructs a new StartCheckNodeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartCheckNodeReq);

//             /** StartCheckNodeReq checkNodeId. */
//             public checkNodeId: number;

//             /**
//              * Creates a new StartCheckNodeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartCheckNodeReq instance
//              */
//             public static create(properties?: luck.protobuf.IStartCheckNodeReq): luck.protobuf.StartCheckNodeReq;

//             /**
//              * Encodes the specified StartCheckNodeReq message. Does not implicitly {@link luck.protobuf.StartCheckNodeReq.verify|verify} messages.
//              * @param message StartCheckNodeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartCheckNodeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartCheckNodeReq message, length delimited. Does not implicitly {@link luck.protobuf.StartCheckNodeReq.verify|verify} messages.
//              * @param message StartCheckNodeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartCheckNodeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartCheckNodeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartCheckNodeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartCheckNodeReq;

//             /**
//              * Decodes a StartCheckNodeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartCheckNodeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartCheckNodeReq;

//             /**
//              * Verifies a StartCheckNodeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a FinishCheckNodeReq. */
//         interface IFinishCheckNodeReq {

//             /** FinishCheckNodeReq checkNodeId */
//             checkNodeId: number;

//             /** FinishCheckNodeReq fightResult */
//             fightResult: number;
//         }

//         /** Represents a FinishCheckNodeReq. */
//         class FinishCheckNodeReq implements IFinishCheckNodeReq {

//             /**
//              * Constructs a new FinishCheckNodeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IFinishCheckNodeReq);

//             /** FinishCheckNodeReq checkNodeId. */
//             public checkNodeId: number;

//             /** FinishCheckNodeReq fightResult. */
//             public fightResult: number;

//             /**
//              * Creates a new FinishCheckNodeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns FinishCheckNodeReq instance
//              */
//             public static create(properties?: luck.protobuf.IFinishCheckNodeReq): luck.protobuf.FinishCheckNodeReq;

//             /**
//              * Encodes the specified FinishCheckNodeReq message. Does not implicitly {@link luck.protobuf.FinishCheckNodeReq.verify|verify} messages.
//              * @param message FinishCheckNodeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IFinishCheckNodeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified FinishCheckNodeReq message, length delimited. Does not implicitly {@link luck.protobuf.FinishCheckNodeReq.verify|verify} messages.
//              * @param message FinishCheckNodeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IFinishCheckNodeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a FinishCheckNodeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns FinishCheckNodeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.FinishCheckNodeReq;

//             /**
//              * Decodes a FinishCheckNodeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns FinishCheckNodeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.FinishCheckNodeReq;

//             /**
//              * Verifies a FinishCheckNodeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleDropReq. */
//         interface IBattleDropReq {

//             /** BattleDropReq checkNodeId */
//             checkNodeId: number;

//             /** BattleDropReq monsterId */
//             monsterId: number;
//         }

//         /** Represents a BattleDropReq. */
//         class BattleDropReq implements IBattleDropReq {

//             /**
//              * Constructs a new BattleDropReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleDropReq);

//             /** BattleDropReq checkNodeId. */
//             public checkNodeId: number;

//             /** BattleDropReq monsterId. */
//             public monsterId: number;

//             /**
//              * Creates a new BattleDropReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleDropReq instance
//              */
//             public static create(properties?: luck.protobuf.IBattleDropReq): luck.protobuf.BattleDropReq;

//             /**
//              * Encodes the specified BattleDropReq message. Does not implicitly {@link luck.protobuf.BattleDropReq.verify|verify} messages.
//              * @param message BattleDropReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleDropReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleDropReq message, length delimited. Does not implicitly {@link luck.protobuf.BattleDropReq.verify|verify} messages.
//              * @param message BattleDropReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleDropReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleDropReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleDropReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleDropReq;

//             /**
//              * Decodes a BattleDropReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleDropReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleDropReq;

//             /**
//              * Verifies a BattleDropReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SginInReq. */
//         interface ISginInReq {
//         }

//         /** Represents a SginInReq. */
//         class SginInReq implements ISginInReq {

//             /**
//              * Constructs a new SginInReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISginInReq);

//             /**
//              * Creates a new SginInReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SginInReq instance
//              */
//             public static create(properties?: luck.protobuf.ISginInReq): luck.protobuf.SginInReq;

//             /**
//              * Encodes the specified SginInReq message. Does not implicitly {@link luck.protobuf.SginInReq.verify|verify} messages.
//              * @param message SginInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISginInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SginInReq message, length delimited. Does not implicitly {@link luck.protobuf.SginInReq.verify|verify} messages.
//              * @param message SginInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISginInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SginInReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SginInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SginInReq;

//             /**
//              * Decodes a SginInReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SginInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SginInReq;

//             /**
//              * Verifies a SginInReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattlePickUpReq. */
//         interface IBattlePickUpReq {

//             /** BattlePickUpReq gold */
//             gold?: (number|null);

//             /** BattlePickUpReq diamond */
//             diamond?: (number|null);

//             /** BattlePickUpReq type */
//             type?: (number|null);

//             /** BattlePickUpReq id */
//             id?: (number|null);

//             /** BattlePickUpReq uid */
//             uid?: (number|Long|null);
//         }

//         /** Represents a BattlePickUpReq. */
//         class BattlePickUpReq implements IBattlePickUpReq {

//             /**
//              * Constructs a new BattlePickUpReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattlePickUpReq);

//             /** BattlePickUpReq gold. */
//             public gold: number;

//             /** BattlePickUpReq diamond. */
//             public diamond: number;

//             /** BattlePickUpReq type. */
//             public type: number;

//             /** BattlePickUpReq id. */
//             public id: number;

//             /** BattlePickUpReq uid. */
//             public uid: (number|Long);

//             /**
//              * Creates a new BattlePickUpReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattlePickUpReq instance
//              */
//             public static create(properties?: luck.protobuf.IBattlePickUpReq): luck.protobuf.BattlePickUpReq;

//             /**
//              * Encodes the specified BattlePickUpReq message. Does not implicitly {@link luck.protobuf.BattlePickUpReq.verify|verify} messages.
//              * @param message BattlePickUpReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattlePickUpReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattlePickUpReq message, length delimited. Does not implicitly {@link luck.protobuf.BattlePickUpReq.verify|verify} messages.
//              * @param message BattlePickUpReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattlePickUpReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattlePickUpReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattlePickUpReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattlePickUpReq;

//             /**
//              * Decodes a BattlePickUpReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattlePickUpReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattlePickUpReq;

//             /**
//              * Verifies a BattlePickUpReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LotteryReq. */
//         interface ILotteryReq {

//             /** LotteryReq lotteryType */
//             lotteryType: number;
//         }

//         /** Represents a LotteryReq. */
//         class LotteryReq implements ILotteryReq {

//             /**
//              * Constructs a new LotteryReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILotteryReq);

//             /** LotteryReq lotteryType. */
//             public lotteryType: number;

//             /**
//              * Creates a new LotteryReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LotteryReq instance
//              */
//             public static create(properties?: luck.protobuf.ILotteryReq): luck.protobuf.LotteryReq;

//             /**
//              * Encodes the specified LotteryReq message. Does not implicitly {@link luck.protobuf.LotteryReq.verify|verify} messages.
//              * @param message LotteryReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILotteryReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LotteryReq message, length delimited. Does not implicitly {@link luck.protobuf.LotteryReq.verify|verify} messages.
//              * @param message LotteryReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILotteryReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LotteryReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LotteryReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LotteryReq;

//             /**
//              * Decodes a LotteryReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LotteryReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LotteryReq;

//             /**
//              * Verifies a LotteryReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SynthesisReq. */
//         interface ISynthesisReq {

//             /** SynthesisReq synthesisId */
//             synthesisId: number;

//             /** SynthesisReq weaponUidList */
//             weaponUidList?: ((number|Long)[]|null);

//             /** SynthesisReq cardUidList */
//             cardUidList?: ((number|Long)[]|null);

//             /** SynthesisReq clothesUidList */
//             clothesUidList?: ((number|Long)[]|null);

//             /** SynthesisReq synthesisNum */
//             synthesisNum: number;
//         }

//         /** Represents a SynthesisReq. */
//         class SynthesisReq implements ISynthesisReq {

//             /**
//              * Constructs a new SynthesisReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISynthesisReq);

//             /** SynthesisReq synthesisId. */
//             public synthesisId: number;

//             /** SynthesisReq weaponUidList. */
//             public weaponUidList: (number|Long)[];

//             /** SynthesisReq cardUidList. */
//             public cardUidList: (number|Long)[];

//             /** SynthesisReq clothesUidList. */
//             public clothesUidList: (number|Long)[];

//             /** SynthesisReq synthesisNum. */
//             public synthesisNum: number;

//             /**
//              * Creates a new SynthesisReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SynthesisReq instance
//              */
//             public static create(properties?: luck.protobuf.ISynthesisReq): luck.protobuf.SynthesisReq;

//             /**
//              * Encodes the specified SynthesisReq message. Does not implicitly {@link luck.protobuf.SynthesisReq.verify|verify} messages.
//              * @param message SynthesisReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISynthesisReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SynthesisReq message, length delimited. Does not implicitly {@link luck.protobuf.SynthesisReq.verify|verify} messages.
//              * @param message SynthesisReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISynthesisReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SynthesisReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SynthesisReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SynthesisReq;

//             /**
//              * Decodes a SynthesisReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SynthesisReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SynthesisReq;

//             /**
//              * Verifies a SynthesisReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SettingReq. */
//         interface ISettingReq {

//             /** SettingReq telePhone */
//             telePhone?: (string|null);

//             /** SettingReq email */
//             email?: (string|null);

//             /** SettingReq isCheckName */
//             isCheckName: number;

//             /** SettingReq refuseFriendReq */
//             refuseFriendReq: number;

//             /** SettingReq refuseStrangerNews */
//             refuseStrangerNews: number;

//             /** SettingReq refuseClubInvite */
//             refuseClubInvite: number;

//             /** SettingReq refuseSysInfo */
//             refuseSysInfo: number;

//             /** SettingReq refuseTeamInvite */
//             refuseTeamInvite: number;

//             /** SettingReq refuseBattleInvite */
//             refuseBattleInvite: number;

//             /** SettingReq closeBarrage */
//             closeBarrage: number;
//         }

//         /** Represents a SettingReq. */
//         class SettingReq implements ISettingReq {

//             /**
//              * Constructs a new SettingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISettingReq);

//             /** SettingReq telePhone. */
//             public telePhone: string;

//             /** SettingReq email. */
//             public email: string;

//             /** SettingReq isCheckName. */
//             public isCheckName: number;

//             /** SettingReq refuseFriendReq. */
//             public refuseFriendReq: number;

//             /** SettingReq refuseStrangerNews. */
//             public refuseStrangerNews: number;

//             /** SettingReq refuseClubInvite. */
//             public refuseClubInvite: number;

//             /** SettingReq refuseSysInfo. */
//             public refuseSysInfo: number;

//             /** SettingReq refuseTeamInvite. */
//             public refuseTeamInvite: number;

//             /** SettingReq refuseBattleInvite. */
//             public refuseBattleInvite: number;

//             /** SettingReq closeBarrage. */
//             public closeBarrage: number;

//             /**
//              * Creates a new SettingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SettingReq instance
//              */
//             public static create(properties?: luck.protobuf.ISettingReq): luck.protobuf.SettingReq;

//             /**
//              * Encodes the specified SettingReq message. Does not implicitly {@link luck.protobuf.SettingReq.verify|verify} messages.
//              * @param message SettingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISettingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SettingReq message, length delimited. Does not implicitly {@link luck.protobuf.SettingReq.verify|verify} messages.
//              * @param message SettingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISettingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SettingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SettingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SettingReq;

//             /**
//              * Decodes a SettingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SettingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SettingReq;

//             /**
//              * Verifies a SettingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipRecastReq. */
//         interface IEquipRecastReq {

//             /** EquipRecastReq equipType */
//             equipType: number;

//             /** EquipRecastReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipRecastReq. */
//         class EquipRecastReq implements IEquipRecastReq {

//             /**
//              * Constructs a new EquipRecastReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipRecastReq);

//             /** EquipRecastReq equipType. */
//             public equipType: number;

//             /** EquipRecastReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipRecastReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipRecastReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipRecastReq): luck.protobuf.EquipRecastReq;

//             /**
//              * Encodes the specified EquipRecastReq message. Does not implicitly {@link luck.protobuf.EquipRecastReq.verify|verify} messages.
//              * @param message EquipRecastReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipRecastReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipRecastReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipRecastReq.verify|verify} messages.
//              * @param message EquipRecastReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipRecastReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipRecastReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipRecastReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipRecastReq;

//             /**
//              * Decodes an EquipRecastReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipRecastReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipRecastReq;

//             /**
//              * Verifies an EquipRecastReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipRecastAffirmReq. */
//         interface IEquipRecastAffirmReq {

//             /** EquipRecastAffirmReq isRemould */
//             isRemould: boolean;

//             /** EquipRecastAffirmReq equipType */
//             equipType: number;

//             /** EquipRecastAffirmReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipRecastAffirmReq. */
//         class EquipRecastAffirmReq implements IEquipRecastAffirmReq {

//             /**
//              * Constructs a new EquipRecastAffirmReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipRecastAffirmReq);

//             /** EquipRecastAffirmReq isRemould. */
//             public isRemould: boolean;

//             /** EquipRecastAffirmReq equipType. */
//             public equipType: number;

//             /** EquipRecastAffirmReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipRecastAffirmReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipRecastAffirmReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipRecastAffirmReq): luck.protobuf.EquipRecastAffirmReq;

//             /**
//              * Encodes the specified EquipRecastAffirmReq message. Does not implicitly {@link luck.protobuf.EquipRecastAffirmReq.verify|verify} messages.
//              * @param message EquipRecastAffirmReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipRecastAffirmReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipRecastAffirmReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipRecastAffirmReq.verify|verify} messages.
//              * @param message EquipRecastAffirmReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipRecastAffirmReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipRecastAffirmReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipRecastAffirmReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipRecastAffirmReq;

//             /**
//              * Decodes an EquipRecastAffirmReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipRecastAffirmReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipRecastAffirmReq;

//             /**
//              * Verifies an EquipRecastAffirmReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetEmailListReq. */
//         interface IGetEmailListReq {
//         }

//         /** Represents a GetEmailListReq. */
//         class GetEmailListReq implements IGetEmailListReq {

//             /**
//              * Constructs a new GetEmailListReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetEmailListReq);

//             /**
//              * Creates a new GetEmailListReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetEmailListReq instance
//              */
//             public static create(properties?: luck.protobuf.IGetEmailListReq): luck.protobuf.GetEmailListReq;

//             /**
//              * Encodes the specified GetEmailListReq message. Does not implicitly {@link luck.protobuf.GetEmailListReq.verify|verify} messages.
//              * @param message GetEmailListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetEmailListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetEmailListReq message, length delimited. Does not implicitly {@link luck.protobuf.GetEmailListReq.verify|verify} messages.
//              * @param message GetEmailListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetEmailListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetEmailListReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetEmailListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetEmailListReq;

//             /**
//              * Decodes a GetEmailListReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetEmailListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetEmailListReq;

//             /**
//              * Verifies a GetEmailListReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipUpgradeReq. */
//         interface IEquipUpgradeReq {

//             /** EquipUpgradeReq equipType */
//             equipType: number;

//             /** EquipUpgradeReq equipUid */
//             equipUid: (number|Long);

//             /** EquipUpgradeReq materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents an EquipUpgradeReq. */
//         class EquipUpgradeReq implements IEquipUpgradeReq {

//             /**
//              * Constructs a new EquipUpgradeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipUpgradeReq);

//             /** EquipUpgradeReq equipType. */
//             public equipType: number;

//             /** EquipUpgradeReq equipUid. */
//             public equipUid: (number|Long);

//             /** EquipUpgradeReq materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new EquipUpgradeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipUpgradeReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipUpgradeReq): luck.protobuf.EquipUpgradeReq;

//             /**
//              * Encodes the specified EquipUpgradeReq message. Does not implicitly {@link luck.protobuf.EquipUpgradeReq.verify|verify} messages.
//              * @param message EquipUpgradeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipUpgradeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipUpgradeReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipUpgradeReq.verify|verify} messages.
//              * @param message EquipUpgradeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipUpgradeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipUpgradeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipUpgradeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipUpgradeReq;

//             /**
//              * Decodes an EquipUpgradeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipUpgradeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipUpgradeReq;

//             /**
//              * Verifies an EquipUpgradeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailDrawReq. */
//         interface IEmailDrawReq {

//             /** EmailDrawReq uid */
//             uid: (number|Long);
//         }

//         /** Represents an EmailDrawReq. */
//         class EmailDrawReq implements IEmailDrawReq {

//             /**
//              * Constructs a new EmailDrawReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailDrawReq);

//             /** EmailDrawReq uid. */
//             public uid: (number|Long);

//             /**
//              * Creates a new EmailDrawReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailDrawReq instance
//              */
//             public static create(properties?: luck.protobuf.IEmailDrawReq): luck.protobuf.EmailDrawReq;

//             /**
//              * Encodes the specified EmailDrawReq message. Does not implicitly {@link luck.protobuf.EmailDrawReq.verify|verify} messages.
//              * @param message EmailDrawReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailDrawReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailDrawReq message, length delimited. Does not implicitly {@link luck.protobuf.EmailDrawReq.verify|verify} messages.
//              * @param message EmailDrawReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailDrawReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailDrawReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailDrawReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailDrawReq;

//             /**
//              * Decodes an EmailDrawReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailDrawReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailDrawReq;

//             /**
//              * Verifies an EmailDrawReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DrawAllEmailReq. */
//         interface IDrawAllEmailReq {
//         }

//         /** Represents a DrawAllEmailReq. */
//         class DrawAllEmailReq implements IDrawAllEmailReq {

//             /**
//              * Constructs a new DrawAllEmailReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDrawAllEmailReq);

//             /**
//              * Creates a new DrawAllEmailReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DrawAllEmailReq instance
//              */
//             public static create(properties?: luck.protobuf.IDrawAllEmailReq): luck.protobuf.DrawAllEmailReq;

//             /**
//              * Encodes the specified DrawAllEmailReq message. Does not implicitly {@link luck.protobuf.DrawAllEmailReq.verify|verify} messages.
//              * @param message DrawAllEmailReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDrawAllEmailReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DrawAllEmailReq message, length delimited. Does not implicitly {@link luck.protobuf.DrawAllEmailReq.verify|verify} messages.
//              * @param message DrawAllEmailReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDrawAllEmailReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DrawAllEmailReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DrawAllEmailReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DrawAllEmailReq;

//             /**
//              * Decodes a DrawAllEmailReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DrawAllEmailReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DrawAllEmailReq;

//             /**
//              * Verifies a DrawAllEmailReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailDelReq. */
//         interface IEmailDelReq {

//             /** EmailDelReq uid */
//             uid: (number|Long);
//         }

//         /** Represents an EmailDelReq. */
//         class EmailDelReq implements IEmailDelReq {

//             /**
//              * Constructs a new EmailDelReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailDelReq);

//             /** EmailDelReq uid. */
//             public uid: (number|Long);

//             /**
//              * Creates a new EmailDelReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailDelReq instance
//              */
//             public static create(properties?: luck.protobuf.IEmailDelReq): luck.protobuf.EmailDelReq;

//             /**
//              * Encodes the specified EmailDelReq message. Does not implicitly {@link luck.protobuf.EmailDelReq.verify|verify} messages.
//              * @param message EmailDelReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailDelReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailDelReq message, length delimited. Does not implicitly {@link luck.protobuf.EmailDelReq.verify|verify} messages.
//              * @param message EmailDelReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailDelReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailDelReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailDelReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailDelReq;

//             /**
//              * Decodes an EmailDelReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailDelReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailDelReq;

//             /**
//              * Verifies an EmailDelReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipBaptizeReq. */
//         interface IEquipBaptizeReq {

//             /** EquipBaptizeReq equipType */
//             equipType: number;

//             /** EquipBaptizeReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipBaptizeReq. */
//         class EquipBaptizeReq implements IEquipBaptizeReq {

//             /**
//              * Constructs a new EquipBaptizeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipBaptizeReq);

//             /** EquipBaptizeReq equipType. */
//             public equipType: number;

//             /** EquipBaptizeReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipBaptizeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipBaptizeReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipBaptizeReq): luck.protobuf.EquipBaptizeReq;

//             /**
//              * Encodes the specified EquipBaptizeReq message. Does not implicitly {@link luck.protobuf.EquipBaptizeReq.verify|verify} messages.
//              * @param message EquipBaptizeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipBaptizeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipBaptizeReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipBaptizeReq.verify|verify} messages.
//              * @param message EquipBaptizeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipBaptizeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipBaptizeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipBaptizeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipBaptizeReq;

//             /**
//              * Decodes an EquipBaptizeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipBaptizeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipBaptizeReq;

//             /**
//              * Verifies an EquipBaptizeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipBaptizeAffirmReq. */
//         interface IEquipBaptizeAffirmReq {

//             /** EquipBaptizeAffirmReq isBaptize */
//             isBaptize: boolean;

//             /** EquipBaptizeAffirmReq equipType */
//             equipType: number;

//             /** EquipBaptizeAffirmReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipBaptizeAffirmReq. */
//         class EquipBaptizeAffirmReq implements IEquipBaptizeAffirmReq {

//             /**
//              * Constructs a new EquipBaptizeAffirmReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipBaptizeAffirmReq);

//             /** EquipBaptizeAffirmReq isBaptize. */
//             public isBaptize: boolean;

//             /** EquipBaptizeAffirmReq equipType. */
//             public equipType: number;

//             /** EquipBaptizeAffirmReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipBaptizeAffirmReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipBaptizeAffirmReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipBaptizeAffirmReq): luck.protobuf.EquipBaptizeAffirmReq;

//             /**
//              * Encodes the specified EquipBaptizeAffirmReq message. Does not implicitly {@link luck.protobuf.EquipBaptizeAffirmReq.verify|verify} messages.
//              * @param message EquipBaptizeAffirmReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipBaptizeAffirmReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipBaptizeAffirmReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipBaptizeAffirmReq.verify|verify} messages.
//              * @param message EquipBaptizeAffirmReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipBaptizeAffirmReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipBaptizeAffirmReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipBaptizeAffirmReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipBaptizeAffirmReq;

//             /**
//              * Decodes an EquipBaptizeAffirmReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipBaptizeAffirmReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipBaptizeAffirmReq;

//             /**
//              * Verifies an EquipBaptizeAffirmReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipInlayReq. */
//         interface IEquipInlayReq {

//             /** EquipInlayReq equipType */
//             equipType: number;

//             /** EquipInlayReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipInlayReq. */
//         class EquipInlayReq implements IEquipInlayReq {

//             /**
//              * Constructs a new EquipInlayReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipInlayReq);

//             /** EquipInlayReq equipType. */
//             public equipType: number;

//             /** EquipInlayReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipInlayReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipInlayReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipInlayReq): luck.protobuf.EquipInlayReq;

//             /**
//              * Encodes the specified EquipInlayReq message. Does not implicitly {@link luck.protobuf.EquipInlayReq.verify|verify} messages.
//              * @param message EquipInlayReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipInlayReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipInlayReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipInlayReq.verify|verify} messages.
//              * @param message EquipInlayReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipInlayReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipInlayReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipInlayReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipInlayReq;

//             /**
//              * Decodes an EquipInlayReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipInlayReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipInlayReq;

//             /**
//              * Verifies an EquipInlayReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipInlayDismantleReq. */
//         interface IEquipInlayDismantleReq {

//             /** EquipInlayDismantleReq equipType */
//             equipType: number;

//             /** EquipInlayDismantleReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipInlayDismantleReq. */
//         class EquipInlayDismantleReq implements IEquipInlayDismantleReq {

//             /**
//              * Constructs a new EquipInlayDismantleReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipInlayDismantleReq);

//             /** EquipInlayDismantleReq equipType. */
//             public equipType: number;

//             /** EquipInlayDismantleReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipInlayDismantleReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipInlayDismantleReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipInlayDismantleReq): luck.protobuf.EquipInlayDismantleReq;

//             /**
//              * Encodes the specified EquipInlayDismantleReq message. Does not implicitly {@link luck.protobuf.EquipInlayDismantleReq.verify|verify} messages.
//              * @param message EquipInlayDismantleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipInlayDismantleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipInlayDismantleReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipInlayDismantleReq.verify|verify} messages.
//              * @param message EquipInlayDismantleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipInlayDismantleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipInlayDismantleReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipInlayDismantleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipInlayDismantleReq;

//             /**
//              * Decodes an EquipInlayDismantleReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipInlayDismantleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipInlayDismantleReq;

//             /**
//              * Verifies an EquipInlayDismantleReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipAdvanceReq. */
//         interface IEquipAdvanceReq {

//             /** EquipAdvanceReq equipType */
//             equipType: number;

//             /** EquipAdvanceReq equipUid */
//             equipUid: (number|Long);
//         }

//         /** Represents an EquipAdvanceReq. */
//         class EquipAdvanceReq implements IEquipAdvanceReq {

//             /**
//              * Constructs a new EquipAdvanceReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipAdvanceReq);

//             /** EquipAdvanceReq equipType. */
//             public equipType: number;

//             /** EquipAdvanceReq equipUid. */
//             public equipUid: (number|Long);

//             /**
//              * Creates a new EquipAdvanceReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipAdvanceReq instance
//              */
//             public static create(properties?: luck.protobuf.IEquipAdvanceReq): luck.protobuf.EquipAdvanceReq;

//             /**
//              * Encodes the specified EquipAdvanceReq message. Does not implicitly {@link luck.protobuf.EquipAdvanceReq.verify|verify} messages.
//              * @param message EquipAdvanceReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipAdvanceReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipAdvanceReq message, length delimited. Does not implicitly {@link luck.protobuf.EquipAdvanceReq.verify|verify} messages.
//              * @param message EquipAdvanceReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipAdvanceReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipAdvanceReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipAdvanceReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipAdvanceReq;

//             /**
//              * Decodes an EquipAdvanceReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipAdvanceReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipAdvanceReq;

//             /**
//              * Verifies an EquipAdvanceReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoleUnlockReq. */
//         interface IRoleUnlockReq {

//             /** RoleUnlockReq roleId */
//             roleId: number;
//         }

//         /** Represents a RoleUnlockReq. */
//         class RoleUnlockReq implements IRoleUnlockReq {

//             /**
//              * Constructs a new RoleUnlockReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoleUnlockReq);

//             /** RoleUnlockReq roleId. */
//             public roleId: number;

//             /**
//              * Creates a new RoleUnlockReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoleUnlockReq instance
//              */
//             public static create(properties?: luck.protobuf.IRoleUnlockReq): luck.protobuf.RoleUnlockReq;

//             /**
//              * Encodes the specified RoleUnlockReq message. Does not implicitly {@link luck.protobuf.RoleUnlockReq.verify|verify} messages.
//              * @param message RoleUnlockReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoleUnlockReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoleUnlockReq message, length delimited. Does not implicitly {@link luck.protobuf.RoleUnlockReq.verify|verify} messages.
//              * @param message RoleUnlockReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoleUnlockReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoleUnlockReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoleUnlockReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoleUnlockReq;

//             /**
//              * Decodes a RoleUnlockReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoleUnlockReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoleUnlockReq;

//             /**
//              * Verifies a RoleUnlockReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoleChangeReq. */
//         interface IRoleChangeReq {

//             /** RoleChangeReq roleId */
//             roleId: number;
//         }

//         /** Represents a RoleChangeReq. */
//         class RoleChangeReq implements IRoleChangeReq {

//             /**
//              * Constructs a new RoleChangeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoleChangeReq);

//             /** RoleChangeReq roleId. */
//             public roleId: number;

//             /**
//              * Creates a new RoleChangeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoleChangeReq instance
//              */
//             public static create(properties?: luck.protobuf.IRoleChangeReq): luck.protobuf.RoleChangeReq;

//             /**
//              * Encodes the specified RoleChangeReq message. Does not implicitly {@link luck.protobuf.RoleChangeReq.verify|verify} messages.
//              * @param message RoleChangeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoleChangeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoleChangeReq message, length delimited. Does not implicitly {@link luck.protobuf.RoleChangeReq.verify|verify} messages.
//              * @param message RoleChangeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoleChangeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoleChangeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoleChangeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoleChangeReq;

//             /**
//              * Decodes a RoleChangeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoleChangeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoleChangeReq;

//             /**
//              * Verifies a RoleChangeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StaminaBuyReq. */
//         interface IStaminaBuyReq {

//             /** StaminaBuyReq num */
//             num: number;
//         }

//         /** Represents a StaminaBuyReq. */
//         class StaminaBuyReq implements IStaminaBuyReq {

//             /**
//              * Constructs a new StaminaBuyReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStaminaBuyReq);

//             /** StaminaBuyReq num. */
//             public num: number;

//             /**
//              * Creates a new StaminaBuyReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StaminaBuyReq instance
//              */
//             public static create(properties?: luck.protobuf.IStaminaBuyReq): luck.protobuf.StaminaBuyReq;

//             /**
//              * Encodes the specified StaminaBuyReq message. Does not implicitly {@link luck.protobuf.StaminaBuyReq.verify|verify} messages.
//              * @param message StaminaBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStaminaBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StaminaBuyReq message, length delimited. Does not implicitly {@link luck.protobuf.StaminaBuyReq.verify|verify} messages.
//              * @param message StaminaBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStaminaBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StaminaBuyReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StaminaBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StaminaBuyReq;

//             /**
//              * Decodes a StaminaBuyReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StaminaBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StaminaBuyReq;

//             /**
//              * Verifies a StaminaBuyReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RecommendFriendsReq. */
//         interface IRecommendFriendsReq {
//         }

//         /** Represents a RecommendFriendsReq. */
//         class RecommendFriendsReq implements IRecommendFriendsReq {

//             /**
//              * Constructs a new RecommendFriendsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRecommendFriendsReq);

//             /**
//              * Creates a new RecommendFriendsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RecommendFriendsReq instance
//              */
//             public static create(properties?: luck.protobuf.IRecommendFriendsReq): luck.protobuf.RecommendFriendsReq;

//             /**
//              * Encodes the specified RecommendFriendsReq message. Does not implicitly {@link luck.protobuf.RecommendFriendsReq.verify|verify} messages.
//              * @param message RecommendFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRecommendFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RecommendFriendsReq message, length delimited. Does not implicitly {@link luck.protobuf.RecommendFriendsReq.verify|verify} messages.
//              * @param message RecommendFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRecommendFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RecommendFriendsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RecommendFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RecommendFriendsReq;

//             /**
//              * Decodes a RecommendFriendsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RecommendFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RecommendFriendsReq;

//             /**
//              * Verifies a RecommendFriendsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SearchFriendsReq. */
//         interface ISearchFriendsReq {

//             /** SearchFriendsReq search */
//             search: string;
//         }

//         /** Represents a SearchFriendsReq. */
//         class SearchFriendsReq implements ISearchFriendsReq {

//             /**
//              * Constructs a new SearchFriendsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISearchFriendsReq);

//             /** SearchFriendsReq search. */
//             public search: string;

//             /**
//              * Creates a new SearchFriendsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SearchFriendsReq instance
//              */
//             public static create(properties?: luck.protobuf.ISearchFriendsReq): luck.protobuf.SearchFriendsReq;

//             /**
//              * Encodes the specified SearchFriendsReq message. Does not implicitly {@link luck.protobuf.SearchFriendsReq.verify|verify} messages.
//              * @param message SearchFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISearchFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SearchFriendsReq message, length delimited. Does not implicitly {@link luck.protobuf.SearchFriendsReq.verify|verify} messages.
//              * @param message SearchFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISearchFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SearchFriendsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SearchFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SearchFriendsReq;

//             /**
//              * Decodes a SearchFriendsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SearchFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SearchFriendsReq;

//             /**
//              * Verifies a SearchFriendsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ShopBuyReq. */
//         interface IShopBuyReq {

//             /** ShopBuyReq num */
//             num: number;

//             /** ShopBuyReq goodsId */
//             goodsId: number;
//         }

//         /** Represents a ShopBuyReq. */
//         class ShopBuyReq implements IShopBuyReq {

//             /**
//              * Constructs a new ShopBuyReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IShopBuyReq);

//             /** ShopBuyReq num. */
//             public num: number;

//             /** ShopBuyReq goodsId. */
//             public goodsId: number;

//             /**
//              * Creates a new ShopBuyReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ShopBuyReq instance
//              */
//             public static create(properties?: luck.protobuf.IShopBuyReq): luck.protobuf.ShopBuyReq;

//             /**
//              * Encodes the specified ShopBuyReq message. Does not implicitly {@link luck.protobuf.ShopBuyReq.verify|verify} messages.
//              * @param message ShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ShopBuyReq message, length delimited. Does not implicitly {@link luck.protobuf.ShopBuyReq.verify|verify} messages.
//              * @param message ShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ShopBuyReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ShopBuyReq;

//             /**
//              * Decodes a ShopBuyReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ShopBuyReq;

//             /**
//              * Verifies a ShopBuyReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApplyFriendsReq. */
//         interface IApplyFriendsReq {

//             /** ApplyFriendsReq friendId */
//             friendId: (number|Long);
//         }

//         /** Represents an ApplyFriendsReq. */
//         class ApplyFriendsReq implements IApplyFriendsReq {

//             /**
//              * Constructs a new ApplyFriendsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApplyFriendsReq);

//             /** ApplyFriendsReq friendId. */
//             public friendId: (number|Long);

//             /**
//              * Creates a new ApplyFriendsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApplyFriendsReq instance
//              */
//             public static create(properties?: luck.protobuf.IApplyFriendsReq): luck.protobuf.ApplyFriendsReq;

//             /**
//              * Encodes the specified ApplyFriendsReq message. Does not implicitly {@link luck.protobuf.ApplyFriendsReq.verify|verify} messages.
//              * @param message ApplyFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApplyFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApplyFriendsReq message, length delimited. Does not implicitly {@link luck.protobuf.ApplyFriendsReq.verify|verify} messages.
//              * @param message ApplyFriendsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApplyFriendsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApplyFriendsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApplyFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApplyFriendsReq;

//             /**
//              * Decodes an ApplyFriendsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApplyFriendsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApplyFriendsReq;

//             /**
//              * Verifies an ApplyFriendsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetFriendsListReq. */
//         interface IGetFriendsListReq {
//         }

//         /** Represents a GetFriendsListReq. */
//         class GetFriendsListReq implements IGetFriendsListReq {

//             /**
//              * Constructs a new GetFriendsListReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetFriendsListReq);

//             /**
//              * Creates a new GetFriendsListReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetFriendsListReq instance
//              */
//             public static create(properties?: luck.protobuf.IGetFriendsListReq): luck.protobuf.GetFriendsListReq;

//             /**
//              * Encodes the specified GetFriendsListReq message. Does not implicitly {@link luck.protobuf.GetFriendsListReq.verify|verify} messages.
//              * @param message GetFriendsListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetFriendsListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetFriendsListReq message, length delimited. Does not implicitly {@link luck.protobuf.GetFriendsListReq.verify|verify} messages.
//              * @param message GetFriendsListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetFriendsListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetFriendsListReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetFriendsListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetFriendsListReq;

//             /**
//              * Decodes a GetFriendsListReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetFriendsListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetFriendsListReq;

//             /**
//              * Verifies a GetFriendsListReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApproveFriendApplyReq. */
//         interface IApproveFriendApplyReq {

//             /** ApproveFriendApplyReq friendId */
//             friendId: (number|Long);

//             /** ApproveFriendApplyReq bAgree */
//             bAgree: boolean;
//         }

//         /** Represents an ApproveFriendApplyReq. */
//         class ApproveFriendApplyReq implements IApproveFriendApplyReq {

//             /**
//              * Constructs a new ApproveFriendApplyReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApproveFriendApplyReq);

//             /** ApproveFriendApplyReq friendId. */
//             public friendId: (number|Long);

//             /** ApproveFriendApplyReq bAgree. */
//             public bAgree: boolean;

//             /**
//              * Creates a new ApproveFriendApplyReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApproveFriendApplyReq instance
//              */
//             public static create(properties?: luck.protobuf.IApproveFriendApplyReq): luck.protobuf.ApproveFriendApplyReq;

//             /**
//              * Encodes the specified ApproveFriendApplyReq message. Does not implicitly {@link luck.protobuf.ApproveFriendApplyReq.verify|verify} messages.
//              * @param message ApproveFriendApplyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApproveFriendApplyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApproveFriendApplyReq message, length delimited. Does not implicitly {@link luck.protobuf.ApproveFriendApplyReq.verify|verify} messages.
//              * @param message ApproveFriendApplyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApproveFriendApplyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApproveFriendApplyReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApproveFriendApplyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApproveFriendApplyReq;

//             /**
//              * Decodes an ApproveFriendApplyReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApproveFriendApplyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApproveFriendApplyReq;

//             /**
//              * Verifies an ApproveFriendApplyReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DeleteFriendReq. */
//         interface IDeleteFriendReq {

//             /** DeleteFriendReq friendId */
//             friendId: (number|Long);
//         }

//         /** Represents a DeleteFriendReq. */
//         class DeleteFriendReq implements IDeleteFriendReq {

//             /**
//              * Constructs a new DeleteFriendReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDeleteFriendReq);

//             /** DeleteFriendReq friendId. */
//             public friendId: (number|Long);

//             /**
//              * Creates a new DeleteFriendReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DeleteFriendReq instance
//              */
//             public static create(properties?: luck.protobuf.IDeleteFriendReq): luck.protobuf.DeleteFriendReq;

//             /**
//              * Encodes the specified DeleteFriendReq message. Does not implicitly {@link luck.protobuf.DeleteFriendReq.verify|verify} messages.
//              * @param message DeleteFriendReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDeleteFriendReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DeleteFriendReq message, length delimited. Does not implicitly {@link luck.protobuf.DeleteFriendReq.verify|verify} messages.
//              * @param message DeleteFriendReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDeleteFriendReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DeleteFriendReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DeleteFriendReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DeleteFriendReq;

//             /**
//              * Decodes a DeleteFriendReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DeleteFriendReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DeleteFriendReq;

//             /**
//              * Verifies a DeleteFriendReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LoadShopReq. */
//         interface ILoadShopReq {
//         }

//         /** Represents a LoadShopReq. */
//         class LoadShopReq implements ILoadShopReq {

//             /**
//              * Constructs a new LoadShopReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILoadShopReq);

//             /**
//              * Creates a new LoadShopReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LoadShopReq instance
//              */
//             public static create(properties?: luck.protobuf.ILoadShopReq): luck.protobuf.LoadShopReq;

//             /**
//              * Encodes the specified LoadShopReq message. Does not implicitly {@link luck.protobuf.LoadShopReq.verify|verify} messages.
//              * @param message LoadShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILoadShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LoadShopReq message, length delimited. Does not implicitly {@link luck.protobuf.LoadShopReq.verify|verify} messages.
//              * @param message LoadShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILoadShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LoadShopReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LoadShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LoadShopReq;

//             /**
//              * Decodes a LoadShopReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LoadShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LoadShopReq;

//             /**
//              * Verifies a LoadShopReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SendChatReq. */
//         interface ISendChatReq {

//             /** SendChatReq type */
//             type: number;

//             /** SendChatReq content */
//             content: string;

//             /** SendChatReq addresseeId */
//             addresseeId?: (number|Long|null);

//             /** SendChatReq weaponUidList */
//             weaponUidList?: ((number|Long)[]|null);

//             /** SendChatReq cardUidList */
//             cardUidList?: ((number|Long)[]|null);

//             /** SendChatReq clothesUidList */
//             clothesUidList?: ((number|Long)[]|null);
//         }

//         /** Represents a SendChatReq. */
//         class SendChatReq implements ISendChatReq {

//             /**
//              * Constructs a new SendChatReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISendChatReq);

//             /** SendChatReq type. */
//             public type: number;

//             /** SendChatReq content. */
//             public content: string;

//             /** SendChatReq addresseeId. */
//             public addresseeId: (number|Long);

//             /** SendChatReq weaponUidList. */
//             public weaponUidList: (number|Long)[];

//             /** SendChatReq cardUidList. */
//             public cardUidList: (number|Long)[];

//             /** SendChatReq clothesUidList. */
//             public clothesUidList: (number|Long)[];

//             /**
//              * Creates a new SendChatReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SendChatReq instance
//              */
//             public static create(properties?: luck.protobuf.ISendChatReq): luck.protobuf.SendChatReq;

//             /**
//              * Encodes the specified SendChatReq message. Does not implicitly {@link luck.protobuf.SendChatReq.verify|verify} messages.
//              * @param message SendChatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISendChatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SendChatReq message, length delimited. Does not implicitly {@link luck.protobuf.SendChatReq.verify|verify} messages.
//              * @param message SendChatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISendChatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SendChatReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SendChatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SendChatReq;

//             /**
//              * Decodes a SendChatReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SendChatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SendChatReq;

//             /**
//              * Verifies a SendChatReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ExpansionBagReq. */
//         interface IExpansionBagReq {

//             /** ExpansionBagReq gridNum */
//             gridNum: number;
//         }

//         /** Represents an ExpansionBagReq. */
//         class ExpansionBagReq implements IExpansionBagReq {

//             /**
//              * Constructs a new ExpansionBagReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IExpansionBagReq);

//             /** ExpansionBagReq gridNum. */
//             public gridNum: number;

//             /**
//              * Creates a new ExpansionBagReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ExpansionBagReq instance
//              */
//             public static create(properties?: luck.protobuf.IExpansionBagReq): luck.protobuf.ExpansionBagReq;

//             /**
//              * Encodes the specified ExpansionBagReq message. Does not implicitly {@link luck.protobuf.ExpansionBagReq.verify|verify} messages.
//              * @param message ExpansionBagReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IExpansionBagReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ExpansionBagReq message, length delimited. Does not implicitly {@link luck.protobuf.ExpansionBagReq.verify|verify} messages.
//              * @param message ExpansionBagReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IExpansionBagReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ExpansionBagReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ExpansionBagReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ExpansionBagReq;

//             /**
//              * Decodes an ExpansionBagReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ExpansionBagReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ExpansionBagReq;

//             /**
//              * Verifies an ExpansionBagReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityTollgateReq. */
//         interface IActivityTollgateReq {

//             /** ActivityTollgateReq TollgateId */
//             TollgateId: number;
//         }

//         /** Represents an ActivityTollgateReq. */
//         class ActivityTollgateReq implements IActivityTollgateReq {

//             /**
//              * Constructs a new ActivityTollgateReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityTollgateReq);

//             /** ActivityTollgateReq TollgateId. */
//             public TollgateId: number;

//             /**
//              * Creates a new ActivityTollgateReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityTollgateReq instance
//              */
//             public static create(properties?: luck.protobuf.IActivityTollgateReq): luck.protobuf.ActivityTollgateReq;

//             /**
//              * Encodes the specified ActivityTollgateReq message. Does not implicitly {@link luck.protobuf.ActivityTollgateReq.verify|verify} messages.
//              * @param message ActivityTollgateReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityTollgateReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityTollgateReq message, length delimited. Does not implicitly {@link luck.protobuf.ActivityTollgateReq.verify|verify} messages.
//              * @param message ActivityTollgateReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityTollgateReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityTollgateReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityTollgateReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityTollgateReq;

//             /**
//              * Decodes an ActivityTollgateReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityTollgateReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityTollgateReq;

//             /**
//              * Verifies an ActivityTollgateReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SellGoodsReq. */
//         interface ISellGoodsReq {

//             /** SellGoodsReq sellGoodsList */
//             sellGoodsList?: (luck.protobuf.IsellGoodsPB[]|null);
//         }

//         /** Represents a SellGoodsReq. */
//         class SellGoodsReq implements ISellGoodsReq {

//             /**
//              * Constructs a new SellGoodsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISellGoodsReq);

//             /** SellGoodsReq sellGoodsList. */
//             public sellGoodsList: luck.protobuf.IsellGoodsPB[];

//             /**
//              * Creates a new SellGoodsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SellGoodsReq instance
//              */
//             public static create(properties?: luck.protobuf.ISellGoodsReq): luck.protobuf.SellGoodsReq;

//             /**
//              * Encodes the specified SellGoodsReq message. Does not implicitly {@link luck.protobuf.SellGoodsReq.verify|verify} messages.
//              * @param message SellGoodsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISellGoodsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SellGoodsReq message, length delimited. Does not implicitly {@link luck.protobuf.SellGoodsReq.verify|verify} messages.
//              * @param message SellGoodsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISellGoodsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SellGoodsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SellGoodsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SellGoodsReq;

//             /**
//              * Decodes a SellGoodsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SellGoodsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SellGoodsReq;

//             /**
//              * Verifies a SellGoodsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CompleteActivityTollgateReq. */
//         interface ICompleteActivityTollgateReq {

//             /** CompleteActivityTollgateReq TollgateId */
//             TollgateId: number;

//             /** CompleteActivityTollgateReq isClear */
//             isClear: number;
//         }

//         /** Represents a CompleteActivityTollgateReq. */
//         class CompleteActivityTollgateReq implements ICompleteActivityTollgateReq {

//             /**
//              * Constructs a new CompleteActivityTollgateReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICompleteActivityTollgateReq);

//             /** CompleteActivityTollgateReq TollgateId. */
//             public TollgateId: number;

//             /** CompleteActivityTollgateReq isClear. */
//             public isClear: number;

//             /**
//              * Creates a new CompleteActivityTollgateReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CompleteActivityTollgateReq instance
//              */
//             public static create(properties?: luck.protobuf.ICompleteActivityTollgateReq): luck.protobuf.CompleteActivityTollgateReq;

//             /**
//              * Encodes the specified CompleteActivityTollgateReq message. Does not implicitly {@link luck.protobuf.CompleteActivityTollgateReq.verify|verify} messages.
//              * @param message CompleteActivityTollgateReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICompleteActivityTollgateReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CompleteActivityTollgateReq message, length delimited. Does not implicitly {@link luck.protobuf.CompleteActivityTollgateReq.verify|verify} messages.
//              * @param message CompleteActivityTollgateReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICompleteActivityTollgateReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CompleteActivityTollgateReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CompleteActivityTollgateReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CompleteActivityTollgateReq;

//             /**
//              * Decodes a CompleteActivityTollgateReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CompleteActivityTollgateReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CompleteActivityTollgateReq;

//             /**
//              * Verifies a CompleteActivityTollgateReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DrawLoveBentoReq. */
//         interface IDrawLoveBentoReq {
//         }

//         /** Represents a DrawLoveBentoReq. */
//         class DrawLoveBentoReq implements IDrawLoveBentoReq {

//             /**
//              * Constructs a new DrawLoveBentoReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDrawLoveBentoReq);

//             /**
//              * Creates a new DrawLoveBentoReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DrawLoveBentoReq instance
//              */
//             public static create(properties?: luck.protobuf.IDrawLoveBentoReq): luck.protobuf.DrawLoveBentoReq;

//             /**
//              * Encodes the specified DrawLoveBentoReq message. Does not implicitly {@link luck.protobuf.DrawLoveBentoReq.verify|verify} messages.
//              * @param message DrawLoveBentoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDrawLoveBentoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DrawLoveBentoReq message, length delimited. Does not implicitly {@link luck.protobuf.DrawLoveBentoReq.verify|verify} messages.
//              * @param message DrawLoveBentoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDrawLoveBentoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DrawLoveBentoReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DrawLoveBentoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DrawLoveBentoReq;

//             /**
//              * Decodes a DrawLoveBentoReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DrawLoveBentoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DrawLoveBentoReq;

//             /**
//              * Verifies a DrawLoveBentoReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PropConsumeReq. */
//         interface IPropConsumeReq {

//             /** PropConsumeReq propId */
//             propId: number;

//             /** PropConsumeReq propNum */
//             propNum: number;
//         }

//         /** Represents a PropConsumeReq. */
//         class PropConsumeReq implements IPropConsumeReq {

//             /**
//              * Constructs a new PropConsumeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPropConsumeReq);

//             /** PropConsumeReq propId. */
//             public propId: number;

//             /** PropConsumeReq propNum. */
//             public propNum: number;

//             /**
//              * Creates a new PropConsumeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PropConsumeReq instance
//              */
//             public static create(properties?: luck.protobuf.IPropConsumeReq): luck.protobuf.PropConsumeReq;

//             /**
//              * Encodes the specified PropConsumeReq message. Does not implicitly {@link luck.protobuf.PropConsumeReq.verify|verify} messages.
//              * @param message PropConsumeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPropConsumeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PropConsumeReq message, length delimited. Does not implicitly {@link luck.protobuf.PropConsumeReq.verify|verify} messages.
//              * @param message PropConsumeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPropConsumeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PropConsumeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PropConsumeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PropConsumeReq;

//             /**
//              * Decodes a PropConsumeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PropConsumeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PropConsumeReq;

//             /**
//              * Verifies a PropConsumeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PullGangInfoReq. */
//         interface IPullGangInfoReq {
//         }

//         /** Represents a PullGangInfoReq. */
//         class PullGangInfoReq implements IPullGangInfoReq {

//             /**
//              * Constructs a new PullGangInfoReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPullGangInfoReq);

//             /**
//              * Creates a new PullGangInfoReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PullGangInfoReq instance
//              */
//             public static create(properties?: luck.protobuf.IPullGangInfoReq): luck.protobuf.PullGangInfoReq;

//             /**
//              * Encodes the specified PullGangInfoReq message. Does not implicitly {@link luck.protobuf.PullGangInfoReq.verify|verify} messages.
//              * @param message PullGangInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPullGangInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PullGangInfoReq message, length delimited. Does not implicitly {@link luck.protobuf.PullGangInfoReq.verify|verify} messages.
//              * @param message PullGangInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPullGangInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PullGangInfoReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PullGangInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PullGangInfoReq;

//             /**
//              * Decodes a PullGangInfoReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PullGangInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PullGangInfoReq;

//             /**
//              * Verifies a PullGangInfoReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ChangeGangJobReq. */
//         interface IChangeGangJobReq {

//             /** ChangeGangJobReq changeId */
//             changeId: (number|Long);

//             /** ChangeGangJobReq job */
//             job: number;
//         }

//         /** Represents a ChangeGangJobReq. */
//         class ChangeGangJobReq implements IChangeGangJobReq {

//             /**
//              * Constructs a new ChangeGangJobReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IChangeGangJobReq);

//             /** ChangeGangJobReq changeId. */
//             public changeId: (number|Long);

//             /** ChangeGangJobReq job. */
//             public job: number;

//             /**
//              * Creates a new ChangeGangJobReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ChangeGangJobReq instance
//              */
//             public static create(properties?: luck.protobuf.IChangeGangJobReq): luck.protobuf.ChangeGangJobReq;

//             /**
//              * Encodes the specified ChangeGangJobReq message. Does not implicitly {@link luck.protobuf.ChangeGangJobReq.verify|verify} messages.
//              * @param message ChangeGangJobReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IChangeGangJobReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ChangeGangJobReq message, length delimited. Does not implicitly {@link luck.protobuf.ChangeGangJobReq.verify|verify} messages.
//              * @param message ChangeGangJobReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IChangeGangJobReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ChangeGangJobReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ChangeGangJobReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ChangeGangJobReq;

//             /**
//              * Decodes a ChangeGangJobReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ChangeGangJobReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ChangeGangJobReq;

//             /**
//              * Verifies a ChangeGangJobReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a QuitGangReq. */
//         interface IQuitGangReq {
//         }

//         /** Represents a QuitGangReq. */
//         class QuitGangReq implements IQuitGangReq {

//             /**
//              * Constructs a new QuitGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IQuitGangReq);

//             /**
//              * Creates a new QuitGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns QuitGangReq instance
//              */
//             public static create(properties?: luck.protobuf.IQuitGangReq): luck.protobuf.QuitGangReq;

//             /**
//              * Encodes the specified QuitGangReq message. Does not implicitly {@link luck.protobuf.QuitGangReq.verify|verify} messages.
//              * @param message QuitGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IQuitGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified QuitGangReq message, length delimited. Does not implicitly {@link luck.protobuf.QuitGangReq.verify|verify} messages.
//              * @param message QuitGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IQuitGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a QuitGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns QuitGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.QuitGangReq;

//             /**
//              * Decodes a QuitGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns QuitGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.QuitGangReq;

//             /**
//              * Verifies a QuitGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a KickOutGangReq. */
//         interface IKickOutGangReq {

//             /** KickOutGangReq memberId */
//             memberId: (number|Long);
//         }

//         /** Represents a KickOutGangReq. */
//         class KickOutGangReq implements IKickOutGangReq {

//             /**
//              * Constructs a new KickOutGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IKickOutGangReq);

//             /** KickOutGangReq memberId. */
//             public memberId: (number|Long);

//             /**
//              * Creates a new KickOutGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns KickOutGangReq instance
//              */
//             public static create(properties?: luck.protobuf.IKickOutGangReq): luck.protobuf.KickOutGangReq;

//             /**
//              * Encodes the specified KickOutGangReq message. Does not implicitly {@link luck.protobuf.KickOutGangReq.verify|verify} messages.
//              * @param message KickOutGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IKickOutGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified KickOutGangReq message, length delimited. Does not implicitly {@link luck.protobuf.KickOutGangReq.verify|verify} messages.
//              * @param message KickOutGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IKickOutGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a KickOutGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns KickOutGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.KickOutGangReq;

//             /**
//              * Decodes a KickOutGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns KickOutGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.KickOutGangReq;

//             /**
//              * Verifies a KickOutGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApproveJoinGangReq. */
//         interface IApproveJoinGangReq {

//             /** ApproveJoinGangReq applyId */
//             applyId: (number|Long);

//             /** ApproveJoinGangReq approve */
//             approve: boolean;
//         }

//         /** Represents an ApproveJoinGangReq. */
//         class ApproveJoinGangReq implements IApproveJoinGangReq {

//             /**
//              * Constructs a new ApproveJoinGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApproveJoinGangReq);

//             /** ApproveJoinGangReq applyId. */
//             public applyId: (number|Long);

//             /** ApproveJoinGangReq approve. */
//             public approve: boolean;

//             /**
//              * Creates a new ApproveJoinGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApproveJoinGangReq instance
//              */
//             public static create(properties?: luck.protobuf.IApproveJoinGangReq): luck.protobuf.ApproveJoinGangReq;

//             /**
//              * Encodes the specified ApproveJoinGangReq message. Does not implicitly {@link luck.protobuf.ApproveJoinGangReq.verify|verify} messages.
//              * @param message ApproveJoinGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApproveJoinGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApproveJoinGangReq message, length delimited. Does not implicitly {@link luck.protobuf.ApproveJoinGangReq.verify|verify} messages.
//              * @param message ApproveJoinGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApproveJoinGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApproveJoinGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApproveJoinGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApproveJoinGangReq;

//             /**
//              * Decodes an ApproveJoinGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApproveJoinGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApproveJoinGangReq;

//             /**
//              * Verifies an ApproveJoinGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApplyJoinGangReq. */
//         interface IApplyJoinGangReq {

//             /** ApplyJoinGangReq gangId */
//             gangId: (number|Long);
//         }

//         /** Represents an ApplyJoinGangReq. */
//         class ApplyJoinGangReq implements IApplyJoinGangReq {

//             /**
//              * Constructs a new ApplyJoinGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApplyJoinGangReq);

//             /** ApplyJoinGangReq gangId. */
//             public gangId: (number|Long);

//             /**
//              * Creates a new ApplyJoinGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApplyJoinGangReq instance
//              */
//             public static create(properties?: luck.protobuf.IApplyJoinGangReq): luck.protobuf.ApplyJoinGangReq;

//             /**
//              * Encodes the specified ApplyJoinGangReq message. Does not implicitly {@link luck.protobuf.ApplyJoinGangReq.verify|verify} messages.
//              * @param message ApplyJoinGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApplyJoinGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApplyJoinGangReq message, length delimited. Does not implicitly {@link luck.protobuf.ApplyJoinGangReq.verify|verify} messages.
//              * @param message ApplyJoinGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApplyJoinGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApplyJoinGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApplyJoinGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApplyJoinGangReq;

//             /**
//              * Decodes an ApplyJoinGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApplyJoinGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApplyJoinGangReq;

//             /**
//              * Verifies an ApplyJoinGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreateGangReq. */
//         interface ICreateGangReq {

//             /** CreateGangReq gangName */
//             gangName: string;

//             /** CreateGangReq manifesto */
//             manifesto: string;

//             /** CreateGangReq iconId */
//             iconId: number;
//         }

//         /** Represents a CreateGangReq. */
//         class CreateGangReq implements ICreateGangReq {

//             /**
//              * Constructs a new CreateGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreateGangReq);

//             /** CreateGangReq gangName. */
//             public gangName: string;

//             /** CreateGangReq manifesto. */
//             public manifesto: string;

//             /** CreateGangReq iconId. */
//             public iconId: number;

//             /**
//              * Creates a new CreateGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreateGangReq instance
//              */
//             public static create(properties?: luck.protobuf.ICreateGangReq): luck.protobuf.CreateGangReq;

//             /**
//              * Encodes the specified CreateGangReq message. Does not implicitly {@link luck.protobuf.CreateGangReq.verify|verify} messages.
//              * @param message CreateGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreateGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreateGangReq message, length delimited. Does not implicitly {@link luck.protobuf.CreateGangReq.verify|verify} messages.
//              * @param message CreateGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreateGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreateGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreateGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreateGangReq;

//             /**
//              * Decodes a CreateGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreateGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreateGangReq;

//             /**
//              * Verifies a CreateGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PullAllGangInfoReq. */
//         interface IPullAllGangInfoReq {
//         }

//         /** Represents a PullAllGangInfoReq. */
//         class PullAllGangInfoReq implements IPullAllGangInfoReq {

//             /**
//              * Constructs a new PullAllGangInfoReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPullAllGangInfoReq);

//             /**
//              * Creates a new PullAllGangInfoReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PullAllGangInfoReq instance
//              */
//             public static create(properties?: luck.protobuf.IPullAllGangInfoReq): luck.protobuf.PullAllGangInfoReq;

//             /**
//              * Encodes the specified PullAllGangInfoReq message. Does not implicitly {@link luck.protobuf.PullAllGangInfoReq.verify|verify} messages.
//              * @param message PullAllGangInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPullAllGangInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PullAllGangInfoReq message, length delimited. Does not implicitly {@link luck.protobuf.PullAllGangInfoReq.verify|verify} messages.
//              * @param message PullAllGangInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPullAllGangInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PullAllGangInfoReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PullAllGangInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PullAllGangInfoReq;

//             /**
//              * Decodes a PullAllGangInfoReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PullAllGangInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PullAllGangInfoReq;

//             /**
//              * Verifies a PullAllGangInfoReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SearchGangReq. */
//         interface ISearchGangReq {

//             /** SearchGangReq search */
//             search: string;
//         }

//         /** Represents a SearchGangReq. */
//         class SearchGangReq implements ISearchGangReq {

//             /**
//              * Constructs a new SearchGangReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISearchGangReq);

//             /** SearchGangReq search. */
//             public search: string;

//             /**
//              * Creates a new SearchGangReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SearchGangReq instance
//              */
//             public static create(properties?: luck.protobuf.ISearchGangReq): luck.protobuf.SearchGangReq;

//             /**
//              * Encodes the specified SearchGangReq message. Does not implicitly {@link luck.protobuf.SearchGangReq.verify|verify} messages.
//              * @param message SearchGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISearchGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SearchGangReq message, length delimited. Does not implicitly {@link luck.protobuf.SearchGangReq.verify|verify} messages.
//              * @param message SearchGangReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISearchGangReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SearchGangReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SearchGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SearchGangReq;

//             /**
//              * Decodes a SearchGangReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SearchGangReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SearchGangReq;

//             /**
//              * Verifies a SearchGangReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleResurgenceReq. */
//         interface IBattleResurgenceReq {
//         }

//         /** Represents a BattleResurgenceReq. */
//         class BattleResurgenceReq implements IBattleResurgenceReq {

//             /**
//              * Constructs a new BattleResurgenceReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleResurgenceReq);

//             /**
//              * Creates a new BattleResurgenceReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleResurgenceReq instance
//              */
//             public static create(properties?: luck.protobuf.IBattleResurgenceReq): luck.protobuf.BattleResurgenceReq;

//             /**
//              * Encodes the specified BattleResurgenceReq message. Does not implicitly {@link luck.protobuf.BattleResurgenceReq.verify|verify} messages.
//              * @param message BattleResurgenceReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleResurgenceReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleResurgenceReq message, length delimited. Does not implicitly {@link luck.protobuf.BattleResurgenceReq.verify|verify} messages.
//              * @param message BattleResurgenceReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleResurgenceReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleResurgenceReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleResurgenceReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleResurgenceReq;

//             /**
//              * Decodes a BattleResurgenceReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleResurgenceReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleResurgenceReq;

//             /**
//              * Verifies a BattleResurgenceReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ReconnectionReq. */
//         interface IReconnectionReq {

//             /** ReconnectionReq LogInKey */
//             LogInKey: string;
//         }

//         /** Represents a ReconnectionReq. */
//         class ReconnectionReq implements IReconnectionReq {

//             /**
//              * Constructs a new ReconnectionReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IReconnectionReq);

//             /** ReconnectionReq LogInKey. */
//             public LogInKey: string;

//             /**
//              * Creates a new ReconnectionReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ReconnectionReq instance
//              */
//             public static create(properties?: luck.protobuf.IReconnectionReq): luck.protobuf.ReconnectionReq;

//             /**
//              * Encodes the specified ReconnectionReq message. Does not implicitly {@link luck.protobuf.ReconnectionReq.verify|verify} messages.
//              * @param message ReconnectionReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IReconnectionReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ReconnectionReq message, length delimited. Does not implicitly {@link luck.protobuf.ReconnectionReq.verify|verify} messages.
//              * @param message ReconnectionReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IReconnectionReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ReconnectionReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ReconnectionReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ReconnectionReq;

//             /**
//              * Decodes a ReconnectionReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ReconnectionReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ReconnectionReq;

//             /**
//              * Verifies a ReconnectionReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a JiGuangRegisterReq. */
//         interface IJiGuangRegisterReq {

//             /** JiGuangRegisterReq registrationID */
//             registrationID?: (string|null);

//             /** JiGuangRegisterReq alias */
//             alias?: (string|null);

//             /** JiGuangRegisterReq tagList */
//             tagList?: (string[]|null);
//         }

//         /** Represents a JiGuangRegisterReq. */
//         class JiGuangRegisterReq implements IJiGuangRegisterReq {

//             /**
//              * Constructs a new JiGuangRegisterReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IJiGuangRegisterReq);

//             /** JiGuangRegisterReq registrationID. */
//             public registrationID: string;

//             /** JiGuangRegisterReq alias. */
//             public alias: string;

//             /** JiGuangRegisterReq tagList. */
//             public tagList: string[];

//             /**
//              * Creates a new JiGuangRegisterReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns JiGuangRegisterReq instance
//              */
//             public static create(properties?: luck.protobuf.IJiGuangRegisterReq): luck.protobuf.JiGuangRegisterReq;

//             /**
//              * Encodes the specified JiGuangRegisterReq message. Does not implicitly {@link luck.protobuf.JiGuangRegisterReq.verify|verify} messages.
//              * @param message JiGuangRegisterReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IJiGuangRegisterReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified JiGuangRegisterReq message, length delimited. Does not implicitly {@link luck.protobuf.JiGuangRegisterReq.verify|verify} messages.
//              * @param message JiGuangRegisterReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IJiGuangRegisterReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a JiGuangRegisterReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns JiGuangRegisterReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.JiGuangRegisterReq;

//             /**
//              * Decodes a JiGuangRegisterReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns JiGuangRegisterReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.JiGuangRegisterReq;

//             /**
//              * Verifies a JiGuangRegisterReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawTaskReq. */
//         interface IdrawTaskReq {

//             /** drawTaskReq taskId */
//             taskId: number;

//             /** drawTaskReq type */
//             type: number;
//         }

//         /** Represents a drawTaskReq. */
//         class drawTaskReq implements IdrawTaskReq {

//             /**
//              * Constructs a new drawTaskReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawTaskReq);

//             /** drawTaskReq taskId. */
//             public taskId: number;

//             /** drawTaskReq type. */
//             public type: number;

//             /**
//              * Creates a new drawTaskReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawTaskReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawTaskReq): luck.protobuf.drawTaskReq;

//             /**
//              * Encodes the specified drawTaskReq message. Does not implicitly {@link luck.protobuf.drawTaskReq.verify|verify} messages.
//              * @param message drawTaskReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawTaskReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawTaskReq message, length delimited. Does not implicitly {@link luck.protobuf.drawTaskReq.verify|verify} messages.
//              * @param message drawTaskReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawTaskReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawTaskReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawTaskReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawTaskReq;

//             /**
//              * Decodes a drawTaskReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawTaskReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawTaskReq;

//             /**
//              * Verifies a drawTaskReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawDailyVitalityRewardReq. */
//         interface IdrawDailyVitalityRewardReq {

//             /** drawDailyVitalityRewardReq dailyVitalityRewardId */
//             dailyVitalityRewardId: number;
//         }

//         /** Represents a drawDailyVitalityRewardReq. */
//         class drawDailyVitalityRewardReq implements IdrawDailyVitalityRewardReq {

//             /**
//              * Constructs a new drawDailyVitalityRewardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawDailyVitalityRewardReq);

//             /** drawDailyVitalityRewardReq dailyVitalityRewardId. */
//             public dailyVitalityRewardId: number;

//             /**
//              * Creates a new drawDailyVitalityRewardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawDailyVitalityRewardReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawDailyVitalityRewardReq): luck.protobuf.drawDailyVitalityRewardReq;

//             /**
//              * Encodes the specified drawDailyVitalityRewardReq message. Does not implicitly {@link luck.protobuf.drawDailyVitalityRewardReq.verify|verify} messages.
//              * @param message drawDailyVitalityRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawDailyVitalityRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawDailyVitalityRewardReq message, length delimited. Does not implicitly {@link luck.protobuf.drawDailyVitalityRewardReq.verify|verify} messages.
//              * @param message drawDailyVitalityRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawDailyVitalityRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawDailyVitalityRewardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawDailyVitalityRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawDailyVitalityRewardReq;

//             /**
//              * Decodes a drawDailyVitalityRewardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawDailyVitalityRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawDailyVitalityRewardReq;

//             /**
//              * Verifies a drawDailyVitalityRewardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a createPVETeamReq. */
//         interface IcreatePVETeamReq {

//             /** createPVETeamReq customsType */
//             customsType: number;

//             /** createPVETeamReq customsId */
//             customsId: number;
//         }

//         /** Represents a createPVETeamReq. */
//         class createPVETeamReq implements IcreatePVETeamReq {

//             /**
//              * Constructs a new createPVETeamReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IcreatePVETeamReq);

//             /** createPVETeamReq customsType. */
//             public customsType: number;

//             /** createPVETeamReq customsId. */
//             public customsId: number;

//             /**
//              * Creates a new createPVETeamReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns createPVETeamReq instance
//              */
//             public static create(properties?: luck.protobuf.IcreatePVETeamReq): luck.protobuf.createPVETeamReq;

//             /**
//              * Encodes the specified createPVETeamReq message. Does not implicitly {@link luck.protobuf.createPVETeamReq.verify|verify} messages.
//              * @param message createPVETeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IcreatePVETeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified createPVETeamReq message, length delimited. Does not implicitly {@link luck.protobuf.createPVETeamReq.verify|verify} messages.
//              * @param message createPVETeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IcreatePVETeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a createPVETeamReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns createPVETeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.createPVETeamReq;

//             /**
//              * Decodes a createPVETeamReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns createPVETeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.createPVETeamReq;

//             /**
//              * Verifies a createPVETeamReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVEInviteReq. */
//         interface IPVEInviteReq {

//             /** PVEInviteReq inviteId */
//             inviteId: (number|Long);
//         }

//         /** Represents a PVEInviteReq. */
//         class PVEInviteReq implements IPVEInviteReq {

//             /**
//              * Constructs a new PVEInviteReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVEInviteReq);

//             /** PVEInviteReq inviteId. */
//             public inviteId: (number|Long);

//             /**
//              * Creates a new PVEInviteReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVEInviteReq instance
//              */
//             public static create(properties?: luck.protobuf.IPVEInviteReq): luck.protobuf.PVEInviteReq;

//             /**
//              * Encodes the specified PVEInviteReq message. Does not implicitly {@link luck.protobuf.PVEInviteReq.verify|verify} messages.
//              * @param message PVEInviteReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVEInviteReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVEInviteReq message, length delimited. Does not implicitly {@link luck.protobuf.PVEInviteReq.verify|verify} messages.
//              * @param message PVEInviteReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVEInviteReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVEInviteReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVEInviteReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVEInviteReq;

//             /**
//              * Decodes a PVEInviteReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVEInviteReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVEInviteReq;

//             /**
//              * Verifies a PVEInviteReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an applyJoinTeamReq. */
//         interface IapplyJoinTeamReq {

//             /** applyJoinTeamReq teamId */
//             teamId: (number|Long);

//             /** applyJoinTeamReq inviteCode */
//             inviteCode?: (string|null);
//         }

//         /** Represents an applyJoinTeamReq. */
//         class applyJoinTeamReq implements IapplyJoinTeamReq {

//             /**
//              * Constructs a new applyJoinTeamReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IapplyJoinTeamReq);

//             /** applyJoinTeamReq teamId. */
//             public teamId: (number|Long);

//             /** applyJoinTeamReq inviteCode. */
//             public inviteCode: string;

//             /**
//              * Creates a new applyJoinTeamReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns applyJoinTeamReq instance
//              */
//             public static create(properties?: luck.protobuf.IapplyJoinTeamReq): luck.protobuf.applyJoinTeamReq;

//             /**
//              * Encodes the specified applyJoinTeamReq message. Does not implicitly {@link luck.protobuf.applyJoinTeamReq.verify|verify} messages.
//              * @param message applyJoinTeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IapplyJoinTeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified applyJoinTeamReq message, length delimited. Does not implicitly {@link luck.protobuf.applyJoinTeamReq.verify|verify} messages.
//              * @param message applyJoinTeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IapplyJoinTeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an applyJoinTeamReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns applyJoinTeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.applyJoinTeamReq;

//             /**
//              * Decodes an applyJoinTeamReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns applyJoinTeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.applyJoinTeamReq;

//             /**
//              * Verifies an applyJoinTeamReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an approveJoinTeamReq. */
//         interface IapproveJoinTeamReq {

//             /** approveJoinTeamReq memberId */
//             memberId: (number|Long);

//             /** approveJoinTeamReq isApprove */
//             isApprove: boolean;
//         }

//         /** Represents an approveJoinTeamReq. */
//         class approveJoinTeamReq implements IapproveJoinTeamReq {

//             /**
//              * Constructs a new approveJoinTeamReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IapproveJoinTeamReq);

//             /** approveJoinTeamReq memberId. */
//             public memberId: (number|Long);

//             /** approveJoinTeamReq isApprove. */
//             public isApprove: boolean;

//             /**
//              * Creates a new approveJoinTeamReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns approveJoinTeamReq instance
//              */
//             public static create(properties?: luck.protobuf.IapproveJoinTeamReq): luck.protobuf.approveJoinTeamReq;

//             /**
//              * Encodes the specified approveJoinTeamReq message. Does not implicitly {@link luck.protobuf.approveJoinTeamReq.verify|verify} messages.
//              * @param message approveJoinTeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IapproveJoinTeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified approveJoinTeamReq message, length delimited. Does not implicitly {@link luck.protobuf.approveJoinTeamReq.verify|verify} messages.
//              * @param message approveJoinTeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IapproveJoinTeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an approveJoinTeamReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns approveJoinTeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.approveJoinTeamReq;

//             /**
//              * Decodes an approveJoinTeamReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns approveJoinTeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.approveJoinTeamReq;

//             /**
//              * Verifies an approveJoinTeamReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVEPrepareReq. */
//         interface IPVEPrepareReq {
//         }

//         /** Represents a PVEPrepareReq. */
//         class PVEPrepareReq implements IPVEPrepareReq {

//             /**
//              * Constructs a new PVEPrepareReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVEPrepareReq);

//             /**
//              * Creates a new PVEPrepareReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVEPrepareReq instance
//              */
//             public static create(properties?: luck.protobuf.IPVEPrepareReq): luck.protobuf.PVEPrepareReq;

//             /**
//              * Encodes the specified PVEPrepareReq message. Does not implicitly {@link luck.protobuf.PVEPrepareReq.verify|verify} messages.
//              * @param message PVEPrepareReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVEPrepareReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVEPrepareReq message, length delimited. Does not implicitly {@link luck.protobuf.PVEPrepareReq.verify|verify} messages.
//              * @param message PVEPrepareReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVEPrepareReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVEPrepareReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVEPrepareReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVEPrepareReq;

//             /**
//              * Decodes a PVEPrepareReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVEPrepareReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVEPrepareReq;

//             /**
//              * Verifies a PVEPrepareReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVESelectCustomsReq. */
//         interface IPVESelectCustomsReq {

//             /** PVESelectCustomsReq customsType */
//             customsType: number;

//             /** PVESelectCustomsReq customsId */
//             customsId: number;
//         }

//         /** Represents a PVESelectCustomsReq. */
//         class PVESelectCustomsReq implements IPVESelectCustomsReq {

//             /**
//              * Constructs a new PVESelectCustomsReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVESelectCustomsReq);

//             /** PVESelectCustomsReq customsType. */
//             public customsType: number;

//             /** PVESelectCustomsReq customsId. */
//             public customsId: number;

//             /**
//              * Creates a new PVESelectCustomsReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVESelectCustomsReq instance
//              */
//             public static create(properties?: luck.protobuf.IPVESelectCustomsReq): luck.protobuf.PVESelectCustomsReq;

//             /**
//              * Encodes the specified PVESelectCustomsReq message. Does not implicitly {@link luck.protobuf.PVESelectCustomsReq.verify|verify} messages.
//              * @param message PVESelectCustomsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVESelectCustomsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVESelectCustomsReq message, length delimited. Does not implicitly {@link luck.protobuf.PVESelectCustomsReq.verify|verify} messages.
//              * @param message PVESelectCustomsReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVESelectCustomsReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVESelectCustomsReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVESelectCustomsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVESelectCustomsReq;

//             /**
//              * Decodes a PVESelectCustomsReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVESelectCustomsReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVESelectCustomsReq;

//             /**
//              * Verifies a PVESelectCustomsReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a QuitPVETeamReq. */
//         interface IQuitPVETeamReq {
//         }

//         /** Represents a QuitPVETeamReq. */
//         class QuitPVETeamReq implements IQuitPVETeamReq {

//             /**
//              * Constructs a new QuitPVETeamReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IQuitPVETeamReq);

//             /**
//              * Creates a new QuitPVETeamReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns QuitPVETeamReq instance
//              */
//             public static create(properties?: luck.protobuf.IQuitPVETeamReq): luck.protobuf.QuitPVETeamReq;

//             /**
//              * Encodes the specified QuitPVETeamReq message. Does not implicitly {@link luck.protobuf.QuitPVETeamReq.verify|verify} messages.
//              * @param message QuitPVETeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IQuitPVETeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified QuitPVETeamReq message, length delimited. Does not implicitly {@link luck.protobuf.QuitPVETeamReq.verify|verify} messages.
//              * @param message QuitPVETeamReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IQuitPVETeamReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a QuitPVETeamReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns QuitPVETeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.QuitPVETeamReq;

//             /**
//              * Decodes a QuitPVETeamReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns QuitPVETeamReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.QuitPVETeamReq;

//             /**
//              * Verifies a QuitPVETeamReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LoadGangShopReq. */
//         interface ILoadGangShopReq {
//         }

//         /** Represents a LoadGangShopReq. */
//         class LoadGangShopReq implements ILoadGangShopReq {

//             /**
//              * Constructs a new LoadGangShopReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILoadGangShopReq);

//             /**
//              * Creates a new LoadGangShopReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LoadGangShopReq instance
//              */
//             public static create(properties?: luck.protobuf.ILoadGangShopReq): luck.protobuf.LoadGangShopReq;

//             /**
//              * Encodes the specified LoadGangShopReq message. Does not implicitly {@link luck.protobuf.LoadGangShopReq.verify|verify} messages.
//              * @param message LoadGangShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILoadGangShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LoadGangShopReq message, length delimited. Does not implicitly {@link luck.protobuf.LoadGangShopReq.verify|verify} messages.
//              * @param message LoadGangShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILoadGangShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LoadGangShopReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LoadGangShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LoadGangShopReq;

//             /**
//              * Decodes a LoadGangShopReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LoadGangShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LoadGangShopReq;

//             /**
//              * Verifies a LoadGangShopReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetPlayerInfoReq. */
//         interface IGetPlayerInfoReq {

//             /** GetPlayerInfoReq playerIdList */
//             playerIdList?: ((number|Long)[]|null);
//         }

//         /** Represents a GetPlayerInfoReq. */
//         class GetPlayerInfoReq implements IGetPlayerInfoReq {

//             /**
//              * Constructs a new GetPlayerInfoReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetPlayerInfoReq);

//             /** GetPlayerInfoReq playerIdList. */
//             public playerIdList: (number|Long)[];

//             /**
//              * Creates a new GetPlayerInfoReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetPlayerInfoReq instance
//              */
//             public static create(properties?: luck.protobuf.IGetPlayerInfoReq): luck.protobuf.GetPlayerInfoReq;

//             /**
//              * Encodes the specified GetPlayerInfoReq message. Does not implicitly {@link luck.protobuf.GetPlayerInfoReq.verify|verify} messages.
//              * @param message GetPlayerInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetPlayerInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetPlayerInfoReq message, length delimited. Does not implicitly {@link luck.protobuf.GetPlayerInfoReq.verify|verify} messages.
//              * @param message GetPlayerInfoReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetPlayerInfoReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetPlayerInfoReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetPlayerInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetPlayerInfoReq;

//             /**
//              * Decodes a GetPlayerInfoReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetPlayerInfoReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetPlayerInfoReq;

//             /**
//              * Verifies a GetPlayerInfoReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVETeamStartBattleReq. */
//         interface IPVETeamStartBattleReq {
//         }

//         /** Represents a PVETeamStartBattleReq. */
//         class PVETeamStartBattleReq implements IPVETeamStartBattleReq {

//             /**
//              * Constructs a new PVETeamStartBattleReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVETeamStartBattleReq);

//             /**
//              * Creates a new PVETeamStartBattleReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVETeamStartBattleReq instance
//              */
//             public static create(properties?: luck.protobuf.IPVETeamStartBattleReq): luck.protobuf.PVETeamStartBattleReq;

//             /**
//              * Encodes the specified PVETeamStartBattleReq message. Does not implicitly {@link luck.protobuf.PVETeamStartBattleReq.verify|verify} messages.
//              * @param message PVETeamStartBattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVETeamStartBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVETeamStartBattleReq message, length delimited. Does not implicitly {@link luck.protobuf.PVETeamStartBattleReq.verify|verify} messages.
//              * @param message PVETeamStartBattleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVETeamStartBattleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVETeamStartBattleReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVETeamStartBattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVETeamStartBattleReq;

//             /**
//              * Decodes a PVETeamStartBattleReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVETeamStartBattleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVETeamStartBattleReq;

//             /**
//              * Verifies a PVETeamStartBattleReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gangShopBuyReq. */
//         interface IgangShopBuyReq {

//             /** gangShopBuyReq num */
//             num: number;

//             /** gangShopBuyReq goodsId */
//             goodsId: number;
//         }

//         /** Represents a gangShopBuyReq. */
//         class gangShopBuyReq implements IgangShopBuyReq {

//             /**
//              * Constructs a new gangShopBuyReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgangShopBuyReq);

//             /** gangShopBuyReq num. */
//             public num: number;

//             /** gangShopBuyReq goodsId. */
//             public goodsId: number;

//             /**
//              * Creates a new gangShopBuyReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gangShopBuyReq instance
//              */
//             public static create(properties?: luck.protobuf.IgangShopBuyReq): luck.protobuf.gangShopBuyReq;

//             /**
//              * Encodes the specified gangShopBuyReq message. Does not implicitly {@link luck.protobuf.gangShopBuyReq.verify|verify} messages.
//              * @param message gangShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgangShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gangShopBuyReq message, length delimited. Does not implicitly {@link luck.protobuf.gangShopBuyReq.verify|verify} messages.
//              * @param message gangShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgangShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gangShopBuyReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gangShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gangShopBuyReq;

//             /**
//              * Decodes a gangShopBuyReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gangShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gangShopBuyReq;

//             /**
//              * Verifies a gangShopBuyReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a playerFightingReq. */
//         interface IplayerFightingReq {
//         }

//         /** Represents a playerFightingReq. */
//         class playerFightingReq implements IplayerFightingReq {

//             /**
//              * Constructs a new playerFightingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IplayerFightingReq);

//             /**
//              * Creates a new playerFightingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns playerFightingReq instance
//              */
//             public static create(properties?: luck.protobuf.IplayerFightingReq): luck.protobuf.playerFightingReq;

//             /**
//              * Encodes the specified playerFightingReq message. Does not implicitly {@link luck.protobuf.playerFightingReq.verify|verify} messages.
//              * @param message playerFightingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IplayerFightingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified playerFightingReq message, length delimited. Does not implicitly {@link luck.protobuf.playerFightingReq.verify|verify} messages.
//              * @param message playerFightingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IplayerFightingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a playerFightingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns playerFightingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.playerFightingReq;

//             /**
//              * Decodes a playerFightingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns playerFightingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.playerFightingReq;

//             /**
//              * Verifies a playerFightingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a playerEquipFightingReq. */
//         interface IplayerEquipFightingReq {

//             /** playerEquipFightingReq uid */
//             uid?: (number|Long|null);

//             /** playerEquipFightingReq type */
//             type?: (number|null);

//             /** playerEquipFightingReq roleId */
//             roleId?: (number|null);
//         }

//         /** Represents a playerEquipFightingReq. */
//         class playerEquipFightingReq implements IplayerEquipFightingReq {

//             /**
//              * Constructs a new playerEquipFightingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IplayerEquipFightingReq);

//             /** playerEquipFightingReq uid. */
//             public uid: (number|Long);

//             /** playerEquipFightingReq type. */
//             public type: number;

//             /** playerEquipFightingReq roleId. */
//             public roleId: number;

//             /**
//              * Creates a new playerEquipFightingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns playerEquipFightingReq instance
//              */
//             public static create(properties?: luck.protobuf.IplayerEquipFightingReq): luck.protobuf.playerEquipFightingReq;

//             /**
//              * Encodes the specified playerEquipFightingReq message. Does not implicitly {@link luck.protobuf.playerEquipFightingReq.verify|verify} messages.
//              * @param message playerEquipFightingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IplayerEquipFightingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified playerEquipFightingReq message, length delimited. Does not implicitly {@link luck.protobuf.playerEquipFightingReq.verify|verify} messages.
//              * @param message playerEquipFightingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IplayerEquipFightingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a playerEquipFightingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns playerEquipFightingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.playerEquipFightingReq;

//             /**
//              * Decodes a playerEquipFightingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns playerEquipFightingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.playerEquipFightingReq;

//             /**
//              * Verifies a playerEquipFightingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a rankingReq. */
//         interface IrankingReq {

//             /** rankingReq type */
//             type: number;
//         }

//         /** Represents a rankingReq. */
//         class rankingReq implements IrankingReq {

//             /**
//              * Constructs a new rankingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrankingReq);

//             /** rankingReq type. */
//             public type: number;

//             /**
//              * Creates a new rankingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns rankingReq instance
//              */
//             public static create(properties?: luck.protobuf.IrankingReq): luck.protobuf.rankingReq;

//             /**
//              * Encodes the specified rankingReq message. Does not implicitly {@link luck.protobuf.rankingReq.verify|verify} messages.
//              * @param message rankingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrankingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified rankingReq message, length delimited. Does not implicitly {@link luck.protobuf.rankingReq.verify|verify} messages.
//              * @param message rankingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrankingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a rankingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns rankingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.rankingReq;

//             /**
//              * Decodes a rankingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns rankingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.rankingReq;

//             /**
//              * Verifies a rankingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gainAchievementSeriesAwardReq. */
//         interface IgainAchievementSeriesAwardReq {

//             /** gainAchievementSeriesAwardReq achievementSeriesId */
//             achievementSeriesId: number;

//             /** gainAchievementSeriesAwardReq type */
//             type: number;
//         }

//         /** Represents a gainAchievementSeriesAwardReq. */
//         class gainAchievementSeriesAwardReq implements IgainAchievementSeriesAwardReq {

//             /**
//              * Constructs a new gainAchievementSeriesAwardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgainAchievementSeriesAwardReq);

//             /** gainAchievementSeriesAwardReq achievementSeriesId. */
//             public achievementSeriesId: number;

//             /** gainAchievementSeriesAwardReq type. */
//             public type: number;

//             /**
//              * Creates a new gainAchievementSeriesAwardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gainAchievementSeriesAwardReq instance
//              */
//             public static create(properties?: luck.protobuf.IgainAchievementSeriesAwardReq): luck.protobuf.gainAchievementSeriesAwardReq;

//             /**
//              * Encodes the specified gainAchievementSeriesAwardReq message. Does not implicitly {@link luck.protobuf.gainAchievementSeriesAwardReq.verify|verify} messages.
//              * @param message gainAchievementSeriesAwardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgainAchievementSeriesAwardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gainAchievementSeriesAwardReq message, length delimited. Does not implicitly {@link luck.protobuf.gainAchievementSeriesAwardReq.verify|verify} messages.
//              * @param message gainAchievementSeriesAwardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgainAchievementSeriesAwardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gainAchievementSeriesAwardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gainAchievementSeriesAwardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gainAchievementSeriesAwardReq;

//             /**
//              * Decodes a gainAchievementSeriesAwardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gainAchievementSeriesAwardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gainAchievementSeriesAwardReq;

//             /**
//              * Verifies a gainAchievementSeriesAwardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawVipRewardReq. */
//         interface IdrawVipRewardReq {

//             /** drawVipRewardReq type */
//             type: number;
//         }

//         /** Represents a drawVipRewardReq. */
//         class drawVipRewardReq implements IdrawVipRewardReq {

//             /**
//              * Constructs a new drawVipRewardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawVipRewardReq);

//             /** drawVipRewardReq type. */
//             public type: number;

//             /**
//              * Creates a new drawVipRewardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawVipRewardReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawVipRewardReq): luck.protobuf.drawVipRewardReq;

//             /**
//              * Encodes the specified drawVipRewardReq message. Does not implicitly {@link luck.protobuf.drawVipRewardReq.verify|verify} messages.
//              * @param message drawVipRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawVipRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawVipRewardReq message, length delimited. Does not implicitly {@link luck.protobuf.drawVipRewardReq.verify|verify} messages.
//              * @param message drawVipRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawVipRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawVipRewardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawVipRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawVipRewardReq;

//             /**
//              * Decodes a drawVipRewardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawVipRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawVipRewardReq;

//             /**
//              * Verifies a drawVipRewardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a rechargeReq. */
//         interface IrechargeReq {

//             /** rechargeReq rechargeId */
//             rechargeId: number;
//         }

//         /** Represents a rechargeReq. */
//         class rechargeReq implements IrechargeReq {

//             /**
//              * Constructs a new rechargeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrechargeReq);

//             /** rechargeReq rechargeId. */
//             public rechargeId: number;

//             /**
//              * Creates a new rechargeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns rechargeReq instance
//              */
//             public static create(properties?: luck.protobuf.IrechargeReq): luck.protobuf.rechargeReq;

//             /**
//              * Encodes the specified rechargeReq message. Does not implicitly {@link luck.protobuf.rechargeReq.verify|verify} messages.
//              * @param message rechargeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrechargeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified rechargeReq message, length delimited. Does not implicitly {@link luck.protobuf.rechargeReq.verify|verify} messages.
//              * @param message rechargeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrechargeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a rechargeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns rechargeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.rechargeReq;

//             /**
//              * Decodes a rechargeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns rechargeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.rechargeReq;

//             /**
//              * Verifies a rechargeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a noticeReq. */
//         interface InoticeReq {
//         }

//         /** Represents a noticeReq. */
//         class noticeReq implements InoticeReq {

//             /**
//              * Constructs a new noticeReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.InoticeReq);

//             /**
//              * Creates a new noticeReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns noticeReq instance
//              */
//             public static create(properties?: luck.protobuf.InoticeReq): luck.protobuf.noticeReq;

//             /**
//              * Encodes the specified noticeReq message. Does not implicitly {@link luck.protobuf.noticeReq.verify|verify} messages.
//              * @param message noticeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.InoticeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified noticeReq message, length delimited. Does not implicitly {@link luck.protobuf.noticeReq.verify|verify} messages.
//              * @param message noticeReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.InoticeReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a noticeReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns noticeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.noticeReq;

//             /**
//              * Decodes a noticeReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns noticeReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.noticeReq;

//             /**
//              * Verifies a noticeReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an addBlackListReq. */
//         interface IaddBlackListReq {

//             /** addBlackListReq blackLId */
//             blackLId: (number|Long);
//         }

//         /** Represents an addBlackListReq. */
//         class addBlackListReq implements IaddBlackListReq {

//             /**
//              * Constructs a new addBlackListReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IaddBlackListReq);

//             /** addBlackListReq blackLId. */
//             public blackLId: (number|Long);

//             /**
//              * Creates a new addBlackListReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns addBlackListReq instance
//              */
//             public static create(properties?: luck.protobuf.IaddBlackListReq): luck.protobuf.addBlackListReq;

//             /**
//              * Encodes the specified addBlackListReq message. Does not implicitly {@link luck.protobuf.addBlackListReq.verify|verify} messages.
//              * @param message addBlackListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IaddBlackListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified addBlackListReq message, length delimited. Does not implicitly {@link luck.protobuf.addBlackListReq.verify|verify} messages.
//              * @param message addBlackListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IaddBlackListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an addBlackListReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns addBlackListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.addBlackListReq;

//             /**
//              * Decodes an addBlackListReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns addBlackListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.addBlackListReq;

//             /**
//              * Verifies an addBlackListReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a delBlackListReq. */
//         interface IdelBlackListReq {

//             /** delBlackListReq blackLId */
//             blackLId: (number|Long);
//         }

//         /** Represents a delBlackListReq. */
//         class delBlackListReq implements IdelBlackListReq {

//             /**
//              * Constructs a new delBlackListReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdelBlackListReq);

//             /** delBlackListReq blackLId. */
//             public blackLId: (number|Long);

//             /**
//              * Creates a new delBlackListReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns delBlackListReq instance
//              */
//             public static create(properties?: luck.protobuf.IdelBlackListReq): luck.protobuf.delBlackListReq;

//             /**
//              * Encodes the specified delBlackListReq message. Does not implicitly {@link luck.protobuf.delBlackListReq.verify|verify} messages.
//              * @param message delBlackListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdelBlackListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified delBlackListReq message, length delimited. Does not implicitly {@link luck.protobuf.delBlackListReq.verify|verify} messages.
//              * @param message delBlackListReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdelBlackListReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a delBlackListReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns delBlackListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.delBlackListReq;

//             /**
//              * Decodes a delBlackListReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns delBlackListReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.delBlackListReq;

//             /**
//              * Verifies a delBlackListReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a buyGrowthCapitalReq. */
//         interface IbuyGrowthCapitalReq {
//         }

//         /** Represents a buyGrowthCapitalReq. */
//         class buyGrowthCapitalReq implements IbuyGrowthCapitalReq {

//             /**
//              * Constructs a new buyGrowthCapitalReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IbuyGrowthCapitalReq);

//             /**
//              * Creates a new buyGrowthCapitalReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns buyGrowthCapitalReq instance
//              */
//             public static create(properties?: luck.protobuf.IbuyGrowthCapitalReq): luck.protobuf.buyGrowthCapitalReq;

//             /**
//              * Encodes the specified buyGrowthCapitalReq message. Does not implicitly {@link luck.protobuf.buyGrowthCapitalReq.verify|verify} messages.
//              * @param message buyGrowthCapitalReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IbuyGrowthCapitalReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified buyGrowthCapitalReq message, length delimited. Does not implicitly {@link luck.protobuf.buyGrowthCapitalReq.verify|verify} messages.
//              * @param message buyGrowthCapitalReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IbuyGrowthCapitalReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a buyGrowthCapitalReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns buyGrowthCapitalReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.buyGrowthCapitalReq;

//             /**
//              * Decodes a buyGrowthCapitalReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns buyGrowthCapitalReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.buyGrowthCapitalReq;

//             /**
//              * Verifies a buyGrowthCapitalReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a loadActivityShopReq. */
//         interface IloadActivityShopReq {
//         }

//         /** Represents a loadActivityShopReq. */
//         class loadActivityShopReq implements IloadActivityShopReq {

//             /**
//              * Constructs a new loadActivityShopReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IloadActivityShopReq);

//             /**
//              * Creates a new loadActivityShopReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns loadActivityShopReq instance
//              */
//             public static create(properties?: luck.protobuf.IloadActivityShopReq): luck.protobuf.loadActivityShopReq;

//             /**
//              * Encodes the specified loadActivityShopReq message. Does not implicitly {@link luck.protobuf.loadActivityShopReq.verify|verify} messages.
//              * @param message loadActivityShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IloadActivityShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified loadActivityShopReq message, length delimited. Does not implicitly {@link luck.protobuf.loadActivityShopReq.verify|verify} messages.
//              * @param message loadActivityShopReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IloadActivityShopReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a loadActivityShopReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns loadActivityShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.loadActivityShopReq;

//             /**
//              * Decodes a loadActivityShopReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns loadActivityShopReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.loadActivityShopReq;

//             /**
//              * Verifies a loadActivityShopReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an activityShopBuyReq. */
//         interface IactivityShopBuyReq {

//             /** activityShopBuyReq num */
//             num: number;

//             /** activityShopBuyReq goodsId */
//             goodsId: number;
//         }

//         /** Represents an activityShopBuyReq. */
//         class activityShopBuyReq implements IactivityShopBuyReq {

//             /**
//              * Constructs a new activityShopBuyReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IactivityShopBuyReq);

//             /** activityShopBuyReq num. */
//             public num: number;

//             /** activityShopBuyReq goodsId. */
//             public goodsId: number;

//             /**
//              * Creates a new activityShopBuyReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns activityShopBuyReq instance
//              */
//             public static create(properties?: luck.protobuf.IactivityShopBuyReq): luck.protobuf.activityShopBuyReq;

//             /**
//              * Encodes the specified activityShopBuyReq message. Does not implicitly {@link luck.protobuf.activityShopBuyReq.verify|verify} messages.
//              * @param message activityShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IactivityShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified activityShopBuyReq message, length delimited. Does not implicitly {@link luck.protobuf.activityShopBuyReq.verify|verify} messages.
//              * @param message activityShopBuyReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IactivityShopBuyReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an activityShopBuyReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns activityShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.activityShopBuyReq;

//             /**
//              * Decodes an activityShopBuyReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns activityShopBuyReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.activityShopBuyReq;

//             /**
//              * Verifies an activityShopBuyReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a getDiggingReq. */
//         interface IgetDiggingReq {
//         }

//         /** Represents a getDiggingReq. */
//         class getDiggingReq implements IgetDiggingReq {

//             /**
//              * Constructs a new getDiggingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgetDiggingReq);

//             /**
//              * Creates a new getDiggingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns getDiggingReq instance
//              */
//             public static create(properties?: luck.protobuf.IgetDiggingReq): luck.protobuf.getDiggingReq;

//             /**
//              * Encodes the specified getDiggingReq message. Does not implicitly {@link luck.protobuf.getDiggingReq.verify|verify} messages.
//              * @param message getDiggingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgetDiggingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified getDiggingReq message, length delimited. Does not implicitly {@link luck.protobuf.getDiggingReq.verify|verify} messages.
//              * @param message getDiggingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgetDiggingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a getDiggingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns getDiggingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.getDiggingReq;

//             /**
//              * Decodes a getDiggingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns getDiggingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.getDiggingReq;

//             /**
//              * Verifies a getDiggingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a refreshDiggingReq. */
//         interface IrefreshDiggingReq {

//             /** refreshDiggingReq mineId */
//             mineId: number;
//         }

//         /** Represents a refreshDiggingReq. */
//         class refreshDiggingReq implements IrefreshDiggingReq {

//             /**
//              * Constructs a new refreshDiggingReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrefreshDiggingReq);

//             /** refreshDiggingReq mineId. */
//             public mineId: number;

//             /**
//              * Creates a new refreshDiggingReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns refreshDiggingReq instance
//              */
//             public static create(properties?: luck.protobuf.IrefreshDiggingReq): luck.protobuf.refreshDiggingReq;

//             /**
//              * Encodes the specified refreshDiggingReq message. Does not implicitly {@link luck.protobuf.refreshDiggingReq.verify|verify} messages.
//              * @param message refreshDiggingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrefreshDiggingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified refreshDiggingReq message, length delimited. Does not implicitly {@link luck.protobuf.refreshDiggingReq.verify|verify} messages.
//              * @param message refreshDiggingReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrefreshDiggingReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a refreshDiggingReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns refreshDiggingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.refreshDiggingReq;

//             /**
//              * Decodes a refreshDiggingReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns refreshDiggingReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.refreshDiggingReq;

//             /**
//              * Verifies a refreshDiggingReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a getDiggingAwardReq. */
//         interface IgetDiggingAwardReq {

//             /** getDiggingAwardReq mineId */
//             mineId: number;
//         }

//         /** Represents a getDiggingAwardReq. */
//         class getDiggingAwardReq implements IgetDiggingAwardReq {

//             /**
//              * Constructs a new getDiggingAwardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgetDiggingAwardReq);

//             /** getDiggingAwardReq mineId. */
//             public mineId: number;

//             /**
//              * Creates a new getDiggingAwardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns getDiggingAwardReq instance
//              */
//             public static create(properties?: luck.protobuf.IgetDiggingAwardReq): luck.protobuf.getDiggingAwardReq;

//             /**
//              * Encodes the specified getDiggingAwardReq message. Does not implicitly {@link luck.protobuf.getDiggingAwardReq.verify|verify} messages.
//              * @param message getDiggingAwardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgetDiggingAwardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified getDiggingAwardReq message, length delimited. Does not implicitly {@link luck.protobuf.getDiggingAwardReq.verify|verify} messages.
//              * @param message getDiggingAwardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgetDiggingAwardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a getDiggingAwardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns getDiggingAwardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.getDiggingAwardReq;

//             /**
//              * Decodes a getDiggingAwardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns getDiggingAwardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.getDiggingAwardReq;

//             /**
//              * Verifies a getDiggingAwardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartDiggingPointReq. */
//         interface IStartDiggingPointReq {

//             /** StartDiggingPointReq checkNodeId */
//             checkNodeId: number;

//             /** StartDiggingPointReq mineId */
//             mineId: number;
//         }

//         /** Represents a StartDiggingPointReq. */
//         class StartDiggingPointReq implements IStartDiggingPointReq {

//             /**
//              * Constructs a new StartDiggingPointReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartDiggingPointReq);

//             /** StartDiggingPointReq checkNodeId. */
//             public checkNodeId: number;

//             /** StartDiggingPointReq mineId. */
//             public mineId: number;

//             /**
//              * Creates a new StartDiggingPointReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartDiggingPointReq instance
//              */
//             public static create(properties?: luck.protobuf.IStartDiggingPointReq): luck.protobuf.StartDiggingPointReq;

//             /**
//              * Encodes the specified StartDiggingPointReq message. Does not implicitly {@link luck.protobuf.StartDiggingPointReq.verify|verify} messages.
//              * @param message StartDiggingPointReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartDiggingPointReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartDiggingPointReq message, length delimited. Does not implicitly {@link luck.protobuf.StartDiggingPointReq.verify|verify} messages.
//              * @param message StartDiggingPointReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartDiggingPointReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartDiggingPointReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartDiggingPointReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartDiggingPointReq;

//             /**
//              * Decodes a StartDiggingPointReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartDiggingPointReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartDiggingPointReq;

//             /**
//              * Verifies a StartDiggingPointReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a FinishDiggingPointReq. */
//         interface IFinishDiggingPointReq {

//             /** FinishDiggingPointReq checkNodeId */
//             checkNodeId: number;

//             /** FinishDiggingPointReq fightResult */
//             fightResult: number;

//             /** FinishDiggingPointReq mineId */
//             mineId: number;
//         }

//         /** Represents a FinishDiggingPointReq. */
//         class FinishDiggingPointReq implements IFinishDiggingPointReq {

//             /**
//              * Constructs a new FinishDiggingPointReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IFinishDiggingPointReq);

//             /** FinishDiggingPointReq checkNodeId. */
//             public checkNodeId: number;

//             /** FinishDiggingPointReq fightResult. */
//             public fightResult: number;

//             /** FinishDiggingPointReq mineId. */
//             public mineId: number;

//             /**
//              * Creates a new FinishDiggingPointReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns FinishDiggingPointReq instance
//              */
//             public static create(properties?: luck.protobuf.IFinishDiggingPointReq): luck.protobuf.FinishDiggingPointReq;

//             /**
//              * Encodes the specified FinishDiggingPointReq message. Does not implicitly {@link luck.protobuf.FinishDiggingPointReq.verify|verify} messages.
//              * @param message FinishDiggingPointReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IFinishDiggingPointReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified FinishDiggingPointReq message, length delimited. Does not implicitly {@link luck.protobuf.FinishDiggingPointReq.verify|verify} messages.
//              * @param message FinishDiggingPointReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IFinishDiggingPointReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a FinishDiggingPointReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns FinishDiggingPointReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.FinishDiggingPointReq;

//             /**
//              * Decodes a FinishDiggingPointReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns FinishDiggingPointReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.FinishDiggingPointReq;

//             /**
//              * Verifies a FinishDiggingPointReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawActivityTaskRewardReq. */
//         interface IdrawActivityTaskRewardReq {

//             /** drawActivityTaskRewardReq activityId */
//             activityId: number;
//         }

//         /** Represents a drawActivityTaskRewardReq. */
//         class drawActivityTaskRewardReq implements IdrawActivityTaskRewardReq {

//             /**
//              * Constructs a new drawActivityTaskRewardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawActivityTaskRewardReq);

//             /** drawActivityTaskRewardReq activityId. */
//             public activityId: number;

//             /**
//              * Creates a new drawActivityTaskRewardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawActivityTaskRewardReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawActivityTaskRewardReq): luck.protobuf.drawActivityTaskRewardReq;

//             /**
//              * Encodes the specified drawActivityTaskRewardReq message. Does not implicitly {@link luck.protobuf.drawActivityTaskRewardReq.verify|verify} messages.
//              * @param message drawActivityTaskRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawActivityTaskRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawActivityTaskRewardReq message, length delimited. Does not implicitly {@link luck.protobuf.drawActivityTaskRewardReq.verify|verify} messages.
//              * @param message drawActivityTaskRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawActivityTaskRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawActivityTaskRewardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawActivityTaskRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawActivityTaskRewardReq;

//             /**
//              * Decodes a drawActivityTaskRewardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawActivityTaskRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawActivityTaskRewardReq;

//             /**
//              * Verifies a drawActivityTaskRewardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an activityLotteryReq. */
//         interface IactivityLotteryReq {

//             /** activityLotteryReq activityId */
//             activityId: number;
//         }

//         /** Represents an activityLotteryReq. */
//         class activityLotteryReq implements IactivityLotteryReq {

//             /**
//              * Constructs a new activityLotteryReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IactivityLotteryReq);

//             /** activityLotteryReq activityId. */
//             public activityId: number;

//             /**
//              * Creates a new activityLotteryReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns activityLotteryReq instance
//              */
//             public static create(properties?: luck.protobuf.IactivityLotteryReq): luck.protobuf.activityLotteryReq;

//             /**
//              * Encodes the specified activityLotteryReq message. Does not implicitly {@link luck.protobuf.activityLotteryReq.verify|verify} messages.
//              * @param message activityLotteryReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IactivityLotteryReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified activityLotteryReq message, length delimited. Does not implicitly {@link luck.protobuf.activityLotteryReq.verify|verify} messages.
//              * @param message activityLotteryReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IactivityLotteryReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an activityLotteryReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns activityLotteryReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.activityLotteryReq;

//             /**
//              * Decodes an activityLotteryReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns activityLotteryReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.activityLotteryReq;

//             /**
//              * Verifies an activityLotteryReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeNameReq. */
//         interface IchangeNameReq {

//             /** changeNameReq name */
//             name: string;
//         }

//         /** Represents a changeNameReq. */
//         class changeNameReq implements IchangeNameReq {

//             /**
//              * Constructs a new changeNameReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeNameReq);

//             /** changeNameReq name. */
//             public name: string;

//             /**
//              * Creates a new changeNameReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeNameReq instance
//              */
//             public static create(properties?: luck.protobuf.IchangeNameReq): luck.protobuf.changeNameReq;

//             /**
//              * Encodes the specified changeNameReq message. Does not implicitly {@link luck.protobuf.changeNameReq.verify|verify} messages.
//              * @param message changeNameReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeNameReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeNameReq message, length delimited. Does not implicitly {@link luck.protobuf.changeNameReq.verify|verify} messages.
//              * @param message changeNameReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeNameReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeNameReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeNameReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeNameReq;

//             /**
//              * Decodes a changeNameReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeNameReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeNameReq;

//             /**
//              * Verifies a changeNameReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a saveNoviceGuideNumReq. */
//         interface IsaveNoviceGuideNumReq {

//             /** saveNoviceGuideNumReq num */
//             num: number;
//         }

//         /** Represents a saveNoviceGuideNumReq. */
//         class saveNoviceGuideNumReq implements IsaveNoviceGuideNumReq {

//             /**
//              * Constructs a new saveNoviceGuideNumReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsaveNoviceGuideNumReq);

//             /** saveNoviceGuideNumReq num. */
//             public num: number;

//             /**
//              * Creates a new saveNoviceGuideNumReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns saveNoviceGuideNumReq instance
//              */
//             public static create(properties?: luck.protobuf.IsaveNoviceGuideNumReq): luck.protobuf.saveNoviceGuideNumReq;

//             /**
//              * Encodes the specified saveNoviceGuideNumReq message. Does not implicitly {@link luck.protobuf.saveNoviceGuideNumReq.verify|verify} messages.
//              * @param message saveNoviceGuideNumReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsaveNoviceGuideNumReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified saveNoviceGuideNumReq message, length delimited. Does not implicitly {@link luck.protobuf.saveNoviceGuideNumReq.verify|verify} messages.
//              * @param message saveNoviceGuideNumReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsaveNoviceGuideNumReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a saveNoviceGuideNumReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns saveNoviceGuideNumReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.saveNoviceGuideNumReq;

//             /**
//              * Decodes a saveNoviceGuideNumReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns saveNoviceGuideNumReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.saveNoviceGuideNumReq;

//             /**
//              * Verifies a saveNoviceGuideNumReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawMonthCardReq. */
//         interface IdrawMonthCardReq {

//             /** drawMonthCardReq type */
//             type: number;
//         }

//         /** Represents a drawMonthCardReq. */
//         class drawMonthCardReq implements IdrawMonthCardReq {

//             /**
//              * Constructs a new drawMonthCardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawMonthCardReq);

//             /** drawMonthCardReq type. */
//             public type: number;

//             /**
//              * Creates a new drawMonthCardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawMonthCardReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawMonthCardReq): luck.protobuf.drawMonthCardReq;

//             /**
//              * Encodes the specified drawMonthCardReq message. Does not implicitly {@link luck.protobuf.drawMonthCardReq.verify|verify} messages.
//              * @param message drawMonthCardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawMonthCardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawMonthCardReq message, length delimited. Does not implicitly {@link luck.protobuf.drawMonthCardReq.verify|verify} messages.
//              * @param message drawMonthCardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawMonthCardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawMonthCardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawMonthCardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawMonthCardReq;

//             /**
//              * Decodes a drawMonthCardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawMonthCardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawMonthCardReq;

//             /**
//              * Verifies a drawMonthCardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a roleChatReq. */
//         interface IroleChatReq {

//             /** roleChatReq roleId */
//             roleId: number;

//             /** roleChatReq startId */
//             startId: number;

//             /** roleChatReq nowId */
//             nowId: number;
//         }

//         /** Represents a roleChatReq. */
//         class roleChatReq implements IroleChatReq {

//             /**
//              * Constructs a new roleChatReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IroleChatReq);

//             /** roleChatReq roleId. */
//             public roleId: number;

//             /** roleChatReq startId. */
//             public startId: number;

//             /** roleChatReq nowId. */
//             public nowId: number;

//             /**
//              * Creates a new roleChatReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns roleChatReq instance
//              */
//             public static create(properties?: luck.protobuf.IroleChatReq): luck.protobuf.roleChatReq;

//             /**
//              * Encodes the specified roleChatReq message. Does not implicitly {@link luck.protobuf.roleChatReq.verify|verify} messages.
//              * @param message roleChatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IroleChatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified roleChatReq message, length delimited. Does not implicitly {@link luck.protobuf.roleChatReq.verify|verify} messages.
//              * @param message roleChatReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IroleChatReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a roleChatReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns roleChatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.roleChatReq;

//             /**
//              * Decodes a roleChatReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns roleChatReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.roleChatReq;

//             /**
//              * Verifies a roleChatReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a roleInteractionReq. */
//         interface IroleInteractionReq {

//             /** roleInteractionReq roleId */
//             roleId: number;

//             /** roleInteractionReq roleInteractionId */
//             roleInteractionId: number;

//             /** roleInteractionReq interactionId */
//             interactionId: number;

//             /** roleInteractionReq num */
//             num: number;
//         }

//         /** Represents a roleInteractionReq. */
//         class roleInteractionReq implements IroleInteractionReq {

//             /**
//              * Constructs a new roleInteractionReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IroleInteractionReq);

//             /** roleInteractionReq roleId. */
//             public roleId: number;

//             /** roleInteractionReq roleInteractionId. */
//             public roleInteractionId: number;

//             /** roleInteractionReq interactionId. */
//             public interactionId: number;

//             /** roleInteractionReq num. */
//             public num: number;

//             /**
//              * Creates a new roleInteractionReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns roleInteractionReq instance
//              */
//             public static create(properties?: luck.protobuf.IroleInteractionReq): luck.protobuf.roleInteractionReq;

//             /**
//              * Encodes the specified roleInteractionReq message. Does not implicitly {@link luck.protobuf.roleInteractionReq.verify|verify} messages.
//              * @param message roleInteractionReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IroleInteractionReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified roleInteractionReq message, length delimited. Does not implicitly {@link luck.protobuf.roleInteractionReq.verify|verify} messages.
//              * @param message roleInteractionReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IroleInteractionReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a roleInteractionReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns roleInteractionReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.roleInteractionReq;

//             /**
//              * Decodes a roleInteractionReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns roleInteractionReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.roleInteractionReq;

//             /**
//              * Verifies a roleInteractionReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a strokeRoleReq. */
//         interface IstrokeRoleReq {

//             /** strokeRoleReq roleId */
//             roleId: number;

//             /** strokeRoleReq actionId */
//             actionId: number;
//         }

//         /** Represents a strokeRoleReq. */
//         class strokeRoleReq implements IstrokeRoleReq {

//             /**
//              * Constructs a new strokeRoleReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IstrokeRoleReq);

//             /** strokeRoleReq roleId. */
//             public roleId: number;

//             /** strokeRoleReq actionId. */
//             public actionId: number;

//             /**
//              * Creates a new strokeRoleReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns strokeRoleReq instance
//              */
//             public static create(properties?: luck.protobuf.IstrokeRoleReq): luck.protobuf.strokeRoleReq;

//             /**
//              * Encodes the specified strokeRoleReq message. Does not implicitly {@link luck.protobuf.strokeRoleReq.verify|verify} messages.
//              * @param message strokeRoleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IstrokeRoleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified strokeRoleReq message, length delimited. Does not implicitly {@link luck.protobuf.strokeRoleReq.verify|verify} messages.
//              * @param message strokeRoleReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IstrokeRoleReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a strokeRoleReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns strokeRoleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.strokeRoleReq;

//             /**
//              * Decodes a strokeRoleReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns strokeRoleReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.strokeRoleReq;

//             /**
//              * Verifies a strokeRoleReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeRoleImageReq. */
//         interface IchangeRoleImageReq {

//             /** changeRoleImageReq roleId */
//             roleId: number;

//             /** changeRoleImageReq imageId */
//             imageId: number;
//         }

//         /** Represents a changeRoleImageReq. */
//         class changeRoleImageReq implements IchangeRoleImageReq {

//             /**
//              * Constructs a new changeRoleImageReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeRoleImageReq);

//             /** changeRoleImageReq roleId. */
//             public roleId: number;

//             /** changeRoleImageReq imageId. */
//             public imageId: number;

//             /**
//              * Creates a new changeRoleImageReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeRoleImageReq instance
//              */
//             public static create(properties?: luck.protobuf.IchangeRoleImageReq): luck.protobuf.changeRoleImageReq;

//             /**
//              * Encodes the specified changeRoleImageReq message. Does not implicitly {@link luck.protobuf.changeRoleImageReq.verify|verify} messages.
//              * @param message changeRoleImageReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeRoleImageReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeRoleImageReq message, length delimited. Does not implicitly {@link luck.protobuf.changeRoleImageReq.verify|verify} messages.
//              * @param message changeRoleImageReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeRoleImageReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeRoleImageReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeRoleImageReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeRoleImageReq;

//             /**
//              * Decodes a changeRoleImageReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeRoleImageReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeRoleImageReq;

//             /**
//              * Verifies a changeRoleImageReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeHeadPortraitReq. */
//         interface IchangeHeadPortraitReq {

//             /** changeHeadPortraitReq headPortraitId */
//             headPortraitId: number;
//         }

//         /** Represents a changeHeadPortraitReq. */
//         class changeHeadPortraitReq implements IchangeHeadPortraitReq {

//             /**
//              * Constructs a new changeHeadPortraitReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeHeadPortraitReq);

//             /** changeHeadPortraitReq headPortraitId. */
//             public headPortraitId: number;

//             /**
//              * Creates a new changeHeadPortraitReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeHeadPortraitReq instance
//              */
//             public static create(properties?: luck.protobuf.IchangeHeadPortraitReq): luck.protobuf.changeHeadPortraitReq;

//             /**
//              * Encodes the specified changeHeadPortraitReq message. Does not implicitly {@link luck.protobuf.changeHeadPortraitReq.verify|verify} messages.
//              * @param message changeHeadPortraitReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeHeadPortraitReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeHeadPortraitReq message, length delimited. Does not implicitly {@link luck.protobuf.changeHeadPortraitReq.verify|verify} messages.
//              * @param message changeHeadPortraitReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeHeadPortraitReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeHeadPortraitReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeHeadPortraitReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeHeadPortraitReq;

//             /**
//              * Decodes a changeHeadPortraitReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeHeadPortraitReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeHeadPortraitReq;

//             /**
//              * Verifies a changeHeadPortraitReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeRahmenReq. */
//         interface IchangeRahmenReq {

//             /** changeRahmenReq RahmenId */
//             RahmenId: number;
//         }

//         /** Represents a changeRahmenReq. */
//         class changeRahmenReq implements IchangeRahmenReq {

//             /**
//              * Constructs a new changeRahmenReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeRahmenReq);

//             /** changeRahmenReq RahmenId. */
//             public RahmenId: number;

//             /**
//              * Creates a new changeRahmenReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeRahmenReq instance
//              */
//             public static create(properties?: luck.protobuf.IchangeRahmenReq): luck.protobuf.changeRahmenReq;

//             /**
//              * Encodes the specified changeRahmenReq message. Does not implicitly {@link luck.protobuf.changeRahmenReq.verify|verify} messages.
//              * @param message changeRahmenReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeRahmenReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeRahmenReq message, length delimited. Does not implicitly {@link luck.protobuf.changeRahmenReq.verify|verify} messages.
//              * @param message changeRahmenReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeRahmenReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeRahmenReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeRahmenReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeRahmenReq;

//             /**
//              * Decodes a changeRahmenReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeRahmenReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeRahmenReq;

//             /**
//              * Verifies a changeRahmenReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a giveRoleGiftReq. */
//         interface IgiveRoleGiftReq {

//             /** giveRoleGiftReq roleId */
//             roleId: number;

//             /** giveRoleGiftReq giftId */
//             giftId: number;

//             /** giveRoleGiftReq num */
//             num: number;
//         }

//         /** Represents a giveRoleGiftReq. */
//         class giveRoleGiftReq implements IgiveRoleGiftReq {

//             /**
//              * Constructs a new giveRoleGiftReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgiveRoleGiftReq);

//             /** giveRoleGiftReq roleId. */
//             public roleId: number;

//             /** giveRoleGiftReq giftId. */
//             public giftId: number;

//             /** giveRoleGiftReq num. */
//             public num: number;

//             /**
//              * Creates a new giveRoleGiftReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns giveRoleGiftReq instance
//              */
//             public static create(properties?: luck.protobuf.IgiveRoleGiftReq): luck.protobuf.giveRoleGiftReq;

//             /**
//              * Encodes the specified giveRoleGiftReq message. Does not implicitly {@link luck.protobuf.giveRoleGiftReq.verify|verify} messages.
//              * @param message giveRoleGiftReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgiveRoleGiftReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified giveRoleGiftReq message, length delimited. Does not implicitly {@link luck.protobuf.giveRoleGiftReq.verify|verify} messages.
//              * @param message giveRoleGiftReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgiveRoleGiftReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a giveRoleGiftReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns giveRoleGiftReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.giveRoleGiftReq;

//             /**
//              * Decodes a giveRoleGiftReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns giveRoleGiftReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.giveRoleGiftReq;

//             /**
//              * Verifies a giveRoleGiftReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gangSginInReq. */
//         interface IgangSginInReq {
//         }

//         /** Represents a gangSginInReq. */
//         class gangSginInReq implements IgangSginInReq {

//             /**
//              * Constructs a new gangSginInReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgangSginInReq);

//             /**
//              * Creates a new gangSginInReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gangSginInReq instance
//              */
//             public static create(properties?: luck.protobuf.IgangSginInReq): luck.protobuf.gangSginInReq;

//             /**
//              * Encodes the specified gangSginInReq message. Does not implicitly {@link luck.protobuf.gangSginInReq.verify|verify} messages.
//              * @param message gangSginInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgangSginInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gangSginInReq message, length delimited. Does not implicitly {@link luck.protobuf.gangSginInReq.verify|verify} messages.
//              * @param message gangSginInReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgangSginInReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gangSginInReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gangSginInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gangSginInReq;

//             /**
//              * Decodes a gangSginInReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gangSginInReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gangSginInReq;

//             /**
//              * Verifies a gangSginInReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawGangVitalityRewardReq. */
//         interface IdrawGangVitalityRewardReq {

//             /** drawGangVitalityRewardReq gangVitalityRewardId */
//             gangVitalityRewardId: number;
//         }

//         /** Represents a drawGangVitalityRewardReq. */
//         class drawGangVitalityRewardReq implements IdrawGangVitalityRewardReq {

//             /**
//              * Constructs a new drawGangVitalityRewardReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawGangVitalityRewardReq);

//             /** drawGangVitalityRewardReq gangVitalityRewardId. */
//             public gangVitalityRewardId: number;

//             /**
//              * Creates a new drawGangVitalityRewardReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawGangVitalityRewardReq instance
//              */
//             public static create(properties?: luck.protobuf.IdrawGangVitalityRewardReq): luck.protobuf.drawGangVitalityRewardReq;

//             /**
//              * Encodes the specified drawGangVitalityRewardReq message. Does not implicitly {@link luck.protobuf.drawGangVitalityRewardReq.verify|verify} messages.
//              * @param message drawGangVitalityRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawGangVitalityRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawGangVitalityRewardReq message, length delimited. Does not implicitly {@link luck.protobuf.drawGangVitalityRewardReq.verify|verify} messages.
//              * @param message drawGangVitalityRewardReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawGangVitalityRewardReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawGangVitalityRewardReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawGangVitalityRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawGangVitalityRewardReq;

//             /**
//              * Decodes a drawGangVitalityRewardReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawGangVitalityRewardReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawGangVitalityRewardReq;

//             /**
//              * Verifies a drawGangVitalityRewardReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a savePersonMessageReq. */
//         interface IsavePersonMessageReq {

//             /** savePersonMessageReq personManifesto */
//             personManifesto?: (string|null);
//         }

//         /** Represents a savePersonMessageReq. */
//         class savePersonMessageReq implements IsavePersonMessageReq {

//             /**
//              * Constructs a new savePersonMessageReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsavePersonMessageReq);

//             /** savePersonMessageReq personManifesto. */
//             public personManifesto: string;

//             /**
//              * Creates a new savePersonMessageReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns savePersonMessageReq instance
//              */
//             public static create(properties?: luck.protobuf.IsavePersonMessageReq): luck.protobuf.savePersonMessageReq;

//             /**
//              * Encodes the specified savePersonMessageReq message. Does not implicitly {@link luck.protobuf.savePersonMessageReq.verify|verify} messages.
//              * @param message savePersonMessageReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsavePersonMessageReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified savePersonMessageReq message, length delimited. Does not implicitly {@link luck.protobuf.savePersonMessageReq.verify|verify} messages.
//              * @param message savePersonMessageReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsavePersonMessageReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a savePersonMessageReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns savePersonMessageReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.savePersonMessageReq;

//             /**
//              * Decodes a savePersonMessageReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns savePersonMessageReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.savePersonMessageReq;

//             /**
//              * Verifies a savePersonMessageReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SendGameDataReq. */
//         interface ISendGameDataReq {

//             /** SendGameDataReq gameBulletDataPb */
//             gameBulletDataPb: luck.protobuf.IGameBulletDataPB;
//         }

//         /** Represents a SendGameDataReq. */
//         class SendGameDataReq implements ISendGameDataReq {

//             /**
//              * Constructs a new SendGameDataReq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISendGameDataReq);

//             /** SendGameDataReq gameBulletDataPb. */
//             public gameBulletDataPb: luck.protobuf.IGameBulletDataPB;

//             /**
//              * Creates a new SendGameDataReq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SendGameDataReq instance
//              */
//             public static create(properties?: luck.protobuf.ISendGameDataReq): luck.protobuf.SendGameDataReq;

//             /**
//              * Encodes the specified SendGameDataReq message. Does not implicitly {@link luck.protobuf.SendGameDataReq.verify|verify} messages.
//              * @param message SendGameDataReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISendGameDataReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SendGameDataReq message, length delimited. Does not implicitly {@link luck.protobuf.SendGameDataReq.verify|verify} messages.
//              * @param message SendGameDataReq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISendGameDataReq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SendGameDataReq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SendGameDataReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SendGameDataReq;

//             /**
//              * Decodes a SendGameDataReq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SendGameDataReq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SendGameDataReq;

//             /**
//              * Verifies a SendGameDataReq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LogInResp. */
//         interface ILogInResp {

//             /** LogInResp result */
//             result: number;

//             /** LogInResp playerPB */
//             playerPB?: (luck.protobuf.IPlayerPB|null);
//         }

//         /** Represents a LogInResp. */
//         class LogInResp implements ILogInResp {

//             /**
//              * Constructs a new LogInResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILogInResp);

//             /** LogInResp result. */
//             public result: number;

//             /** LogInResp playerPB. */
//             public playerPB?: (luck.protobuf.IPlayerPB|null);

//             /**
//              * Creates a new LogInResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LogInResp instance
//              */
//             public static create(properties?: luck.protobuf.ILogInResp): luck.protobuf.LogInResp;

//             /**
//              * Encodes the specified LogInResp message. Does not implicitly {@link luck.protobuf.LogInResp.verify|verify} messages.
//              * @param message LogInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILogInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LogInResp message, length delimited. Does not implicitly {@link luck.protobuf.LogInResp.verify|verify} messages.
//              * @param message LogInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILogInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LogInResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LogInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LogInResp;

//             /**
//              * Decodes a LogInResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LogInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LogInResp;

//             /**
//              * Verifies a LogInResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a HeartBeatRsep. */
//         interface IHeartBeatRsep {

//             /** HeartBeatRsep result */
//             result: number;
//         }

//         /** Represents a HeartBeatRsep. */
//         class HeartBeatRsep implements IHeartBeatRsep {

//             /**
//              * Constructs a new HeartBeatRsep.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IHeartBeatRsep);

//             /** HeartBeatRsep result. */
//             public result: number;

//             /**
//              * Creates a new HeartBeatRsep instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns HeartBeatRsep instance
//              */
//             public static create(properties?: luck.protobuf.IHeartBeatRsep): luck.protobuf.HeartBeatRsep;

//             /**
//              * Encodes the specified HeartBeatRsep message. Does not implicitly {@link luck.protobuf.HeartBeatRsep.verify|verify} messages.
//              * @param message HeartBeatRsep message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IHeartBeatRsep, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified HeartBeatRsep message, length delimited. Does not implicitly {@link luck.protobuf.HeartBeatRsep.verify|verify} messages.
//              * @param message HeartBeatRsep message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IHeartBeatRsep, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a HeartBeatRsep message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns HeartBeatRsep
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.HeartBeatRsep;

//             /**
//              * Decodes a HeartBeatRsep message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns HeartBeatRsep
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.HeartBeatRsep;

//             /**
//              * Verifies a HeartBeatRsep message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PingResp. */
//         interface IPingResp {
//         }

//         /** Represents a PingResp. */
//         class PingResp implements IPingResp {

//             /**
//              * Constructs a new PingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPingResp);

//             /**
//              * Creates a new PingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PingResp instance
//              */
//             public static create(properties?: luck.protobuf.IPingResp): luck.protobuf.PingResp;

//             /**
//              * Encodes the specified PingResp message. Does not implicitly {@link luck.protobuf.PingResp.verify|verify} messages.
//              * @param message PingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PingResp message, length delimited. Does not implicitly {@link luck.protobuf.PingResp.verify|verify} messages.
//              * @param message PingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PingResp;

//             /**
//              * Decodes a PingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PingResp;

//             /**
//              * Verifies a PingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreatePlayerResp. */
//         interface ICreatePlayerResp {

//             /** CreatePlayerResp result */
//             result: number;

//             /** CreatePlayerResp playerPB */
//             playerPB?: (luck.protobuf.IPlayerPB|null);
//         }

//         /** Represents a CreatePlayerResp. */
//         class CreatePlayerResp implements ICreatePlayerResp {

//             /**
//              * Constructs a new CreatePlayerResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreatePlayerResp);

//             /** CreatePlayerResp result. */
//             public result: number;

//             /** CreatePlayerResp playerPB. */
//             public playerPB?: (luck.protobuf.IPlayerPB|null);

//             /**
//              * Creates a new CreatePlayerResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreatePlayerResp instance
//              */
//             public static create(properties?: luck.protobuf.ICreatePlayerResp): luck.protobuf.CreatePlayerResp;

//             /**
//              * Encodes the specified CreatePlayerResp message. Does not implicitly {@link luck.protobuf.CreatePlayerResp.verify|verify} messages.
//              * @param message CreatePlayerResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreatePlayerResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreatePlayerResp message, length delimited. Does not implicitly {@link luck.protobuf.CreatePlayerResp.verify|verify} messages.
//              * @param message CreatePlayerResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreatePlayerResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreatePlayerResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreatePlayerResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreatePlayerResp;

//             /**
//              * Decodes a CreatePlayerResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreatePlayerResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreatePlayerResp;

//             /**
//              * Verifies a CreatePlayerResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildWeaponResp. */
//         interface IGmBuildWeaponResp {

//             /** GmBuildWeaponResp result */
//             result: number;

//             /** GmBuildWeaponResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);
//         }

//         /** Represents a GmBuildWeaponResp. */
//         class GmBuildWeaponResp implements IGmBuildWeaponResp {

//             /**
//              * Constructs a new GmBuildWeaponResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildWeaponResp);

//             /** GmBuildWeaponResp result. */
//             public result: number;

//             /** GmBuildWeaponResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /**
//              * Creates a new GmBuildWeaponResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildWeaponResp instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildWeaponResp): luck.protobuf.GmBuildWeaponResp;

//             /**
//              * Encodes the specified GmBuildWeaponResp message. Does not implicitly {@link luck.protobuf.GmBuildWeaponResp.verify|verify} messages.
//              * @param message GmBuildWeaponResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildWeaponResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildWeaponResp message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildWeaponResp.verify|verify} messages.
//              * @param message GmBuildWeaponResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildWeaponResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildWeaponResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildWeaponResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildWeaponResp;

//             /**
//              * Decodes a GmBuildWeaponResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildWeaponResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildWeaponResp;

//             /**
//              * Verifies a GmBuildWeaponResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildCardResp. */
//         interface IGmBuildCardResp {

//             /** GmBuildCardResp result */
//             result: number;

//             /** GmBuildCardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);
//         }

//         /** Represents a GmBuildCardResp. */
//         class GmBuildCardResp implements IGmBuildCardResp {

//             /**
//              * Constructs a new GmBuildCardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildCardResp);

//             /** GmBuildCardResp result. */
//             public result: number;

//             /** GmBuildCardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /**
//              * Creates a new GmBuildCardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildCardResp instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildCardResp): luck.protobuf.GmBuildCardResp;

//             /**
//              * Encodes the specified GmBuildCardResp message. Does not implicitly {@link luck.protobuf.GmBuildCardResp.verify|verify} messages.
//              * @param message GmBuildCardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildCardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildCardResp message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildCardResp.verify|verify} messages.
//              * @param message GmBuildCardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildCardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildCardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildCardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildCardResp;

//             /**
//              * Decodes a GmBuildCardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildCardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildCardResp;

//             /**
//              * Verifies a GmBuildCardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmBuildClothesResp. */
//         interface IGmBuildClothesResp {

//             /** GmBuildClothesResp result */
//             result: number;

//             /** GmBuildClothesResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);
//         }

//         /** Represents a GmBuildClothesResp. */
//         class GmBuildClothesResp implements IGmBuildClothesResp {

//             /**
//              * Constructs a new GmBuildClothesResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmBuildClothesResp);

//             /** GmBuildClothesResp result. */
//             public result: number;

//             /** GmBuildClothesResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /**
//              * Creates a new GmBuildClothesResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmBuildClothesResp instance
//              */
//             public static create(properties?: luck.protobuf.IGmBuildClothesResp): luck.protobuf.GmBuildClothesResp;

//             /**
//              * Encodes the specified GmBuildClothesResp message. Does not implicitly {@link luck.protobuf.GmBuildClothesResp.verify|verify} messages.
//              * @param message GmBuildClothesResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmBuildClothesResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmBuildClothesResp message, length delimited. Does not implicitly {@link luck.protobuf.GmBuildClothesResp.verify|verify} messages.
//              * @param message GmBuildClothesResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmBuildClothesResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmBuildClothesResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmBuildClothesResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmBuildClothesResp;

//             /**
//              * Decodes a GmBuildClothesResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmBuildClothesResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmBuildClothesResp;

//             /**
//              * Verifies a GmBuildClothesResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GmAddGoodsResp. */
//         interface IGmAddGoodsResp {

//             /** GmAddGoodsResp result */
//             result: number;
//         }

//         /** Represents a GmAddGoodsResp. */
//         class GmAddGoodsResp implements IGmAddGoodsResp {

//             /**
//              * Constructs a new GmAddGoodsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGmAddGoodsResp);

//             /** GmAddGoodsResp result. */
//             public result: number;

//             /**
//              * Creates a new GmAddGoodsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GmAddGoodsResp instance
//              */
//             public static create(properties?: luck.protobuf.IGmAddGoodsResp): luck.protobuf.GmAddGoodsResp;

//             /**
//              * Encodes the specified GmAddGoodsResp message. Does not implicitly {@link luck.protobuf.GmAddGoodsResp.verify|verify} messages.
//              * @param message GmAddGoodsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGmAddGoodsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GmAddGoodsResp message, length delimited. Does not implicitly {@link luck.protobuf.GmAddGoodsResp.verify|verify} messages.
//              * @param message GmAddGoodsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGmAddGoodsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GmAddGoodsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GmAddGoodsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GmAddGoodsResp;

//             /**
//              * Decodes a GmAddGoodsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GmAddGoodsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GmAddGoodsResp;

//             /**
//              * Verifies a GmAddGoodsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ChangeEquipResp. */
//         interface IChangeEquipResp {

//             /** ChangeEquipResp result */
//             result: number;

//             /** ChangeEquipResp playerBase */
//             playerBase?: (luck.protobuf.IPlayerBasePB|null);
//         }

//         /** Represents a ChangeEquipResp. */
//         class ChangeEquipResp implements IChangeEquipResp {

//             /**
//              * Constructs a new ChangeEquipResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IChangeEquipResp);

//             /** ChangeEquipResp result. */
//             public result: number;

//             /** ChangeEquipResp playerBase. */
//             public playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /**
//              * Creates a new ChangeEquipResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ChangeEquipResp instance
//              */
//             public static create(properties?: luck.protobuf.IChangeEquipResp): luck.protobuf.ChangeEquipResp;

//             /**
//              * Encodes the specified ChangeEquipResp message. Does not implicitly {@link luck.protobuf.ChangeEquipResp.verify|verify} messages.
//              * @param message ChangeEquipResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IChangeEquipResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ChangeEquipResp message, length delimited. Does not implicitly {@link luck.protobuf.ChangeEquipResp.verify|verify} messages.
//              * @param message ChangeEquipResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IChangeEquipResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ChangeEquipResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ChangeEquipResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ChangeEquipResp;

//             /**
//              * Decodes a ChangeEquipResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ChangeEquipResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ChangeEquipResp;

//             /**
//              * Verifies a ChangeEquipResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GoodsUpdatePushResp. */
//         interface IGoodsUpdatePushResp {

//             /** GoodsUpdatePushResp addWeaponList */
//             addWeaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** GoodsUpdatePushResp updateWeaponList */
//             updateWeaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** GoodsUpdatePushResp delWeaponUidList */
//             delWeaponUidList?: ((number|Long)[]|null);

//             /** GoodsUpdatePushResp addCardList */
//             addCardList?: (luck.protobuf.ICardPB[]|null);

//             /** GoodsUpdatePushResp updateCardList */
//             updateCardList?: (luck.protobuf.ICardPB[]|null);

//             /** GoodsUpdatePushResp delCardUidList */
//             delCardUidList?: ((number|Long)[]|null);

//             /** GoodsUpdatePushResp addClothesList */
//             addClothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** GoodsUpdatePushResp updateClothesList */
//             updateClothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** GoodsUpdatePushResp delClothesUidList */
//             delClothesUidList?: ((number|Long)[]|null);

//             /** GoodsUpdatePushResp updateItemBag */
//             updateItemBag?: (luck.protobuf.IItemBagPB|null);

//             /** GoodsUpdatePushResp updatePlayerBase */
//             updatePlayerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** GoodsUpdatePushResp updatePlayerExtra */
//             updatePlayerExtra?: (luck.protobuf.IPlayerExtraPB|null);

//             /** GoodsUpdatePushResp updateRoleList */
//             updateRoleList?: (luck.protobuf.IRolePB[]|null);
//         }

//         /** Represents a GoodsUpdatePushResp. */
//         class GoodsUpdatePushResp implements IGoodsUpdatePushResp {

//             /**
//              * Constructs a new GoodsUpdatePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGoodsUpdatePushResp);

//             /** GoodsUpdatePushResp addWeaponList. */
//             public addWeaponList: luck.protobuf.IWeaponPB[];

//             /** GoodsUpdatePushResp updateWeaponList. */
//             public updateWeaponList: luck.protobuf.IWeaponPB[];

//             /** GoodsUpdatePushResp delWeaponUidList. */
//             public delWeaponUidList: (number|Long)[];

//             /** GoodsUpdatePushResp addCardList. */
//             public addCardList: luck.protobuf.ICardPB[];

//             /** GoodsUpdatePushResp updateCardList. */
//             public updateCardList: luck.protobuf.ICardPB[];

//             /** GoodsUpdatePushResp delCardUidList. */
//             public delCardUidList: (number|Long)[];

//             /** GoodsUpdatePushResp addClothesList. */
//             public addClothesList: luck.protobuf.IClothesPB[];

//             /** GoodsUpdatePushResp updateClothesList. */
//             public updateClothesList: luck.protobuf.IClothesPB[];

//             /** GoodsUpdatePushResp delClothesUidList. */
//             public delClothesUidList: (number|Long)[];

//             /** GoodsUpdatePushResp updateItemBag. */
//             public updateItemBag?: (luck.protobuf.IItemBagPB|null);

//             /** GoodsUpdatePushResp updatePlayerBase. */
//             public updatePlayerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** GoodsUpdatePushResp updatePlayerExtra. */
//             public updatePlayerExtra?: (luck.protobuf.IPlayerExtraPB|null);

//             /** GoodsUpdatePushResp updateRoleList. */
//             public updateRoleList: luck.protobuf.IRolePB[];

//             /**
//              * Creates a new GoodsUpdatePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GoodsUpdatePushResp instance
//              */
//             public static create(properties?: luck.protobuf.IGoodsUpdatePushResp): luck.protobuf.GoodsUpdatePushResp;

//             /**
//              * Encodes the specified GoodsUpdatePushResp message. Does not implicitly {@link luck.protobuf.GoodsUpdatePushResp.verify|verify} messages.
//              * @param message GoodsUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGoodsUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GoodsUpdatePushResp message, length delimited. Does not implicitly {@link luck.protobuf.GoodsUpdatePushResp.verify|verify} messages.
//              * @param message GoodsUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGoodsUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GoodsUpdatePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GoodsUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GoodsUpdatePushResp;

//             /**
//              * Decodes a GoodsUpdatePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GoodsUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GoodsUpdatePushResp;

//             /**
//              * Verifies a GoodsUpdatePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleResp. */
//         interface IBattleResp {

//             /** BattleResp operationList */
//             operationList?: (luck.protobuf.IOperationPB[]|null);

//             /** BattleResp frameId */
//             frameId: number;
//         }

//         /** Represents a BattleResp. */
//         class BattleResp implements IBattleResp {

//             /**
//              * Constructs a new BattleResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleResp);

//             /** BattleResp operationList. */
//             public operationList: luck.protobuf.IOperationPB[];

//             /** BattleResp frameId. */
//             public frameId: number;

//             /**
//              * Creates a new BattleResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleResp instance
//              */
//             public static create(properties?: luck.protobuf.IBattleResp): luck.protobuf.BattleResp;

//             /**
//              * Encodes the specified BattleResp message. Does not implicitly {@link luck.protobuf.BattleResp.verify|verify} messages.
//              * @param message BattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleResp message, length delimited. Does not implicitly {@link luck.protobuf.BattleResp.verify|verify} messages.
//              * @param message BattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleResp;

//             /**
//              * Decodes a BattleResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleResp;

//             /**
//              * Verifies a BattleResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetRoomListResp. */
//         interface IGetRoomListResp {

//             /** GetRoomListResp roomList */
//             roomList?: (luck.protobuf.IRoomPB[]|null);
//         }

//         /** Represents a GetRoomListResp. */
//         class GetRoomListResp implements IGetRoomListResp {

//             /**
//              * Constructs a new GetRoomListResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetRoomListResp);

//             /** GetRoomListResp roomList. */
//             public roomList: luck.protobuf.IRoomPB[];

//             /**
//              * Creates a new GetRoomListResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetRoomListResp instance
//              */
//             public static create(properties?: luck.protobuf.IGetRoomListResp): luck.protobuf.GetRoomListResp;

//             /**
//              * Encodes the specified GetRoomListResp message. Does not implicitly {@link luck.protobuf.GetRoomListResp.verify|verify} messages.
//              * @param message GetRoomListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetRoomListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetRoomListResp message, length delimited. Does not implicitly {@link luck.protobuf.GetRoomListResp.verify|verify} messages.
//              * @param message GetRoomListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetRoomListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetRoomListResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetRoomListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetRoomListResp;

//             /**
//              * Decodes a GetRoomListResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetRoomListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetRoomListResp;

//             /**
//              * Verifies a GetRoomListResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EnterRoomResp. */
//         interface IEnterRoomResp {

//             /** EnterRoomResp result */
//             result: number;

//             /** EnterRoomResp room */
//             room?: (luck.protobuf.IRoomPB|null);
//         }

//         /** Represents an EnterRoomResp. */
//         class EnterRoomResp implements IEnterRoomResp {

//             /**
//              * Constructs a new EnterRoomResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEnterRoomResp);

//             /** EnterRoomResp result. */
//             public result: number;

//             /** EnterRoomResp room. */
//             public room?: (luck.protobuf.IRoomPB|null);

//             /**
//              * Creates a new EnterRoomResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EnterRoomResp instance
//              */
//             public static create(properties?: luck.protobuf.IEnterRoomResp): luck.protobuf.EnterRoomResp;

//             /**
//              * Encodes the specified EnterRoomResp message. Does not implicitly {@link luck.protobuf.EnterRoomResp.verify|verify} messages.
//              * @param message EnterRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEnterRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EnterRoomResp message, length delimited. Does not implicitly {@link luck.protobuf.EnterRoomResp.verify|verify} messages.
//              * @param message EnterRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEnterRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EnterRoomResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EnterRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EnterRoomResp;

//             /**
//              * Decodes an EnterRoomResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EnterRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EnterRoomResp;

//             /**
//              * Verifies an EnterRoomResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ExitRoomResp. */
//         interface IExitRoomResp {

//             /** ExitRoomResp roomId */
//             roomId: (number|Long);

//             /** ExitRoomResp room */
//             room?: (luck.protobuf.IRoomPB|null);

//             /** ExitRoomResp playerId */
//             playerId?: (number|Long|null);
//         }

//         /** Represents an ExitRoomResp. */
//         class ExitRoomResp implements IExitRoomResp {

//             /**
//              * Constructs a new ExitRoomResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IExitRoomResp);

//             /** ExitRoomResp roomId. */
//             public roomId: (number|Long);

//             /** ExitRoomResp room. */
//             public room?: (luck.protobuf.IRoomPB|null);

//             /** ExitRoomResp playerId. */
//             public playerId: (number|Long);

//             /**
//              * Creates a new ExitRoomResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ExitRoomResp instance
//              */
//             public static create(properties?: luck.protobuf.IExitRoomResp): luck.protobuf.ExitRoomResp;

//             /**
//              * Encodes the specified ExitRoomResp message. Does not implicitly {@link luck.protobuf.ExitRoomResp.verify|verify} messages.
//              * @param message ExitRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IExitRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ExitRoomResp message, length delimited. Does not implicitly {@link luck.protobuf.ExitRoomResp.verify|verify} messages.
//              * @param message ExitRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IExitRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ExitRoomResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ExitRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ExitRoomResp;

//             /**
//              * Decodes an ExitRoomResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ExitRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ExitRoomResp;

//             /**
//              * Verifies an ExitRoomResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreateRoomResp. */
//         interface ICreateRoomResp {

//             /** CreateRoomResp room */
//             room?: (luck.protobuf.IRoomPB|null);

//             /** CreateRoomResp result */
//             result: number;
//         }

//         /** Represents a CreateRoomResp. */
//         class CreateRoomResp implements ICreateRoomResp {

//             /**
//              * Constructs a new CreateRoomResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreateRoomResp);

//             /** CreateRoomResp room. */
//             public room?: (luck.protobuf.IRoomPB|null);

//             /** CreateRoomResp result. */
//             public result: number;

//             /**
//              * Creates a new CreateRoomResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreateRoomResp instance
//              */
//             public static create(properties?: luck.protobuf.ICreateRoomResp): luck.protobuf.CreateRoomResp;

//             /**
//              * Encodes the specified CreateRoomResp message. Does not implicitly {@link luck.protobuf.CreateRoomResp.verify|verify} messages.
//              * @param message CreateRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreateRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreateRoomResp message, length delimited. Does not implicitly {@link luck.protobuf.CreateRoomResp.verify|verify} messages.
//              * @param message CreateRoomResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreateRoomResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreateRoomResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreateRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreateRoomResp;

//             /**
//              * Decodes a CreateRoomResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreateRoomResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreateRoomResp;

//             /**
//              * Verifies a CreateRoomResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartBattleResp. */
//         interface IStartBattleResp {

//             /** StartBattleResp isStart */
//             isStart: boolean;
//         }

//         /** Represents a StartBattleResp. */
//         class StartBattleResp implements IStartBattleResp {

//             /**
//              * Constructs a new StartBattleResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartBattleResp);

//             /** StartBattleResp isStart. */
//             public isStart: boolean;

//             /**
//              * Creates a new StartBattleResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartBattleResp instance
//              */
//             public static create(properties?: luck.protobuf.IStartBattleResp): luck.protobuf.StartBattleResp;

//             /**
//              * Encodes the specified StartBattleResp message. Does not implicitly {@link luck.protobuf.StartBattleResp.verify|verify} messages.
//              * @param message StartBattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartBattleResp message, length delimited. Does not implicitly {@link luck.protobuf.StartBattleResp.verify|verify} messages.
//              * @param message StartBattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartBattleResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartBattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartBattleResp;

//             /**
//              * Decodes a StartBattleResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartBattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartBattleResp;

//             /**
//              * Verifies a StartBattleResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartCheckNodeResp. */
//         interface IStartCheckNodeResp {

//             /** StartCheckNodeResp result */
//             result: number;
//         }

//         /** Represents a StartCheckNodeResp. */
//         class StartCheckNodeResp implements IStartCheckNodeResp {

//             /**
//              * Constructs a new StartCheckNodeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartCheckNodeResp);

//             /** StartCheckNodeResp result. */
//             public result: number;

//             /**
//              * Creates a new StartCheckNodeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartCheckNodeResp instance
//              */
//             public static create(properties?: luck.protobuf.IStartCheckNodeResp): luck.protobuf.StartCheckNodeResp;

//             /**
//              * Encodes the specified StartCheckNodeResp message. Does not implicitly {@link luck.protobuf.StartCheckNodeResp.verify|verify} messages.
//              * @param message StartCheckNodeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartCheckNodeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartCheckNodeResp message, length delimited. Does not implicitly {@link luck.protobuf.StartCheckNodeResp.verify|verify} messages.
//              * @param message StartCheckNodeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartCheckNodeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartCheckNodeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartCheckNodeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartCheckNodeResp;

//             /**
//              * Decodes a StartCheckNodeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartCheckNodeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartCheckNodeResp;

//             /**
//              * Verifies a StartCheckNodeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a FinishCheckNodeResp. */
//         interface IFinishCheckNodeResp {

//             /** FinishCheckNodeResp result */
//             result: number;

//             /** FinishCheckNodeResp rewardList */
//             rewardList?: (luck.protobuf.IpveBallteFinishReward[]|null);

//             /** FinishCheckNodeResp checkNodeList */
//             checkNodeList?: (luck.protobuf.ICheckNode[]|null);

//             /** FinishCheckNodeResp gainExp */
//             gainExp?: (number|null);

//             /** FinishCheckNodeResp lv */
//             lv?: (number|null);
//         }

//         /** Represents a FinishCheckNodeResp. */
//         class FinishCheckNodeResp implements IFinishCheckNodeResp {

//             /**
//              * Constructs a new FinishCheckNodeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IFinishCheckNodeResp);

//             /** FinishCheckNodeResp result. */
//             public result: number;

//             /** FinishCheckNodeResp rewardList. */
//             public rewardList: luck.protobuf.IpveBallteFinishReward[];

//             /** FinishCheckNodeResp checkNodeList. */
//             public checkNodeList: luck.protobuf.ICheckNode[];

//             /** FinishCheckNodeResp gainExp. */
//             public gainExp: number;

//             /** FinishCheckNodeResp lv. */
//             public lv: number;

//             /**
//              * Creates a new FinishCheckNodeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns FinishCheckNodeResp instance
//              */
//             public static create(properties?: luck.protobuf.IFinishCheckNodeResp): luck.protobuf.FinishCheckNodeResp;

//             /**
//              * Encodes the specified FinishCheckNodeResp message. Does not implicitly {@link luck.protobuf.FinishCheckNodeResp.verify|verify} messages.
//              * @param message FinishCheckNodeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IFinishCheckNodeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified FinishCheckNodeResp message, length delimited. Does not implicitly {@link luck.protobuf.FinishCheckNodeResp.verify|verify} messages.
//              * @param message FinishCheckNodeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IFinishCheckNodeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a FinishCheckNodeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns FinishCheckNodeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.FinishCheckNodeResp;

//             /**
//              * Decodes a FinishCheckNodeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns FinishCheckNodeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.FinishCheckNodeResp;

//             /**
//              * Verifies a FinishCheckNodeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleDropResp. */
//         interface IBattleDropResp {

//             /** BattleDropResp result */
//             result: number;

//             /** BattleDropResp gold */
//             gold?: (number|Long|null);

//             /** BattleDropResp diamond */
//             diamond?: (number|Long|null);

//             /** BattleDropResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** BattleDropResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** BattleDropResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** BattleDropResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** BattleDropResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a BattleDropResp. */
//         class BattleDropResp implements IBattleDropResp {

//             /**
//              * Constructs a new BattleDropResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleDropResp);

//             /** BattleDropResp result. */
//             public result: number;

//             /** BattleDropResp gold. */
//             public gold: (number|Long);

//             /** BattleDropResp diamond. */
//             public diamond: (number|Long);

//             /** BattleDropResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** BattleDropResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** BattleDropResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** BattleDropResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** BattleDropResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new BattleDropResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleDropResp instance
//              */
//             public static create(properties?: luck.protobuf.IBattleDropResp): luck.protobuf.BattleDropResp;

//             /**
//              * Encodes the specified BattleDropResp message. Does not implicitly {@link luck.protobuf.BattleDropResp.verify|verify} messages.
//              * @param message BattleDropResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleDropResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleDropResp message, length delimited. Does not implicitly {@link luck.protobuf.BattleDropResp.verify|verify} messages.
//              * @param message BattleDropResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleDropResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleDropResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleDropResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleDropResp;

//             /**
//              * Decodes a BattleDropResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleDropResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleDropResp;

//             /**
//              * Verifies a BattleDropResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SginInResp. */
//         interface ISginInResp {

//             /** SginInResp result */
//             result: number;

//             /** SginInResp sginInTime */
//             sginInTime?: (number|Long|null);

//             /** SginInResp sginCount */
//             sginCount?: (number|null);

//             /** SginInResp gold */
//             gold?: (number|Long|null);

//             /** SginInResp diamond */
//             diamond?: (number|Long|null);

//             /** SginInResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** SginInResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** SginInResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** SginInResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** SginInResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** SginInResp allCount */
//             allCount?: (number|null);
//         }

//         /** Represents a SginInResp. */
//         class SginInResp implements ISginInResp {

//             /**
//              * Constructs a new SginInResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISginInResp);

//             /** SginInResp result. */
//             public result: number;

//             /** SginInResp sginInTime. */
//             public sginInTime: (number|Long);

//             /** SginInResp sginCount. */
//             public sginCount: number;

//             /** SginInResp gold. */
//             public gold: (number|Long);

//             /** SginInResp diamond. */
//             public diamond: (number|Long);

//             /** SginInResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** SginInResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** SginInResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** SginInResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** SginInResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** SginInResp allCount. */
//             public allCount: number;

//             /**
//              * Creates a new SginInResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SginInResp instance
//              */
//             public static create(properties?: luck.protobuf.ISginInResp): luck.protobuf.SginInResp;

//             /**
//              * Encodes the specified SginInResp message. Does not implicitly {@link luck.protobuf.SginInResp.verify|verify} messages.
//              * @param message SginInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISginInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SginInResp message, length delimited. Does not implicitly {@link luck.protobuf.SginInResp.verify|verify} messages.
//              * @param message SginInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISginInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SginInResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SginInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SginInResp;

//             /**
//              * Decodes a SginInResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SginInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SginInResp;

//             /**
//              * Verifies a SginInResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LotteryResp. */
//         interface ILotteryResp {

//             /** LotteryResp result */
//             result: number;

//             /** LotteryResp gold */
//             gold?: (number|Long|null);

//             /** LotteryResp diamond */
//             diamond?: (number|Long|null);

//             /** LotteryResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** LotteryResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** LotteryResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** LotteryResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** LotteryResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** LotteryResp itemId */
//             itemId?: (number[]|null);
//         }

//         /** Represents a LotteryResp. */
//         class LotteryResp implements ILotteryResp {

//             /**
//              * Constructs a new LotteryResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILotteryResp);

//             /** LotteryResp result. */
//             public result: number;

//             /** LotteryResp gold. */
//             public gold: (number|Long);

//             /** LotteryResp diamond. */
//             public diamond: (number|Long);

//             /** LotteryResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** LotteryResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** LotteryResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** LotteryResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** LotteryResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** LotteryResp itemId. */
//             public itemId: number[];

//             /**
//              * Creates a new LotteryResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LotteryResp instance
//              */
//             public static create(properties?: luck.protobuf.ILotteryResp): luck.protobuf.LotteryResp;

//             /**
//              * Encodes the specified LotteryResp message. Does not implicitly {@link luck.protobuf.LotteryResp.verify|verify} messages.
//              * @param message LotteryResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILotteryResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LotteryResp message, length delimited. Does not implicitly {@link luck.protobuf.LotteryResp.verify|verify} messages.
//              * @param message LotteryResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILotteryResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LotteryResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LotteryResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LotteryResp;

//             /**
//              * Decodes a LotteryResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LotteryResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LotteryResp;

//             /**
//              * Verifies a LotteryResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SynthesisResp. */
//         interface ISynthesisResp {

//             /** SynthesisResp result */
//             result: number;

//             /** SynthesisResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** SynthesisResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** SynthesisResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** SynthesisResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** SynthesisResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a SynthesisResp. */
//         class SynthesisResp implements ISynthesisResp {

//             /**
//              * Constructs a new SynthesisResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISynthesisResp);

//             /** SynthesisResp result. */
//             public result: number;

//             /** SynthesisResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** SynthesisResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** SynthesisResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** SynthesisResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** SynthesisResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new SynthesisResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SynthesisResp instance
//              */
//             public static create(properties?: luck.protobuf.ISynthesisResp): luck.protobuf.SynthesisResp;

//             /**
//              * Encodes the specified SynthesisResp message. Does not implicitly {@link luck.protobuf.SynthesisResp.verify|verify} messages.
//              * @param message SynthesisResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISynthesisResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SynthesisResp message, length delimited. Does not implicitly {@link luck.protobuf.SynthesisResp.verify|verify} messages.
//              * @param message SynthesisResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISynthesisResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SynthesisResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SynthesisResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SynthesisResp;

//             /**
//              * Decodes a SynthesisResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SynthesisResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SynthesisResp;

//             /**
//              * Verifies a SynthesisResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattlePickUpResp. */
//         interface IBattlePickUpResp {

//             /** BattlePickUpResp result */
//             result: number;
//         }

//         /** Represents a BattlePickUpResp. */
//         class BattlePickUpResp implements IBattlePickUpResp {

//             /**
//              * Constructs a new BattlePickUpResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattlePickUpResp);

//             /** BattlePickUpResp result. */
//             public result: number;

//             /**
//              * Creates a new BattlePickUpResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattlePickUpResp instance
//              */
//             public static create(properties?: luck.protobuf.IBattlePickUpResp): luck.protobuf.BattlePickUpResp;

//             /**
//              * Encodes the specified BattlePickUpResp message. Does not implicitly {@link luck.protobuf.BattlePickUpResp.verify|verify} messages.
//              * @param message BattlePickUpResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattlePickUpResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattlePickUpResp message, length delimited. Does not implicitly {@link luck.protobuf.BattlePickUpResp.verify|verify} messages.
//              * @param message BattlePickUpResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattlePickUpResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattlePickUpResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattlePickUpResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattlePickUpResp;

//             /**
//              * Decodes a BattlePickUpResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattlePickUpResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattlePickUpResp;

//             /**
//              * Verifies a BattlePickUpResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SettingResp. */
//         interface ISettingResp {

//             /** SettingResp result */
//             result: number;

//             /** SettingResp playerExtra */
//             playerExtra?: (luck.protobuf.IPlayerExtraPB|null);
//         }

//         /** Represents a SettingResp. */
//         class SettingResp implements ISettingResp {

//             /**
//              * Constructs a new SettingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISettingResp);

//             /** SettingResp result. */
//             public result: number;

//             /** SettingResp playerExtra. */
//             public playerExtra?: (luck.protobuf.IPlayerExtraPB|null);

//             /**
//              * Creates a new SettingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SettingResp instance
//              */
//             public static create(properties?: luck.protobuf.ISettingResp): luck.protobuf.SettingResp;

//             /**
//              * Encodes the specified SettingResp message. Does not implicitly {@link luck.protobuf.SettingResp.verify|verify} messages.
//              * @param message SettingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISettingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SettingResp message, length delimited. Does not implicitly {@link luck.protobuf.SettingResp.verify|verify} messages.
//              * @param message SettingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISettingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SettingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SettingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SettingResp;

//             /**
//              * Decodes a SettingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SettingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SettingResp;

//             /**
//              * Verifies a SettingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipRecastResp. */
//         interface IEquipRecastResp {

//             /** EquipRecastResp result */
//             result: number;

//             /** EquipRecastResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipRecastResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipRecastResp. */
//         class EquipRecastResp implements IEquipRecastResp {

//             /**
//              * Constructs a new EquipRecastResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipRecastResp);

//             /** EquipRecastResp result. */
//             public result: number;

//             /** EquipRecastResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipRecastResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipRecastResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipRecastResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipRecastResp): luck.protobuf.EquipRecastResp;

//             /**
//              * Encodes the specified EquipRecastResp message. Does not implicitly {@link luck.protobuf.EquipRecastResp.verify|verify} messages.
//              * @param message EquipRecastResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipRecastResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipRecastResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipRecastResp.verify|verify} messages.
//              * @param message EquipRecastResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipRecastResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipRecastResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipRecastResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipRecastResp;

//             /**
//              * Decodes an EquipRecastResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipRecastResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipRecastResp;

//             /**
//              * Verifies an EquipRecastResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipRecastAffirmResp. */
//         interface IEquipRecastAffirmResp {

//             /** EquipRecastAffirmResp result */
//             result: number;

//             /** EquipRecastAffirmResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipRecastAffirmResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipRecastAffirmResp. */
//         class EquipRecastAffirmResp implements IEquipRecastAffirmResp {

//             /**
//              * Constructs a new EquipRecastAffirmResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipRecastAffirmResp);

//             /** EquipRecastAffirmResp result. */
//             public result: number;

//             /** EquipRecastAffirmResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipRecastAffirmResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipRecastAffirmResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipRecastAffirmResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipRecastAffirmResp): luck.protobuf.EquipRecastAffirmResp;

//             /**
//              * Encodes the specified EquipRecastAffirmResp message. Does not implicitly {@link luck.protobuf.EquipRecastAffirmResp.verify|verify} messages.
//              * @param message EquipRecastAffirmResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipRecastAffirmResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipRecastAffirmResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipRecastAffirmResp.verify|verify} messages.
//              * @param message EquipRecastAffirmResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipRecastAffirmResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipRecastAffirmResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipRecastAffirmResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipRecastAffirmResp;

//             /**
//              * Decodes an EquipRecastAffirmResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipRecastAffirmResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipRecastAffirmResp;

//             /**
//              * Verifies an EquipRecastAffirmResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetEmailListResp. */
//         interface IGetEmailListResp {

//             /** GetEmailListResp result */
//             result: number;

//             /** GetEmailListResp emailList */
//             emailList?: (luck.protobuf.IEmailPB[]|null);
//         }

//         /** Represents a GetEmailListResp. */
//         class GetEmailListResp implements IGetEmailListResp {

//             /**
//              * Constructs a new GetEmailListResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetEmailListResp);

//             /** GetEmailListResp result. */
//             public result: number;

//             /** GetEmailListResp emailList. */
//             public emailList: luck.protobuf.IEmailPB[];

//             /**
//              * Creates a new GetEmailListResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetEmailListResp instance
//              */
//             public static create(properties?: luck.protobuf.IGetEmailListResp): luck.protobuf.GetEmailListResp;

//             /**
//              * Encodes the specified GetEmailListResp message. Does not implicitly {@link luck.protobuf.GetEmailListResp.verify|verify} messages.
//              * @param message GetEmailListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetEmailListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetEmailListResp message, length delimited. Does not implicitly {@link luck.protobuf.GetEmailListResp.verify|verify} messages.
//              * @param message GetEmailListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetEmailListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetEmailListResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetEmailListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetEmailListResp;

//             /**
//              * Decodes a GetEmailListResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetEmailListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetEmailListResp;

//             /**
//              * Verifies a GetEmailListResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailPushResp. */
//         interface IEmailPushResp {

//             /** EmailPushResp result */
//             result: number;

//             /** EmailPushResp email */
//             email?: (luck.protobuf.IEmailPB|null);
//         }

//         /** Represents an EmailPushResp. */
//         class EmailPushResp implements IEmailPushResp {

//             /**
//              * Constructs a new EmailPushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailPushResp);

//             /** EmailPushResp result. */
//             public result: number;

//             /** EmailPushResp email. */
//             public email?: (luck.protobuf.IEmailPB|null);

//             /**
//              * Creates a new EmailPushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailPushResp instance
//              */
//             public static create(properties?: luck.protobuf.IEmailPushResp): luck.protobuf.EmailPushResp;

//             /**
//              * Encodes the specified EmailPushResp message. Does not implicitly {@link luck.protobuf.EmailPushResp.verify|verify} messages.
//              * @param message EmailPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailPushResp message, length delimited. Does not implicitly {@link luck.protobuf.EmailPushResp.verify|verify} messages.
//              * @param message EmailPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailPushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailPushResp;

//             /**
//              * Decodes an EmailPushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailPushResp;

//             /**
//              * Verifies an EmailPushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailDrawResp. */
//         interface IEmailDrawResp {

//             /** EmailDrawResp result */
//             result: number;

//             /** EmailDrawResp gold */
//             gold?: (number|Long|null);

//             /** EmailDrawResp diamond */
//             diamond?: (number|Long|null);

//             /** EmailDrawResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** EmailDrawResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** EmailDrawResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** EmailDrawResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** EmailDrawResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents an EmailDrawResp. */
//         class EmailDrawResp implements IEmailDrawResp {

//             /**
//              * Constructs a new EmailDrawResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailDrawResp);

//             /** EmailDrawResp result. */
//             public result: number;

//             /** EmailDrawResp gold. */
//             public gold: (number|Long);

//             /** EmailDrawResp diamond. */
//             public diamond: (number|Long);

//             /** EmailDrawResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** EmailDrawResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** EmailDrawResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** EmailDrawResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** EmailDrawResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new EmailDrawResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailDrawResp instance
//              */
//             public static create(properties?: luck.protobuf.IEmailDrawResp): luck.protobuf.EmailDrawResp;

//             /**
//              * Encodes the specified EmailDrawResp message. Does not implicitly {@link luck.protobuf.EmailDrawResp.verify|verify} messages.
//              * @param message EmailDrawResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailDrawResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailDrawResp message, length delimited. Does not implicitly {@link luck.protobuf.EmailDrawResp.verify|verify} messages.
//              * @param message EmailDrawResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailDrawResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailDrawResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailDrawResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailDrawResp;

//             /**
//              * Decodes an EmailDrawResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailDrawResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailDrawResp;

//             /**
//              * Verifies an EmailDrawResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DrawAllEmailResp. */
//         interface IDrawAllEmailResp {

//             /** DrawAllEmailResp result */
//             result: number;

//             /** DrawAllEmailResp gold */
//             gold?: (number|Long|null);

//             /** DrawAllEmailResp diamond */
//             diamond?: (number|Long|null);

//             /** DrawAllEmailResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** DrawAllEmailResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** DrawAllEmailResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** DrawAllEmailResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** DrawAllEmailResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** DrawAllEmailResp emailList */
//             emailList?: (luck.protobuf.IEmailPB[]|null);
//         }

//         /** Represents a DrawAllEmailResp. */
//         class DrawAllEmailResp implements IDrawAllEmailResp {

//             /**
//              * Constructs a new DrawAllEmailResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDrawAllEmailResp);

//             /** DrawAllEmailResp result. */
//             public result: number;

//             /** DrawAllEmailResp gold. */
//             public gold: (number|Long);

//             /** DrawAllEmailResp diamond. */
//             public diamond: (number|Long);

//             /** DrawAllEmailResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** DrawAllEmailResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** DrawAllEmailResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** DrawAllEmailResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** DrawAllEmailResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** DrawAllEmailResp emailList. */
//             public emailList: luck.protobuf.IEmailPB[];

//             /**
//              * Creates a new DrawAllEmailResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DrawAllEmailResp instance
//              */
//             public static create(properties?: luck.protobuf.IDrawAllEmailResp): luck.protobuf.DrawAllEmailResp;

//             /**
//              * Encodes the specified DrawAllEmailResp message. Does not implicitly {@link luck.protobuf.DrawAllEmailResp.verify|verify} messages.
//              * @param message DrawAllEmailResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDrawAllEmailResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DrawAllEmailResp message, length delimited. Does not implicitly {@link luck.protobuf.DrawAllEmailResp.verify|verify} messages.
//              * @param message DrawAllEmailResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDrawAllEmailResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DrawAllEmailResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DrawAllEmailResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DrawAllEmailResp;

//             /**
//              * Decodes a DrawAllEmailResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DrawAllEmailResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DrawAllEmailResp;

//             /**
//              * Verifies a DrawAllEmailResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EmailDelResp. */
//         interface IEmailDelResp {

//             /** EmailDelResp result */
//             result: number;
//         }

//         /** Represents an EmailDelResp. */
//         class EmailDelResp implements IEmailDelResp {

//             /**
//              * Constructs a new EmailDelResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEmailDelResp);

//             /** EmailDelResp result. */
//             public result: number;

//             /**
//              * Creates a new EmailDelResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EmailDelResp instance
//              */
//             public static create(properties?: luck.protobuf.IEmailDelResp): luck.protobuf.EmailDelResp;

//             /**
//              * Encodes the specified EmailDelResp message. Does not implicitly {@link luck.protobuf.EmailDelResp.verify|verify} messages.
//              * @param message EmailDelResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEmailDelResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EmailDelResp message, length delimited. Does not implicitly {@link luck.protobuf.EmailDelResp.verify|verify} messages.
//              * @param message EmailDelResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEmailDelResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EmailDelResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EmailDelResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EmailDelResp;

//             /**
//              * Decodes an EmailDelResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EmailDelResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EmailDelResp;

//             /**
//              * Verifies an EmailDelResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipUpgradeResp. */
//         interface IEquipUpgradeResp {

//             /** EquipUpgradeResp result */
//             result: number;

//             /** EquipUpgradeResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipUpgradeResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipUpgradeResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipUpgradeResp. */
//         class EquipUpgradeResp implements IEquipUpgradeResp {

//             /**
//              * Constructs a new EquipUpgradeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipUpgradeResp);

//             /** EquipUpgradeResp result. */
//             public result: number;

//             /** EquipUpgradeResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipUpgradeResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipUpgradeResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipUpgradeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipUpgradeResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipUpgradeResp): luck.protobuf.EquipUpgradeResp;

//             /**
//              * Encodes the specified EquipUpgradeResp message. Does not implicitly {@link luck.protobuf.EquipUpgradeResp.verify|verify} messages.
//              * @param message EquipUpgradeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipUpgradeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipUpgradeResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipUpgradeResp.verify|verify} messages.
//              * @param message EquipUpgradeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipUpgradeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipUpgradeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipUpgradeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipUpgradeResp;

//             /**
//              * Decodes an EquipUpgradeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipUpgradeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipUpgradeResp;

//             /**
//              * Verifies an EquipUpgradeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipBaptizeResp. */
//         interface IEquipBaptizeResp {

//             /** EquipBaptizeResp result */
//             result: number;

//             /** EquipBaptizeResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipBaptizeResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipBaptizeResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipBaptizeResp. */
//         class EquipBaptizeResp implements IEquipBaptizeResp {

//             /**
//              * Constructs a new EquipBaptizeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipBaptizeResp);

//             /** EquipBaptizeResp result. */
//             public result: number;

//             /** EquipBaptizeResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipBaptizeResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipBaptizeResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipBaptizeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipBaptizeResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipBaptizeResp): luck.protobuf.EquipBaptizeResp;

//             /**
//              * Encodes the specified EquipBaptizeResp message. Does not implicitly {@link luck.protobuf.EquipBaptizeResp.verify|verify} messages.
//              * @param message EquipBaptizeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipBaptizeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipBaptizeResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipBaptizeResp.verify|verify} messages.
//              * @param message EquipBaptizeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipBaptizeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipBaptizeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipBaptizeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipBaptizeResp;

//             /**
//              * Decodes an EquipBaptizeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipBaptizeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipBaptizeResp;

//             /**
//              * Verifies an EquipBaptizeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipBaptizeAffirmResp. */
//         interface IEquipBaptizeAffirmResp {

//             /** EquipBaptizeAffirmResp result */
//             result: number;

//             /** EquipBaptizeAffirmResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipBaptizeAffirmResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipBaptizeAffirmResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipBaptizeAffirmResp. */
//         class EquipBaptizeAffirmResp implements IEquipBaptizeAffirmResp {

//             /**
//              * Constructs a new EquipBaptizeAffirmResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipBaptizeAffirmResp);

//             /** EquipBaptizeAffirmResp result. */
//             public result: number;

//             /** EquipBaptizeAffirmResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipBaptizeAffirmResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipBaptizeAffirmResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipBaptizeAffirmResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipBaptizeAffirmResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipBaptizeAffirmResp): luck.protobuf.EquipBaptizeAffirmResp;

//             /**
//              * Encodes the specified EquipBaptizeAffirmResp message. Does not implicitly {@link luck.protobuf.EquipBaptizeAffirmResp.verify|verify} messages.
//              * @param message EquipBaptizeAffirmResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipBaptizeAffirmResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipBaptizeAffirmResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipBaptizeAffirmResp.verify|verify} messages.
//              * @param message EquipBaptizeAffirmResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipBaptizeAffirmResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipBaptizeAffirmResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipBaptizeAffirmResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipBaptizeAffirmResp;

//             /**
//              * Decodes an EquipBaptizeAffirmResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipBaptizeAffirmResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipBaptizeAffirmResp;

//             /**
//              * Verifies an EquipBaptizeAffirmResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipInlayResp. */
//         interface IEquipInlayResp {

//             /** EquipInlayResp result */
//             result: number;

//             /** EquipInlayResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipInlayResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipInlayResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipInlayResp. */
//         class EquipInlayResp implements IEquipInlayResp {

//             /**
//              * Constructs a new EquipInlayResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipInlayResp);

//             /** EquipInlayResp result. */
//             public result: number;

//             /** EquipInlayResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipInlayResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipInlayResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipInlayResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipInlayResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipInlayResp): luck.protobuf.EquipInlayResp;

//             /**
//              * Encodes the specified EquipInlayResp message. Does not implicitly {@link luck.protobuf.EquipInlayResp.verify|verify} messages.
//              * @param message EquipInlayResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipInlayResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipInlayResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipInlayResp.verify|verify} messages.
//              * @param message EquipInlayResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipInlayResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipInlayResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipInlayResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipInlayResp;

//             /**
//              * Decodes an EquipInlayResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipInlayResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipInlayResp;

//             /**
//              * Verifies an EquipInlayResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipInlayDismantleResp. */
//         interface IEquipInlayDismantleResp {

//             /** EquipInlayDismantleResp result */
//             result: number;

//             /** EquipInlayDismantleResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipInlayDismantleResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipInlayDismantleResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipInlayDismantleResp. */
//         class EquipInlayDismantleResp implements IEquipInlayDismantleResp {

//             /**
//              * Constructs a new EquipInlayDismantleResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipInlayDismantleResp);

//             /** EquipInlayDismantleResp result. */
//             public result: number;

//             /** EquipInlayDismantleResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipInlayDismantleResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipInlayDismantleResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipInlayDismantleResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipInlayDismantleResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipInlayDismantleResp): luck.protobuf.EquipInlayDismantleResp;

//             /**
//              * Encodes the specified EquipInlayDismantleResp message. Does not implicitly {@link luck.protobuf.EquipInlayDismantleResp.verify|verify} messages.
//              * @param message EquipInlayDismantleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipInlayDismantleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipInlayDismantleResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipInlayDismantleResp.verify|verify} messages.
//              * @param message EquipInlayDismantleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipInlayDismantleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipInlayDismantleResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipInlayDismantleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipInlayDismantleResp;

//             /**
//              * Decodes an EquipInlayDismantleResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipInlayDismantleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipInlayDismantleResp;

//             /**
//              * Verifies an EquipInlayDismantleResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an EquipAdvanceResp. */
//         interface IEquipAdvanceResp {

//             /** EquipAdvanceResp result */
//             result: number;

//             /** EquipAdvanceResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipAdvanceResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** EquipAdvanceResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);
//         }

//         /** Represents an EquipAdvanceResp. */
//         class EquipAdvanceResp implements IEquipAdvanceResp {

//             /**
//              * Constructs a new EquipAdvanceResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IEquipAdvanceResp);

//             /** EquipAdvanceResp result. */
//             public result: number;

//             /** EquipAdvanceResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** EquipAdvanceResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** EquipAdvanceResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /**
//              * Creates a new EquipAdvanceResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns EquipAdvanceResp instance
//              */
//             public static create(properties?: luck.protobuf.IEquipAdvanceResp): luck.protobuf.EquipAdvanceResp;

//             /**
//              * Encodes the specified EquipAdvanceResp message. Does not implicitly {@link luck.protobuf.EquipAdvanceResp.verify|verify} messages.
//              * @param message EquipAdvanceResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IEquipAdvanceResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified EquipAdvanceResp message, length delimited. Does not implicitly {@link luck.protobuf.EquipAdvanceResp.verify|verify} messages.
//              * @param message EquipAdvanceResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IEquipAdvanceResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an EquipAdvanceResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns EquipAdvanceResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.EquipAdvanceResp;

//             /**
//              * Decodes an EquipAdvanceResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns EquipAdvanceResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.EquipAdvanceResp;

//             /**
//              * Verifies an EquipAdvanceResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoleUnlockResp. */
//         interface IRoleUnlockResp {

//             /** RoleUnlockResp result */
//             result: number;

//             /** RoleUnlockResp roleList */
//             roleList?: (number[]|null);
//         }

//         /** Represents a RoleUnlockResp. */
//         class RoleUnlockResp implements IRoleUnlockResp {

//             /**
//              * Constructs a new RoleUnlockResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoleUnlockResp);

//             /** RoleUnlockResp result. */
//             public result: number;

//             /** RoleUnlockResp roleList. */
//             public roleList: number[];

//             /**
//              * Creates a new RoleUnlockResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoleUnlockResp instance
//              */
//             public static create(properties?: luck.protobuf.IRoleUnlockResp): luck.protobuf.RoleUnlockResp;

//             /**
//              * Encodes the specified RoleUnlockResp message. Does not implicitly {@link luck.protobuf.RoleUnlockResp.verify|verify} messages.
//              * @param message RoleUnlockResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoleUnlockResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoleUnlockResp message, length delimited. Does not implicitly {@link luck.protobuf.RoleUnlockResp.verify|verify} messages.
//              * @param message RoleUnlockResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoleUnlockResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoleUnlockResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoleUnlockResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoleUnlockResp;

//             /**
//              * Decodes a RoleUnlockResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoleUnlockResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoleUnlockResp;

//             /**
//              * Verifies a RoleUnlockResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RoleChangeResp. */
//         interface IRoleChangeResp {

//             /** RoleChangeResp result */
//             result: number;
//         }

//         /** Represents a RoleChangeResp. */
//         class RoleChangeResp implements IRoleChangeResp {

//             /**
//              * Constructs a new RoleChangeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRoleChangeResp);

//             /** RoleChangeResp result. */
//             public result: number;

//             /**
//              * Creates a new RoleChangeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RoleChangeResp instance
//              */
//             public static create(properties?: luck.protobuf.IRoleChangeResp): luck.protobuf.RoleChangeResp;

//             /**
//              * Encodes the specified RoleChangeResp message. Does not implicitly {@link luck.protobuf.RoleChangeResp.verify|verify} messages.
//              * @param message RoleChangeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRoleChangeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RoleChangeResp message, length delimited. Does not implicitly {@link luck.protobuf.RoleChangeResp.verify|verify} messages.
//              * @param message RoleChangeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRoleChangeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RoleChangeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RoleChangeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RoleChangeResp;

//             /**
//              * Decodes a RoleChangeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RoleChangeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RoleChangeResp;

//             /**
//              * Verifies a RoleChangeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StaminaBuyResp. */
//         interface IStaminaBuyResp {

//             /** StaminaBuyResp result */
//             result: number;

//             /** StaminaBuyResp updatePlayerBase */
//             updatePlayerBase?: (luck.protobuf.IPlayerBasePB|null);
//         }

//         /** Represents a StaminaBuyResp. */
//         class StaminaBuyResp implements IStaminaBuyResp {

//             /**
//              * Constructs a new StaminaBuyResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStaminaBuyResp);

//             /** StaminaBuyResp result. */
//             public result: number;

//             /** StaminaBuyResp updatePlayerBase. */
//             public updatePlayerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /**
//              * Creates a new StaminaBuyResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StaminaBuyResp instance
//              */
//             public static create(properties?: luck.protobuf.IStaminaBuyResp): luck.protobuf.StaminaBuyResp;

//             /**
//              * Encodes the specified StaminaBuyResp message. Does not implicitly {@link luck.protobuf.StaminaBuyResp.verify|verify} messages.
//              * @param message StaminaBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStaminaBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StaminaBuyResp message, length delimited. Does not implicitly {@link luck.protobuf.StaminaBuyResp.verify|verify} messages.
//              * @param message StaminaBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStaminaBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StaminaBuyResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StaminaBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StaminaBuyResp;

//             /**
//              * Decodes a StaminaBuyResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StaminaBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StaminaBuyResp;

//             /**
//              * Verifies a StaminaBuyResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ShopBuyResp. */
//         interface IShopBuyResp {

//             /** ShopBuyResp result */
//             result: number;

//             /** ShopBuyResp gold */
//             gold?: (number|Long|null);

//             /** ShopBuyResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** ShopBuyResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** ShopBuyResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** ShopBuyResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** ShopBuyResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** ShopBuyResp shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents a ShopBuyResp. */
//         class ShopBuyResp implements IShopBuyResp {

//             /**
//              * Constructs a new ShopBuyResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IShopBuyResp);

//             /** ShopBuyResp result. */
//             public result: number;

//             /** ShopBuyResp gold. */
//             public gold: (number|Long);

//             /** ShopBuyResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** ShopBuyResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** ShopBuyResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** ShopBuyResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** ShopBuyResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** ShopBuyResp shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new ShopBuyResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ShopBuyResp instance
//              */
//             public static create(properties?: luck.protobuf.IShopBuyResp): luck.protobuf.ShopBuyResp;

//             /**
//              * Encodes the specified ShopBuyResp message. Does not implicitly {@link luck.protobuf.ShopBuyResp.verify|verify} messages.
//              * @param message ShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ShopBuyResp message, length delimited. Does not implicitly {@link luck.protobuf.ShopBuyResp.verify|verify} messages.
//              * @param message ShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ShopBuyResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ShopBuyResp;

//             /**
//              * Decodes a ShopBuyResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ShopBuyResp;

//             /**
//              * Verifies a ShopBuyResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a RecommendFriendsResp. */
//         interface IRecommendFriendsResp {

//             /** RecommendFriendsResp result */
//             result: number;

//             /** RecommendFriendsResp simplePlayerList */
//             simplePlayerList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents a RecommendFriendsResp. */
//         class RecommendFriendsResp implements IRecommendFriendsResp {

//             /**
//              * Constructs a new RecommendFriendsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IRecommendFriendsResp);

//             /** RecommendFriendsResp result. */
//             public result: number;

//             /** RecommendFriendsResp simplePlayerList. */
//             public simplePlayerList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new RecommendFriendsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns RecommendFriendsResp instance
//              */
//             public static create(properties?: luck.protobuf.IRecommendFriendsResp): luck.protobuf.RecommendFriendsResp;

//             /**
//              * Encodes the specified RecommendFriendsResp message. Does not implicitly {@link luck.protobuf.RecommendFriendsResp.verify|verify} messages.
//              * @param message RecommendFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IRecommendFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified RecommendFriendsResp message, length delimited. Does not implicitly {@link luck.protobuf.RecommendFriendsResp.verify|verify} messages.
//              * @param message RecommendFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IRecommendFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a RecommendFriendsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns RecommendFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.RecommendFriendsResp;

//             /**
//              * Decodes a RecommendFriendsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns RecommendFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.RecommendFriendsResp;

//             /**
//              * Verifies a RecommendFriendsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SearchFriendsResp. */
//         interface ISearchFriendsResp {

//             /** SearchFriendsResp result */
//             result: number;

//             /** SearchFriendsResp simplePlayer */
//             simplePlayer?: (luck.protobuf.ISimplePlayerPB|null);
//         }

//         /** Represents a SearchFriendsResp. */
//         class SearchFriendsResp implements ISearchFriendsResp {

//             /**
//              * Constructs a new SearchFriendsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISearchFriendsResp);

//             /** SearchFriendsResp result. */
//             public result: number;

//             /** SearchFriendsResp simplePlayer. */
//             public simplePlayer?: (luck.protobuf.ISimplePlayerPB|null);

//             /**
//              * Creates a new SearchFriendsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SearchFriendsResp instance
//              */
//             public static create(properties?: luck.protobuf.ISearchFriendsResp): luck.protobuf.SearchFriendsResp;

//             /**
//              * Encodes the specified SearchFriendsResp message. Does not implicitly {@link luck.protobuf.SearchFriendsResp.verify|verify} messages.
//              * @param message SearchFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISearchFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SearchFriendsResp message, length delimited. Does not implicitly {@link luck.protobuf.SearchFriendsResp.verify|verify} messages.
//              * @param message SearchFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISearchFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SearchFriendsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SearchFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SearchFriendsResp;

//             /**
//              * Decodes a SearchFriendsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SearchFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SearchFriendsResp;

//             /**
//              * Verifies a SearchFriendsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApplyFriendsResp. */
//         interface IApplyFriendsResp {

//             /** ApplyFriendsResp result */
//             result: number;
//         }

//         /** Represents an ApplyFriendsResp. */
//         class ApplyFriendsResp implements IApplyFriendsResp {

//             /**
//              * Constructs a new ApplyFriendsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApplyFriendsResp);

//             /** ApplyFriendsResp result. */
//             public result: number;

//             /**
//              * Creates a new ApplyFriendsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApplyFriendsResp instance
//              */
//             public static create(properties?: luck.protobuf.IApplyFriendsResp): luck.protobuf.ApplyFriendsResp;

//             /**
//              * Encodes the specified ApplyFriendsResp message. Does not implicitly {@link luck.protobuf.ApplyFriendsResp.verify|verify} messages.
//              * @param message ApplyFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApplyFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApplyFriendsResp message, length delimited. Does not implicitly {@link luck.protobuf.ApplyFriendsResp.verify|verify} messages.
//              * @param message ApplyFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApplyFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApplyFriendsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApplyFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApplyFriendsResp;

//             /**
//              * Decodes an ApplyFriendsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApplyFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApplyFriendsResp;

//             /**
//              * Verifies an ApplyFriendsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PushApplyFriendsResp. */
//         interface IPushApplyFriendsResp {

//             /** PushApplyFriendsResp newApplyFriend */
//             newApplyFriend?: (luck.protobuf.ISimplePlayerPB|null);
//         }

//         /** Represents a PushApplyFriendsResp. */
//         class PushApplyFriendsResp implements IPushApplyFriendsResp {

//             /**
//              * Constructs a new PushApplyFriendsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPushApplyFriendsResp);

//             /** PushApplyFriendsResp newApplyFriend. */
//             public newApplyFriend?: (luck.protobuf.ISimplePlayerPB|null);

//             /**
//              * Creates a new PushApplyFriendsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PushApplyFriendsResp instance
//              */
//             public static create(properties?: luck.protobuf.IPushApplyFriendsResp): luck.protobuf.PushApplyFriendsResp;

//             /**
//              * Encodes the specified PushApplyFriendsResp message. Does not implicitly {@link luck.protobuf.PushApplyFriendsResp.verify|verify} messages.
//              * @param message PushApplyFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPushApplyFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PushApplyFriendsResp message, length delimited. Does not implicitly {@link luck.protobuf.PushApplyFriendsResp.verify|verify} messages.
//              * @param message PushApplyFriendsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPushApplyFriendsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PushApplyFriendsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PushApplyFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PushApplyFriendsResp;

//             /**
//              * Decodes a PushApplyFriendsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PushApplyFriendsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PushApplyFriendsResp;

//             /**
//              * Verifies a PushApplyFriendsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetFriendsListResp. */
//         interface IGetFriendsListResp {

//             /** GetFriendsListResp result */
//             result: number;

//             /** GetFriendsListResp friendsList */
//             friendsList?: (luck.protobuf.ISimplePlayerPB[]|null);

//             /** GetFriendsListResp applyFriendsList */
//             applyFriendsList?: (luck.protobuf.ISimplePlayerPB[]|null);

//             /** GetFriendsListResp blackList */
//             blackList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents a GetFriendsListResp. */
//         class GetFriendsListResp implements IGetFriendsListResp {

//             /**
//              * Constructs a new GetFriendsListResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetFriendsListResp);

//             /** GetFriendsListResp result. */
//             public result: number;

//             /** GetFriendsListResp friendsList. */
//             public friendsList: luck.protobuf.ISimplePlayerPB[];

//             /** GetFriendsListResp applyFriendsList. */
//             public applyFriendsList: luck.protobuf.ISimplePlayerPB[];

//             /** GetFriendsListResp blackList. */
//             public blackList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new GetFriendsListResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetFriendsListResp instance
//              */
//             public static create(properties?: luck.protobuf.IGetFriendsListResp): luck.protobuf.GetFriendsListResp;

//             /**
//              * Encodes the specified GetFriendsListResp message. Does not implicitly {@link luck.protobuf.GetFriendsListResp.verify|verify} messages.
//              * @param message GetFriendsListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetFriendsListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetFriendsListResp message, length delimited. Does not implicitly {@link luck.protobuf.GetFriendsListResp.verify|verify} messages.
//              * @param message GetFriendsListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetFriendsListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetFriendsListResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetFriendsListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetFriendsListResp;

//             /**
//              * Decodes a GetFriendsListResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetFriendsListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetFriendsListResp;

//             /**
//              * Verifies a GetFriendsListResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApproveFriendApplyResp. */
//         interface IApproveFriendApplyResp {

//             /** ApproveFriendApplyResp result */
//             result: number;

//             /** ApproveFriendApplyResp friendsList */
//             friendsList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents an ApproveFriendApplyResp. */
//         class ApproveFriendApplyResp implements IApproveFriendApplyResp {

//             /**
//              * Constructs a new ApproveFriendApplyResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApproveFriendApplyResp);

//             /** ApproveFriendApplyResp result. */
//             public result: number;

//             /** ApproveFriendApplyResp friendsList. */
//             public friendsList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new ApproveFriendApplyResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApproveFriendApplyResp instance
//              */
//             public static create(properties?: luck.protobuf.IApproveFriendApplyResp): luck.protobuf.ApproveFriendApplyResp;

//             /**
//              * Encodes the specified ApproveFriendApplyResp message. Does not implicitly {@link luck.protobuf.ApproveFriendApplyResp.verify|verify} messages.
//              * @param message ApproveFriendApplyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApproveFriendApplyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApproveFriendApplyResp message, length delimited. Does not implicitly {@link luck.protobuf.ApproveFriendApplyResp.verify|verify} messages.
//              * @param message ApproveFriendApplyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApproveFriendApplyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApproveFriendApplyResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApproveFriendApplyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApproveFriendApplyResp;

//             /**
//              * Decodes an ApproveFriendApplyResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApproveFriendApplyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApproveFriendApplyResp;

//             /**
//              * Verifies an ApproveFriendApplyResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PushNewFriendResp. */
//         interface IPushNewFriendResp {

//             /** PushNewFriendResp newFriend */
//             newFriend?: (luck.protobuf.ISimplePlayerPB|null);
//         }

//         /** Represents a PushNewFriendResp. */
//         class PushNewFriendResp implements IPushNewFriendResp {

//             /**
//              * Constructs a new PushNewFriendResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPushNewFriendResp);

//             /** PushNewFriendResp newFriend. */
//             public newFriend?: (luck.protobuf.ISimplePlayerPB|null);

//             /**
//              * Creates a new PushNewFriendResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PushNewFriendResp instance
//              */
//             public static create(properties?: luck.protobuf.IPushNewFriendResp): luck.protobuf.PushNewFriendResp;

//             /**
//              * Encodes the specified PushNewFriendResp message. Does not implicitly {@link luck.protobuf.PushNewFriendResp.verify|verify} messages.
//              * @param message PushNewFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPushNewFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PushNewFriendResp message, length delimited. Does not implicitly {@link luck.protobuf.PushNewFriendResp.verify|verify} messages.
//              * @param message PushNewFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPushNewFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PushNewFriendResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PushNewFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PushNewFriendResp;

//             /**
//              * Decodes a PushNewFriendResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PushNewFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PushNewFriendResp;

//             /**
//              * Verifies a PushNewFriendResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DeleteFriendResp. */
//         interface IDeleteFriendResp {

//             /** DeleteFriendResp result */
//             result: number;

//             /** DeleteFriendResp friendsList */
//             friendsList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents a DeleteFriendResp. */
//         class DeleteFriendResp implements IDeleteFriendResp {

//             /**
//              * Constructs a new DeleteFriendResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDeleteFriendResp);

//             /** DeleteFriendResp result. */
//             public result: number;

//             /** DeleteFriendResp friendsList. */
//             public friendsList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new DeleteFriendResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DeleteFriendResp instance
//              */
//             public static create(properties?: luck.protobuf.IDeleteFriendResp): luck.protobuf.DeleteFriendResp;

//             /**
//              * Encodes the specified DeleteFriendResp message. Does not implicitly {@link luck.protobuf.DeleteFriendResp.verify|verify} messages.
//              * @param message DeleteFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDeleteFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DeleteFriendResp message, length delimited. Does not implicitly {@link luck.protobuf.DeleteFriendResp.verify|verify} messages.
//              * @param message DeleteFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDeleteFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DeleteFriendResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DeleteFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DeleteFriendResp;

//             /**
//              * Decodes a DeleteFriendResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DeleteFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DeleteFriendResp;

//             /**
//              * Verifies a DeleteFriendResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LoadShopResp. */
//         interface ILoadShopResp {

//             /** LoadShopResp result */
//             result: number;

//             /** LoadShopResp shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents a LoadShopResp. */
//         class LoadShopResp implements ILoadShopResp {

//             /**
//              * Constructs a new LoadShopResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILoadShopResp);

//             /** LoadShopResp result. */
//             public result: number;

//             /** LoadShopResp shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new LoadShopResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LoadShopResp instance
//              */
//             public static create(properties?: luck.protobuf.ILoadShopResp): luck.protobuf.LoadShopResp;

//             /**
//              * Encodes the specified LoadShopResp message. Does not implicitly {@link luck.protobuf.LoadShopResp.verify|verify} messages.
//              * @param message LoadShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILoadShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LoadShopResp message, length delimited. Does not implicitly {@link luck.protobuf.LoadShopResp.verify|verify} messages.
//              * @param message LoadShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILoadShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LoadShopResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LoadShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LoadShopResp;

//             /**
//              * Decodes a LoadShopResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LoadShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LoadShopResp;

//             /**
//              * Verifies a LoadShopResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an IllustrationPushResp. */
//         interface IIllustrationPushResp {

//             /** IllustrationPushResp result */
//             result: number;

//             /** IllustrationPushResp weaponList */
//             weaponList?: (number[]|null);

//             /** IllustrationPushResp cardList */
//             cardList?: (number[]|null);

//             /** IllustrationPushResp clothesList */
//             clothesList?: (number[]|null);
//         }

//         /** Represents an IllustrationPushResp. */
//         class IllustrationPushResp implements IIllustrationPushResp {

//             /**
//              * Constructs a new IllustrationPushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IIllustrationPushResp);

//             /** IllustrationPushResp result. */
//             public result: number;

//             /** IllustrationPushResp weaponList. */
//             public weaponList: number[];

//             /** IllustrationPushResp cardList. */
//             public cardList: number[];

//             /** IllustrationPushResp clothesList. */
//             public clothesList: number[];

//             /**
//              * Creates a new IllustrationPushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns IllustrationPushResp instance
//              */
//             public static create(properties?: luck.protobuf.IIllustrationPushResp): luck.protobuf.IllustrationPushResp;

//             /**
//              * Encodes the specified IllustrationPushResp message. Does not implicitly {@link luck.protobuf.IllustrationPushResp.verify|verify} messages.
//              * @param message IllustrationPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IIllustrationPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified IllustrationPushResp message, length delimited. Does not implicitly {@link luck.protobuf.IllustrationPushResp.verify|verify} messages.
//              * @param message IllustrationPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IIllustrationPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an IllustrationPushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns IllustrationPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.IllustrationPushResp;

//             /**
//              * Decodes an IllustrationPushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns IllustrationPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.IllustrationPushResp;

//             /**
//              * Verifies an IllustrationPushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SendChatResp. */
//         interface ISendChatResp {

//             /** SendChatResp result */
//             result: number;
//         }

//         /** Represents a SendChatResp. */
//         class SendChatResp implements ISendChatResp {

//             /**
//              * Constructs a new SendChatResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISendChatResp);

//             /** SendChatResp result. */
//             public result: number;

//             /**
//              * Creates a new SendChatResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SendChatResp instance
//              */
//             public static create(properties?: luck.protobuf.ISendChatResp): luck.protobuf.SendChatResp;

//             /**
//              * Encodes the specified SendChatResp message. Does not implicitly {@link luck.protobuf.SendChatResp.verify|verify} messages.
//              * @param message SendChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISendChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SendChatResp message, length delimited. Does not implicitly {@link luck.protobuf.SendChatResp.verify|verify} messages.
//              * @param message SendChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISendChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SendChatResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SendChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SendChatResp;

//             /**
//              * Decodes a SendChatResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SendChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SendChatResp;

//             /**
//              * Verifies a SendChatResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ReceiveChatResp. */
//         interface IReceiveChatResp {

//             /** ReceiveChatResp chatInfo */
//             chatInfo: luck.protobuf.IChatInfoPB;
//         }

//         /** Represents a ReceiveChatResp. */
//         class ReceiveChatResp implements IReceiveChatResp {

//             /**
//              * Constructs a new ReceiveChatResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IReceiveChatResp);

//             /** ReceiveChatResp chatInfo. */
//             public chatInfo: luck.protobuf.IChatInfoPB;

//             /**
//              * Creates a new ReceiveChatResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ReceiveChatResp instance
//              */
//             public static create(properties?: luck.protobuf.IReceiveChatResp): luck.protobuf.ReceiveChatResp;

//             /**
//              * Encodes the specified ReceiveChatResp message. Does not implicitly {@link luck.protobuf.ReceiveChatResp.verify|verify} messages.
//              * @param message ReceiveChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IReceiveChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ReceiveChatResp message, length delimited. Does not implicitly {@link luck.protobuf.ReceiveChatResp.verify|verify} messages.
//              * @param message ReceiveChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IReceiveChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ReceiveChatResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ReceiveChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ReceiveChatResp;

//             /**
//              * Decodes a ReceiveChatResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ReceiveChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ReceiveChatResp;

//             /**
//              * Verifies a ReceiveChatResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PushDeleteFriendResp. */
//         interface IPushDeleteFriendResp {

//             /** PushDeleteFriendResp delId */
//             delId: (number|Long);
//         }

//         /** Represents a PushDeleteFriendResp. */
//         class PushDeleteFriendResp implements IPushDeleteFriendResp {

//             /**
//              * Constructs a new PushDeleteFriendResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPushDeleteFriendResp);

//             /** PushDeleteFriendResp delId. */
//             public delId: (number|Long);

//             /**
//              * Creates a new PushDeleteFriendResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PushDeleteFriendResp instance
//              */
//             public static create(properties?: luck.protobuf.IPushDeleteFriendResp): luck.protobuf.PushDeleteFriendResp;

//             /**
//              * Encodes the specified PushDeleteFriendResp message. Does not implicitly {@link luck.protobuf.PushDeleteFriendResp.verify|verify} messages.
//              * @param message PushDeleteFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPushDeleteFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PushDeleteFriendResp message, length delimited. Does not implicitly {@link luck.protobuf.PushDeleteFriendResp.verify|verify} messages.
//              * @param message PushDeleteFriendResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPushDeleteFriendResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PushDeleteFriendResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PushDeleteFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PushDeleteFriendResp;

//             /**
//              * Decodes a PushDeleteFriendResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PushDeleteFriendResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PushDeleteFriendResp;

//             /**
//              * Verifies a PushDeleteFriendResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ExpansionBagResp. */
//         interface IExpansionBagResp {

//             /** ExpansionBagResp result */
//             result: number;

//             /** ExpansionBagResp playerBase */
//             playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** ExpansionBagResp playerExtra */
//             playerExtra?: (luck.protobuf.IPlayerExtraPB|null);
//         }

//         /** Represents an ExpansionBagResp. */
//         class ExpansionBagResp implements IExpansionBagResp {

//             /**
//              * Constructs a new ExpansionBagResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IExpansionBagResp);

//             /** ExpansionBagResp result. */
//             public result: number;

//             /** ExpansionBagResp playerBase. */
//             public playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** ExpansionBagResp playerExtra. */
//             public playerExtra?: (luck.protobuf.IPlayerExtraPB|null);

//             /**
//              * Creates a new ExpansionBagResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ExpansionBagResp instance
//              */
//             public static create(properties?: luck.protobuf.IExpansionBagResp): luck.protobuf.ExpansionBagResp;

//             /**
//              * Encodes the specified ExpansionBagResp message. Does not implicitly {@link luck.protobuf.ExpansionBagResp.verify|verify} messages.
//              * @param message ExpansionBagResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IExpansionBagResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ExpansionBagResp message, length delimited. Does not implicitly {@link luck.protobuf.ExpansionBagResp.verify|verify} messages.
//              * @param message ExpansionBagResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IExpansionBagResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ExpansionBagResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ExpansionBagResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ExpansionBagResp;

//             /**
//              * Decodes an ExpansionBagResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ExpansionBagResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ExpansionBagResp;

//             /**
//              * Verifies an ExpansionBagResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ActivityTollgateResp. */
//         interface IActivityTollgateResp {

//             /** ActivityTollgateResp result */
//             result: number;
//         }

//         /** Represents an ActivityTollgateResp. */
//         class ActivityTollgateResp implements IActivityTollgateResp {

//             /**
//              * Constructs a new ActivityTollgateResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IActivityTollgateResp);

//             /** ActivityTollgateResp result. */
//             public result: number;

//             /**
//              * Creates a new ActivityTollgateResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ActivityTollgateResp instance
//              */
//             public static create(properties?: luck.protobuf.IActivityTollgateResp): luck.protobuf.ActivityTollgateResp;

//             /**
//              * Encodes the specified ActivityTollgateResp message. Does not implicitly {@link luck.protobuf.ActivityTollgateResp.verify|verify} messages.
//              * @param message ActivityTollgateResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IActivityTollgateResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ActivityTollgateResp message, length delimited. Does not implicitly {@link luck.protobuf.ActivityTollgateResp.verify|verify} messages.
//              * @param message ActivityTollgateResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IActivityTollgateResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ActivityTollgateResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ActivityTollgateResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ActivityTollgateResp;

//             /**
//              * Decodes an ActivityTollgateResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ActivityTollgateResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ActivityTollgateResp;

//             /**
//              * Verifies an ActivityTollgateResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SellGoodsResp. */
//         interface ISellGoodsResp {

//             /** SellGoodsResp result */
//             result: number;

//             /** SellGoodsResp gainGold */
//             gainGold?: (number|Long|null);

//             /** SellGoodsResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a SellGoodsResp. */
//         class SellGoodsResp implements ISellGoodsResp {

//             /**
//              * Constructs a new SellGoodsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISellGoodsResp);

//             /** SellGoodsResp result. */
//             public result: number;

//             /** SellGoodsResp gainGold. */
//             public gainGold: (number|Long);

//             /** SellGoodsResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new SellGoodsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SellGoodsResp instance
//              */
//             public static create(properties?: luck.protobuf.ISellGoodsResp): luck.protobuf.SellGoodsResp;

//             /**
//              * Encodes the specified SellGoodsResp message. Does not implicitly {@link luck.protobuf.SellGoodsResp.verify|verify} messages.
//              * @param message SellGoodsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISellGoodsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SellGoodsResp message, length delimited. Does not implicitly {@link luck.protobuf.SellGoodsResp.verify|verify} messages.
//              * @param message SellGoodsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISellGoodsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SellGoodsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SellGoodsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SellGoodsResp;

//             /**
//              * Decodes a SellGoodsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SellGoodsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SellGoodsResp;

//             /**
//              * Verifies a SellGoodsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CompleteActivityTollgateResp. */
//         interface ICompleteActivityTollgateResp {

//             /** CompleteActivityTollgateResp result */
//             result: number;

//             /** CompleteActivityTollgateResp rewardList */
//             rewardList?: (luck.protobuf.IpveBallteFinishReward[]|null);

//             /** CompleteActivityTollgateResp gainExp */
//             gainExp?: (number|null);

//             /** CompleteActivityTollgateResp lv */
//             lv?: (number|null);
//         }

//         /** Represents a CompleteActivityTollgateResp. */
//         class CompleteActivityTollgateResp implements ICompleteActivityTollgateResp {

//             /**
//              * Constructs a new CompleteActivityTollgateResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICompleteActivityTollgateResp);

//             /** CompleteActivityTollgateResp result. */
//             public result: number;

//             /** CompleteActivityTollgateResp rewardList. */
//             public rewardList: luck.protobuf.IpveBallteFinishReward[];

//             /** CompleteActivityTollgateResp gainExp. */
//             public gainExp: number;

//             /** CompleteActivityTollgateResp lv. */
//             public lv: number;

//             /**
//              * Creates a new CompleteActivityTollgateResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CompleteActivityTollgateResp instance
//              */
//             public static create(properties?: luck.protobuf.ICompleteActivityTollgateResp): luck.protobuf.CompleteActivityTollgateResp;

//             /**
//              * Encodes the specified CompleteActivityTollgateResp message. Does not implicitly {@link luck.protobuf.CompleteActivityTollgateResp.verify|verify} messages.
//              * @param message CompleteActivityTollgateResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICompleteActivityTollgateResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CompleteActivityTollgateResp message, length delimited. Does not implicitly {@link luck.protobuf.CompleteActivityTollgateResp.verify|verify} messages.
//              * @param message CompleteActivityTollgateResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICompleteActivityTollgateResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CompleteActivityTollgateResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CompleteActivityTollgateResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CompleteActivityTollgateResp;

//             /**
//              * Decodes a CompleteActivityTollgateResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CompleteActivityTollgateResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CompleteActivityTollgateResp;

//             /**
//              * Verifies a CompleteActivityTollgateResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DrawLoveBentoResp. */
//         interface IDrawLoveBentoResp {

//             /** DrawLoveBentoResp result */
//             result: number;
//         }

//         /** Represents a DrawLoveBentoResp. */
//         class DrawLoveBentoResp implements IDrawLoveBentoResp {

//             /**
//              * Constructs a new DrawLoveBentoResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDrawLoveBentoResp);

//             /** DrawLoveBentoResp result. */
//             public result: number;

//             /**
//              * Creates a new DrawLoveBentoResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DrawLoveBentoResp instance
//              */
//             public static create(properties?: luck.protobuf.IDrawLoveBentoResp): luck.protobuf.DrawLoveBentoResp;

//             /**
//              * Encodes the specified DrawLoveBentoResp message. Does not implicitly {@link luck.protobuf.DrawLoveBentoResp.verify|verify} messages.
//              * @param message DrawLoveBentoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDrawLoveBentoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DrawLoveBentoResp message, length delimited. Does not implicitly {@link luck.protobuf.DrawLoveBentoResp.verify|verify} messages.
//              * @param message DrawLoveBentoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDrawLoveBentoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DrawLoveBentoResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DrawLoveBentoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DrawLoveBentoResp;

//             /**
//              * Decodes a DrawLoveBentoResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DrawLoveBentoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DrawLoveBentoResp;

//             /**
//              * Verifies a DrawLoveBentoResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PropConsumeResp. */
//         interface IPropConsumeResp {

//             /** PropConsumeResp result */
//             result: number;

//             /** PropConsumeResp gainGold */
//             gainGold?: (number|Long|null);

//             /** PropConsumeResp gainDiamond */
//             gainDiamond?: (number|Long|null);

//             /** PropConsumeResp gainBody */
//             gainBody?: (number|Long|null);

//             /** PropConsumeResp itemBag */
//             itemBag?: (luck.protobuf.IItemBagPB|null);

//             /** PropConsumeResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** PropConsumeResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** PropConsumeResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** PropConsumeResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** PropConsumeResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a PropConsumeResp. */
//         class PropConsumeResp implements IPropConsumeResp {

//             /**
//              * Constructs a new PropConsumeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPropConsumeResp);

//             /** PropConsumeResp result. */
//             public result: number;

//             /** PropConsumeResp gainGold. */
//             public gainGold: (number|Long);

//             /** PropConsumeResp gainDiamond. */
//             public gainDiamond: (number|Long);

//             /** PropConsumeResp gainBody. */
//             public gainBody: (number|Long);

//             /** PropConsumeResp itemBag. */
//             public itemBag?: (luck.protobuf.IItemBagPB|null);

//             /** PropConsumeResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** PropConsumeResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** PropConsumeResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** PropConsumeResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** PropConsumeResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new PropConsumeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PropConsumeResp instance
//              */
//             public static create(properties?: luck.protobuf.IPropConsumeResp): luck.protobuf.PropConsumeResp;

//             /**
//              * Encodes the specified PropConsumeResp message. Does not implicitly {@link luck.protobuf.PropConsumeResp.verify|verify} messages.
//              * @param message PropConsumeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPropConsumeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PropConsumeResp message, length delimited. Does not implicitly {@link luck.protobuf.PropConsumeResp.verify|verify} messages.
//              * @param message PropConsumeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPropConsumeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PropConsumeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PropConsumeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PropConsumeResp;

//             /**
//              * Decodes a PropConsumeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PropConsumeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PropConsumeResp;

//             /**
//              * Verifies a PropConsumeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PullGangInfoResp. */
//         interface IPullGangInfoResp {

//             /** PullGangInfoResp result */
//             result: number;

//             /** PullGangInfoResp gang */
//             gang?: (luck.protobuf.IGangPB|null);
//         }

//         /** Represents a PullGangInfoResp. */
//         class PullGangInfoResp implements IPullGangInfoResp {

//             /**
//              * Constructs a new PullGangInfoResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPullGangInfoResp);

//             /** PullGangInfoResp result. */
//             public result: number;

//             /** PullGangInfoResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /**
//              * Creates a new PullGangInfoResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PullGangInfoResp instance
//              */
//             public static create(properties?: luck.protobuf.IPullGangInfoResp): luck.protobuf.PullGangInfoResp;

//             /**
//              * Encodes the specified PullGangInfoResp message. Does not implicitly {@link luck.protobuf.PullGangInfoResp.verify|verify} messages.
//              * @param message PullGangInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPullGangInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PullGangInfoResp message, length delimited. Does not implicitly {@link luck.protobuf.PullGangInfoResp.verify|verify} messages.
//              * @param message PullGangInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPullGangInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PullGangInfoResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PullGangInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PullGangInfoResp;

//             /**
//              * Decodes a PullGangInfoResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PullGangInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PullGangInfoResp;

//             /**
//              * Verifies a PullGangInfoResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ChangeGangJobResp. */
//         interface IChangeGangJobResp {

//             /** ChangeGangJobResp result */
//             result: number;

//             /** ChangeGangJobResp gang */
//             gang?: (luck.protobuf.IGangPB|null);
//         }

//         /** Represents a ChangeGangJobResp. */
//         class ChangeGangJobResp implements IChangeGangJobResp {

//             /**
//              * Constructs a new ChangeGangJobResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IChangeGangJobResp);

//             /** ChangeGangJobResp result. */
//             public result: number;

//             /** ChangeGangJobResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /**
//              * Creates a new ChangeGangJobResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ChangeGangJobResp instance
//              */
//             public static create(properties?: luck.protobuf.IChangeGangJobResp): luck.protobuf.ChangeGangJobResp;

//             /**
//              * Encodes the specified ChangeGangJobResp message. Does not implicitly {@link luck.protobuf.ChangeGangJobResp.verify|verify} messages.
//              * @param message ChangeGangJobResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IChangeGangJobResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ChangeGangJobResp message, length delimited. Does not implicitly {@link luck.protobuf.ChangeGangJobResp.verify|verify} messages.
//              * @param message ChangeGangJobResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IChangeGangJobResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ChangeGangJobResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ChangeGangJobResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ChangeGangJobResp;

//             /**
//              * Decodes a ChangeGangJobResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ChangeGangJobResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ChangeGangJobResp;

//             /**
//              * Verifies a ChangeGangJobResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a QuitGangResp. */
//         interface IQuitGangResp {

//             /** QuitGangResp result */
//             result: number;

//             /** QuitGangResp playerBase */
//             playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** QuitGangResp isGangExist */
//             isGangExist?: (boolean|null);
//         }

//         /** Represents a QuitGangResp. */
//         class QuitGangResp implements IQuitGangResp {

//             /**
//              * Constructs a new QuitGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IQuitGangResp);

//             /** QuitGangResp result. */
//             public result: number;

//             /** QuitGangResp playerBase. */
//             public playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /** QuitGangResp isGangExist. */
//             public isGangExist: boolean;

//             /**
//              * Creates a new QuitGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns QuitGangResp instance
//              */
//             public static create(properties?: luck.protobuf.IQuitGangResp): luck.protobuf.QuitGangResp;

//             /**
//              * Encodes the specified QuitGangResp message. Does not implicitly {@link luck.protobuf.QuitGangResp.verify|verify} messages.
//              * @param message QuitGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IQuitGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified QuitGangResp message, length delimited. Does not implicitly {@link luck.protobuf.QuitGangResp.verify|verify} messages.
//              * @param message QuitGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IQuitGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a QuitGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns QuitGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.QuitGangResp;

//             /**
//              * Decodes a QuitGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns QuitGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.QuitGangResp;

//             /**
//              * Verifies a QuitGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a KickOutGangResp. */
//         interface IKickOutGangResp {

//             /** KickOutGangResp result */
//             result: number;

//             /** KickOutGangResp gang */
//             gang?: (luck.protobuf.IGangPB|null);
//         }

//         /** Represents a KickOutGangResp. */
//         class KickOutGangResp implements IKickOutGangResp {

//             /**
//              * Constructs a new KickOutGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IKickOutGangResp);

//             /** KickOutGangResp result. */
//             public result: number;

//             /** KickOutGangResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /**
//              * Creates a new KickOutGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns KickOutGangResp instance
//              */
//             public static create(properties?: luck.protobuf.IKickOutGangResp): luck.protobuf.KickOutGangResp;

//             /**
//              * Encodes the specified KickOutGangResp message. Does not implicitly {@link luck.protobuf.KickOutGangResp.verify|verify} messages.
//              * @param message KickOutGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IKickOutGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified KickOutGangResp message, length delimited. Does not implicitly {@link luck.protobuf.KickOutGangResp.verify|verify} messages.
//              * @param message KickOutGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IKickOutGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a KickOutGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns KickOutGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.KickOutGangResp;

//             /**
//              * Decodes a KickOutGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns KickOutGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.KickOutGangResp;

//             /**
//              * Verifies a KickOutGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApproveJoinGangResp. */
//         interface IApproveJoinGangResp {

//             /** ApproveJoinGangResp result */
//             result: number;

//             /** ApproveJoinGangResp gang */
//             gang?: (luck.protobuf.IGangPB|null);
//         }

//         /** Represents an ApproveJoinGangResp. */
//         class ApproveJoinGangResp implements IApproveJoinGangResp {

//             /**
//              * Constructs a new ApproveJoinGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApproveJoinGangResp);

//             /** ApproveJoinGangResp result. */
//             public result: number;

//             /** ApproveJoinGangResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /**
//              * Creates a new ApproveJoinGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApproveJoinGangResp instance
//              */
//             public static create(properties?: luck.protobuf.IApproveJoinGangResp): luck.protobuf.ApproveJoinGangResp;

//             /**
//              * Encodes the specified ApproveJoinGangResp message. Does not implicitly {@link luck.protobuf.ApproveJoinGangResp.verify|verify} messages.
//              * @param message ApproveJoinGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApproveJoinGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApproveJoinGangResp message, length delimited. Does not implicitly {@link luck.protobuf.ApproveJoinGangResp.verify|verify} messages.
//              * @param message ApproveJoinGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApproveJoinGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApproveJoinGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApproveJoinGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApproveJoinGangResp;

//             /**
//              * Decodes an ApproveJoinGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApproveJoinGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApproveJoinGangResp;

//             /**
//              * Verifies an ApproveJoinGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an ApplyJoinGangResp. */
//         interface IApplyJoinGangResp {

//             /** ApplyJoinGangResp result */
//             result: number;
//         }

//         /** Represents an ApplyJoinGangResp. */
//         class ApplyJoinGangResp implements IApplyJoinGangResp {

//             /**
//              * Constructs a new ApplyJoinGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IApplyJoinGangResp);

//             /** ApplyJoinGangResp result. */
//             public result: number;

//             /**
//              * Creates a new ApplyJoinGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ApplyJoinGangResp instance
//              */
//             public static create(properties?: luck.protobuf.IApplyJoinGangResp): luck.protobuf.ApplyJoinGangResp;

//             /**
//              * Encodes the specified ApplyJoinGangResp message. Does not implicitly {@link luck.protobuf.ApplyJoinGangResp.verify|verify} messages.
//              * @param message ApplyJoinGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IApplyJoinGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ApplyJoinGangResp message, length delimited. Does not implicitly {@link luck.protobuf.ApplyJoinGangResp.verify|verify} messages.
//              * @param message ApplyJoinGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IApplyJoinGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an ApplyJoinGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ApplyJoinGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ApplyJoinGangResp;

//             /**
//              * Decodes an ApplyJoinGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ApplyJoinGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ApplyJoinGangResp;

//             /**
//              * Verifies an ApplyJoinGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a CreateGangResp. */
//         interface ICreateGangResp {

//             /** CreateGangResp result */
//             result: number;

//             /** CreateGangResp gang */
//             gang?: (luck.protobuf.IGangPB|null);

//             /** CreateGangResp playerBase */
//             playerBase?: (luck.protobuf.IPlayerBasePB|null);
//         }

//         /** Represents a CreateGangResp. */
//         class CreateGangResp implements ICreateGangResp {

//             /**
//              * Constructs a new CreateGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ICreateGangResp);

//             /** CreateGangResp result. */
//             public result: number;

//             /** CreateGangResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /** CreateGangResp playerBase. */
//             public playerBase?: (luck.protobuf.IPlayerBasePB|null);

//             /**
//              * Creates a new CreateGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns CreateGangResp instance
//              */
//             public static create(properties?: luck.protobuf.ICreateGangResp): luck.protobuf.CreateGangResp;

//             /**
//              * Encodes the specified CreateGangResp message. Does not implicitly {@link luck.protobuf.CreateGangResp.verify|verify} messages.
//              * @param message CreateGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ICreateGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified CreateGangResp message, length delimited. Does not implicitly {@link luck.protobuf.CreateGangResp.verify|verify} messages.
//              * @param message CreateGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ICreateGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a CreateGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns CreateGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.CreateGangResp;

//             /**
//              * Decodes a CreateGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns CreateGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.CreateGangResp;

//             /**
//              * Verifies a CreateGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PullAllGangInfoResp. */
//         interface IPullAllGangInfoResp {

//             /** PullAllGangInfoResp result */
//             result: number;

//             /** PullAllGangInfoResp gangList */
//             gangList?: (luck.protobuf.IGangPB[]|null);
//         }

//         /** Represents a PullAllGangInfoResp. */
//         class PullAllGangInfoResp implements IPullAllGangInfoResp {

//             /**
//              * Constructs a new PullAllGangInfoResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPullAllGangInfoResp);

//             /** PullAllGangInfoResp result. */
//             public result: number;

//             /** PullAllGangInfoResp gangList. */
//             public gangList: luck.protobuf.IGangPB[];

//             /**
//              * Creates a new PullAllGangInfoResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PullAllGangInfoResp instance
//              */
//             public static create(properties?: luck.protobuf.IPullAllGangInfoResp): luck.protobuf.PullAllGangInfoResp;

//             /**
//              * Encodes the specified PullAllGangInfoResp message. Does not implicitly {@link luck.protobuf.PullAllGangInfoResp.verify|verify} messages.
//              * @param message PullAllGangInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPullAllGangInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PullAllGangInfoResp message, length delimited. Does not implicitly {@link luck.protobuf.PullAllGangInfoResp.verify|verify} messages.
//              * @param message PullAllGangInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPullAllGangInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PullAllGangInfoResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PullAllGangInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PullAllGangInfoResp;

//             /**
//              * Decodes a PullAllGangInfoResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PullAllGangInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PullAllGangInfoResp;

//             /**
//              * Verifies a PullAllGangInfoResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SearchGangResp. */
//         interface ISearchGangResp {

//             /** SearchGangResp result */
//             result: number;

//             /** SearchGangResp gangList */
//             gangList?: (luck.protobuf.IGangPB[]|null);
//         }

//         /** Represents a SearchGangResp. */
//         class SearchGangResp implements ISearchGangResp {

//             /**
//              * Constructs a new SearchGangResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISearchGangResp);

//             /** SearchGangResp result. */
//             public result: number;

//             /** SearchGangResp gangList. */
//             public gangList: luck.protobuf.IGangPB[];

//             /**
//              * Creates a new SearchGangResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SearchGangResp instance
//              */
//             public static create(properties?: luck.protobuf.ISearchGangResp): luck.protobuf.SearchGangResp;

//             /**
//              * Encodes the specified SearchGangResp message. Does not implicitly {@link luck.protobuf.SearchGangResp.verify|verify} messages.
//              * @param message SearchGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISearchGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SearchGangResp message, length delimited. Does not implicitly {@link luck.protobuf.SearchGangResp.verify|verify} messages.
//              * @param message SearchGangResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISearchGangResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SearchGangResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SearchGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SearchGangResp;

//             /**
//              * Decodes a SearchGangResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SearchGangResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SearchGangResp;

//             /**
//              * Verifies a SearchGangResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a BattleResurgenceResp. */
//         interface IBattleResurgenceResp {

//             /** BattleResurgenceResp result */
//             result: number;
//         }

//         /** Represents a BattleResurgenceResp. */
//         class BattleResurgenceResp implements IBattleResurgenceResp {

//             /**
//              * Constructs a new BattleResurgenceResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IBattleResurgenceResp);

//             /** BattleResurgenceResp result. */
//             public result: number;

//             /**
//              * Creates a new BattleResurgenceResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns BattleResurgenceResp instance
//              */
//             public static create(properties?: luck.protobuf.IBattleResurgenceResp): luck.protobuf.BattleResurgenceResp;

//             /**
//              * Encodes the specified BattleResurgenceResp message. Does not implicitly {@link luck.protobuf.BattleResurgenceResp.verify|verify} messages.
//              * @param message BattleResurgenceResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IBattleResurgenceResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified BattleResurgenceResp message, length delimited. Does not implicitly {@link luck.protobuf.BattleResurgenceResp.verify|verify} messages.
//              * @param message BattleResurgenceResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IBattleResurgenceResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a BattleResurgenceResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns BattleResurgenceResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.BattleResurgenceResp;

//             /**
//              * Decodes a BattleResurgenceResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns BattleResurgenceResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.BattleResurgenceResp;

//             /**
//              * Verifies a BattleResurgenceResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a ReconnectionResp. */
//         interface IReconnectionResp {

//             /** ReconnectionResp result */
//             result: number;

//             /** ReconnectionResp playerPB */
//             playerPB?: (luck.protobuf.IPlayerPB|null);
//         }

//         /** Represents a ReconnectionResp. */
//         class ReconnectionResp implements IReconnectionResp {

//             /**
//              * Constructs a new ReconnectionResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IReconnectionResp);

//             /** ReconnectionResp result. */
//             public result: number;

//             /** ReconnectionResp playerPB. */
//             public playerPB?: (luck.protobuf.IPlayerPB|null);

//             /**
//              * Creates a new ReconnectionResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns ReconnectionResp instance
//              */
//             public static create(properties?: luck.protobuf.IReconnectionResp): luck.protobuf.ReconnectionResp;

//             /**
//              * Encodes the specified ReconnectionResp message. Does not implicitly {@link luck.protobuf.ReconnectionResp.verify|verify} messages.
//              * @param message ReconnectionResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IReconnectionResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified ReconnectionResp message, length delimited. Does not implicitly {@link luck.protobuf.ReconnectionResp.verify|verify} messages.
//              * @param message ReconnectionResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IReconnectionResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a ReconnectionResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns ReconnectionResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.ReconnectionResp;

//             /**
//              * Decodes a ReconnectionResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns ReconnectionResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.ReconnectionResp;

//             /**
//              * Verifies a ReconnectionResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a JiGuangRegisterResp. */
//         interface IJiGuangRegisterResp {

//             /** JiGuangRegisterResp result */
//             result: number;
//         }

//         /** Represents a JiGuangRegisterResp. */
//         class JiGuangRegisterResp implements IJiGuangRegisterResp {

//             /**
//              * Constructs a new JiGuangRegisterResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IJiGuangRegisterResp);

//             /** JiGuangRegisterResp result. */
//             public result: number;

//             /**
//              * Creates a new JiGuangRegisterResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns JiGuangRegisterResp instance
//              */
//             public static create(properties?: luck.protobuf.IJiGuangRegisterResp): luck.protobuf.JiGuangRegisterResp;

//             /**
//              * Encodes the specified JiGuangRegisterResp message. Does not implicitly {@link luck.protobuf.JiGuangRegisterResp.verify|verify} messages.
//              * @param message JiGuangRegisterResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IJiGuangRegisterResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified JiGuangRegisterResp message, length delimited. Does not implicitly {@link luck.protobuf.JiGuangRegisterResp.verify|verify} messages.
//              * @param message JiGuangRegisterResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IJiGuangRegisterResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a JiGuangRegisterResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns JiGuangRegisterResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.JiGuangRegisterResp;

//             /**
//              * Decodes a JiGuangRegisterResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns JiGuangRegisterResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.JiGuangRegisterResp;

//             /**
//              * Verifies a JiGuangRegisterResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a TaskUpdatePushResp. */
//         interface ITaskUpdatePushResp {

//             /** TaskUpdatePushResp addMainTaskList */
//             addMainTaskList?: (luck.protobuf.IMainTaskPB[]|null);

//             /** TaskUpdatePushResp addDailyTaskList */
//             addDailyTaskList?: (luck.protobuf.IDailyTaskPB[]|null);

//             /** TaskUpdatePushResp addWeekTaskList */
//             addWeekTaskList?: (luck.protobuf.IWeekTaskPB[]|null);

//             /** TaskUpdatePushResp addRewardTaskList */
//             addRewardTaskList?: (luck.protobuf.IRewardTaskPB[]|null);

//             /** TaskUpdatePushResp addGangTaskList */
//             addGangTaskList?: (luck.protobuf.IGangTaskPB[]|null);

//             /** TaskUpdatePushResp updateMainTaskList */
//             updateMainTaskList?: (luck.protobuf.IMainTaskPB[]|null);

//             /** TaskUpdatePushResp updateDailyTaskList */
//             updateDailyTaskList?: (luck.protobuf.IDailyTaskPB[]|null);

//             /** TaskUpdatePushResp updateWeekTaskList */
//             updateWeekTaskList?: (luck.protobuf.IWeekTaskPB[]|null);

//             /** TaskUpdatePushResp updateRewardTaskList */
//             updateRewardTaskList?: (luck.protobuf.IRewardTaskPB[]|null);

//             /** TaskUpdatePushResp updateGangTaskList */
//             updateGangTaskList?: (luck.protobuf.IGangTaskPB[]|null);

//             /** TaskUpdatePushResp delMainTaskList */
//             delMainTaskList?: (number[]|null);

//             /** TaskUpdatePushResp delDailyTaskList */
//             delDailyTaskList?: (number[]|null);

//             /** TaskUpdatePushResp delWeekTaskList */
//             delWeekTaskList?: (number[]|null);

//             /** TaskUpdatePushResp delRewardTaskList */
//             delRewardTaskList?: (number[]|null);

//             /** TaskUpdatePushResp delGangTaskList */
//             delGangTaskList?: (number[]|null);

//             /** TaskUpdatePushResp dailyTaskActivity */
//             dailyTaskActivity?: (number|null);

//             /** TaskUpdatePushResp addAchievementTaskList */
//             addAchievementTaskList?: (luck.protobuf.IAchievementTaskPB[]|null);

//             /** TaskUpdatePushResp updateAchievementTaskList */
//             updateAchievementTaskList?: (luck.protobuf.IAchievementTaskPB[]|null);

//             /** TaskUpdatePushResp delAchievementTaskList */
//             delAchievementTaskList?: (number[]|null);

//             /** TaskUpdatePushResp achievementPoint */
//             achievementPoint?: (number|Long|null);

//             /** TaskUpdatePushResp updateAchievementType1List */
//             updateAchievementType1List?: (luck.protobuf.IAchievementTypePB[]|null);

//             /** TaskUpdatePushResp updateAchievementType2List */
//             updateAchievementType2List?: (luck.protobuf.IAchievementTypePB[]|null);

//             /** TaskUpdatePushResp addActivityTaskList */
//             addActivityTaskList?: (luck.protobuf.IActivityTaskPB[]|null);

//             /** TaskUpdatePushResp updateActivityTaskList */
//             updateActivityTaskList?: (luck.protobuf.IActivityTaskPB[]|null);

//             /** TaskUpdatePushResp delActivityTaskList */
//             delActivityTaskList?: (number[]|null);

//             /** TaskUpdatePushResp addActivityTaskRewardList */
//             addActivityTaskRewardList?: (luck.protobuf.IactivityTaskRewardPB[]|null);

//             /** TaskUpdatePushResp updateActivityTaskRewardList */
//             updateActivityTaskRewardList?: (luck.protobuf.IactivityTaskRewardPB[]|null);

//             /** TaskUpdatePushResp delActivityTaskRewardList */
//             delActivityTaskRewardList?: (number[]|null);

//             /** TaskUpdatePushResp addSpecialTaskList */
//             addSpecialTaskList?: (luck.protobuf.ISpecialTaskPB[]|null);

//             /** TaskUpdatePushResp updateSpecialTaskList */
//             updateSpecialTaskList?: (luck.protobuf.ISpecialTaskPB[]|null);

//             /** TaskUpdatePushResp delSpecialTaskList */
//             delSpecialTaskList?: (number[]|null);

//             /** TaskUpdatePushResp gangTaskActivity */
//             gangTaskActivity?: (number|null);
//         }

//         /** Represents a TaskUpdatePushResp. */
//         class TaskUpdatePushResp implements ITaskUpdatePushResp {

//             /**
//              * Constructs a new TaskUpdatePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ITaskUpdatePushResp);

//             /** TaskUpdatePushResp addMainTaskList. */
//             public addMainTaskList: luck.protobuf.IMainTaskPB[];

//             /** TaskUpdatePushResp addDailyTaskList. */
//             public addDailyTaskList: luck.protobuf.IDailyTaskPB[];

//             /** TaskUpdatePushResp addWeekTaskList. */
//             public addWeekTaskList: luck.protobuf.IWeekTaskPB[];

//             /** TaskUpdatePushResp addRewardTaskList. */
//             public addRewardTaskList: luck.protobuf.IRewardTaskPB[];

//             /** TaskUpdatePushResp addGangTaskList. */
//             public addGangTaskList: luck.protobuf.IGangTaskPB[];

//             /** TaskUpdatePushResp updateMainTaskList. */
//             public updateMainTaskList: luck.protobuf.IMainTaskPB[];

//             /** TaskUpdatePushResp updateDailyTaskList. */
//             public updateDailyTaskList: luck.protobuf.IDailyTaskPB[];

//             /** TaskUpdatePushResp updateWeekTaskList. */
//             public updateWeekTaskList: luck.protobuf.IWeekTaskPB[];

//             /** TaskUpdatePushResp updateRewardTaskList. */
//             public updateRewardTaskList: luck.protobuf.IRewardTaskPB[];

//             /** TaskUpdatePushResp updateGangTaskList. */
//             public updateGangTaskList: luck.protobuf.IGangTaskPB[];

//             /** TaskUpdatePushResp delMainTaskList. */
//             public delMainTaskList: number[];

//             /** TaskUpdatePushResp delDailyTaskList. */
//             public delDailyTaskList: number[];

//             /** TaskUpdatePushResp delWeekTaskList. */
//             public delWeekTaskList: number[];

//             /** TaskUpdatePushResp delRewardTaskList. */
//             public delRewardTaskList: number[];

//             /** TaskUpdatePushResp delGangTaskList. */
//             public delGangTaskList: number[];

//             /** TaskUpdatePushResp dailyTaskActivity. */
//             public dailyTaskActivity: number;

//             /** TaskUpdatePushResp addAchievementTaskList. */
//             public addAchievementTaskList: luck.protobuf.IAchievementTaskPB[];

//             /** TaskUpdatePushResp updateAchievementTaskList. */
//             public updateAchievementTaskList: luck.protobuf.IAchievementTaskPB[];

//             /** TaskUpdatePushResp delAchievementTaskList. */
//             public delAchievementTaskList: number[];

//             /** TaskUpdatePushResp achievementPoint. */
//             public achievementPoint: (number|Long);

//             /** TaskUpdatePushResp updateAchievementType1List. */
//             public updateAchievementType1List: luck.protobuf.IAchievementTypePB[];

//             /** TaskUpdatePushResp updateAchievementType2List. */
//             public updateAchievementType2List: luck.protobuf.IAchievementTypePB[];

//             /** TaskUpdatePushResp addActivityTaskList. */
//             public addActivityTaskList: luck.protobuf.IActivityTaskPB[];

//             /** TaskUpdatePushResp updateActivityTaskList. */
//             public updateActivityTaskList: luck.protobuf.IActivityTaskPB[];

//             /** TaskUpdatePushResp delActivityTaskList. */
//             public delActivityTaskList: number[];

//             /** TaskUpdatePushResp addActivityTaskRewardList. */
//             public addActivityTaskRewardList: luck.protobuf.IactivityTaskRewardPB[];

//             /** TaskUpdatePushResp updateActivityTaskRewardList. */
//             public updateActivityTaskRewardList: luck.protobuf.IactivityTaskRewardPB[];

//             /** TaskUpdatePushResp delActivityTaskRewardList. */
//             public delActivityTaskRewardList: number[];

//             /** TaskUpdatePushResp addSpecialTaskList. */
//             public addSpecialTaskList: luck.protobuf.ISpecialTaskPB[];

//             /** TaskUpdatePushResp updateSpecialTaskList. */
//             public updateSpecialTaskList: luck.protobuf.ISpecialTaskPB[];

//             /** TaskUpdatePushResp delSpecialTaskList. */
//             public delSpecialTaskList: number[];

//             /** TaskUpdatePushResp gangTaskActivity. */
//             public gangTaskActivity: number;

//             /**
//              * Creates a new TaskUpdatePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns TaskUpdatePushResp instance
//              */
//             public static create(properties?: luck.protobuf.ITaskUpdatePushResp): luck.protobuf.TaskUpdatePushResp;

//             /**
//              * Encodes the specified TaskUpdatePushResp message. Does not implicitly {@link luck.protobuf.TaskUpdatePushResp.verify|verify} messages.
//              * @param message TaskUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ITaskUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified TaskUpdatePushResp message, length delimited. Does not implicitly {@link luck.protobuf.TaskUpdatePushResp.verify|verify} messages.
//              * @param message TaskUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ITaskUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a TaskUpdatePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns TaskUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.TaskUpdatePushResp;

//             /**
//              * Decodes a TaskUpdatePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns TaskUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.TaskUpdatePushResp;

//             /**
//              * Verifies a TaskUpdatePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawTaskResp. */
//         interface IdrawTaskResp {

//             /** drawTaskResp result */
//             result: number;

//             /** drawTaskResp gold */
//             gold?: (number|Long|null);

//             /** drawTaskResp diamond */
//             diamond?: (number|Long|null);

//             /** drawTaskResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawTaskResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawTaskResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawTaskResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawTaskResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** drawTaskResp exp */
//             exp?: (number|null);

//             /** drawTaskResp DailyActivityReward */
//             DailyActivityReward?: (number|null);

//             /** drawTaskResp gangContribute */
//             gangContribute?: (number|null);

//             /** drawTaskResp gangExp */
//             gangExp?: (number|null);

//             /** drawTaskResp gang */
//             gang?: (luck.protobuf.IGangPB|null);

//             /** drawTaskResp gangVitality */
//             gangVitality?: (number|null);
//         }

//         /** Represents a drawTaskResp. */
//         class drawTaskResp implements IdrawTaskResp {

//             /**
//              * Constructs a new drawTaskResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawTaskResp);

//             /** drawTaskResp result. */
//             public result: number;

//             /** drawTaskResp gold. */
//             public gold: (number|Long);

//             /** drawTaskResp diamond. */
//             public diamond: (number|Long);

//             /** drawTaskResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawTaskResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawTaskResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawTaskResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawTaskResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** drawTaskResp exp. */
//             public exp: number;

//             /** drawTaskResp DailyActivityReward. */
//             public DailyActivityReward: number;

//             /** drawTaskResp gangContribute. */
//             public gangContribute: number;

//             /** drawTaskResp gangExp. */
//             public gangExp: number;

//             /** drawTaskResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /** drawTaskResp gangVitality. */
//             public gangVitality: number;

//             /**
//              * Creates a new drawTaskResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawTaskResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawTaskResp): luck.protobuf.drawTaskResp;

//             /**
//              * Encodes the specified drawTaskResp message. Does not implicitly {@link luck.protobuf.drawTaskResp.verify|verify} messages.
//              * @param message drawTaskResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawTaskResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawTaskResp message, length delimited. Does not implicitly {@link luck.protobuf.drawTaskResp.verify|verify} messages.
//              * @param message drawTaskResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawTaskResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawTaskResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawTaskResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawTaskResp;

//             /**
//              * Decodes a drawTaskResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawTaskResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawTaskResp;

//             /**
//              * Verifies a drawTaskResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawDailyVitalityRewardResp. */
//         interface IdrawDailyVitalityRewardResp {

//             /** drawDailyVitalityRewardResp result */
//             result: number;

//             /** drawDailyVitalityRewardResp gold */
//             gold?: (number|Long|null);

//             /** drawDailyVitalityRewardResp diamond */
//             diamond?: (number|Long|null);

//             /** drawDailyVitalityRewardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawDailyVitalityRewardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawDailyVitalityRewardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawDailyVitalityRewardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawDailyVitalityRewardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** drawDailyVitalityRewardResp dailyVitalityRewardList */
//             dailyVitalityRewardList?: (number[]|null);
//         }

//         /** Represents a drawDailyVitalityRewardResp. */
//         class drawDailyVitalityRewardResp implements IdrawDailyVitalityRewardResp {

//             /**
//              * Constructs a new drawDailyVitalityRewardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawDailyVitalityRewardResp);

//             /** drawDailyVitalityRewardResp result. */
//             public result: number;

//             /** drawDailyVitalityRewardResp gold. */
//             public gold: (number|Long);

//             /** drawDailyVitalityRewardResp diamond. */
//             public diamond: (number|Long);

//             /** drawDailyVitalityRewardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawDailyVitalityRewardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawDailyVitalityRewardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawDailyVitalityRewardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawDailyVitalityRewardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** drawDailyVitalityRewardResp dailyVitalityRewardList. */
//             public dailyVitalityRewardList: number[];

//             /**
//              * Creates a new drawDailyVitalityRewardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawDailyVitalityRewardResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawDailyVitalityRewardResp): luck.protobuf.drawDailyVitalityRewardResp;

//             /**
//              * Encodes the specified drawDailyVitalityRewardResp message. Does not implicitly {@link luck.protobuf.drawDailyVitalityRewardResp.verify|verify} messages.
//              * @param message drawDailyVitalityRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawDailyVitalityRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawDailyVitalityRewardResp message, length delimited. Does not implicitly {@link luck.protobuf.drawDailyVitalityRewardResp.verify|verify} messages.
//              * @param message drawDailyVitalityRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawDailyVitalityRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawDailyVitalityRewardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawDailyVitalityRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawDailyVitalityRewardResp;

//             /**
//              * Decodes a drawDailyVitalityRewardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawDailyVitalityRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawDailyVitalityRewardResp;

//             /**
//              * Verifies a drawDailyVitalityRewardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a createPVETeamResp. */
//         interface IcreatePVETeamResp {

//             /** createPVETeamResp result */
//             result: number;

//             /** createPVETeamResp PVETeam */
//             PVETeam?: (luck.protobuf.IPVETeamPB|null);
//         }

//         /** Represents a createPVETeamResp. */
//         class createPVETeamResp implements IcreatePVETeamResp {

//             /**
//              * Constructs a new createPVETeamResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IcreatePVETeamResp);

//             /** createPVETeamResp result. */
//             public result: number;

//             /** createPVETeamResp PVETeam. */
//             public PVETeam?: (luck.protobuf.IPVETeamPB|null);

//             /**
//              * Creates a new createPVETeamResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns createPVETeamResp instance
//              */
//             public static create(properties?: luck.protobuf.IcreatePVETeamResp): luck.protobuf.createPVETeamResp;

//             /**
//              * Encodes the specified createPVETeamResp message. Does not implicitly {@link luck.protobuf.createPVETeamResp.verify|verify} messages.
//              * @param message createPVETeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IcreatePVETeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified createPVETeamResp message, length delimited. Does not implicitly {@link luck.protobuf.createPVETeamResp.verify|verify} messages.
//              * @param message createPVETeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IcreatePVETeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a createPVETeamResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns createPVETeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.createPVETeamResp;

//             /**
//              * Decodes a createPVETeamResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns createPVETeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.createPVETeamResp;

//             /**
//              * Verifies a createPVETeamResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVEInviteResp. */
//         interface IPVEInviteResp {

//             /** PVEInviteResp result */
//             result: number;
//         }

//         /** Represents a PVEInviteResp. */
//         class PVEInviteResp implements IPVEInviteResp {

//             /**
//              * Constructs a new PVEInviteResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVEInviteResp);

//             /** PVEInviteResp result. */
//             public result: number;

//             /**
//              * Creates a new PVEInviteResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVEInviteResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVEInviteResp): luck.protobuf.PVEInviteResp;

//             /**
//              * Encodes the specified PVEInviteResp message. Does not implicitly {@link luck.protobuf.PVEInviteResp.verify|verify} messages.
//              * @param message PVEInviteResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVEInviteResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVEInviteResp message, length delimited. Does not implicitly {@link luck.protobuf.PVEInviteResp.verify|verify} messages.
//              * @param message PVEInviteResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVEInviteResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVEInviteResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVEInviteResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVEInviteResp;

//             /**
//              * Decodes a PVEInviteResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVEInviteResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVEInviteResp;

//             /**
//              * Verifies a PVEInviteResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVEInvitePushResp. */
//         interface IPVEInvitePushResp {

//             /** PVEInvitePushResp InviteId */
//             InviteId: (number|Long);

//             /** PVEInvitePushResp PVETeamId */
//             PVETeamId: (number|Long);

//             /** PVEInvitePushResp inviteCode */
//             inviteCode: string;

//             /** PVEInvitePushResp customsType */
//             customsType: number;

//             /** PVEInvitePushResp customsId */
//             customsId: number;
//         }

//         /** Represents a PVEInvitePushResp. */
//         class PVEInvitePushResp implements IPVEInvitePushResp {

//             /**
//              * Constructs a new PVEInvitePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVEInvitePushResp);

//             /** PVEInvitePushResp InviteId. */
//             public InviteId: (number|Long);

//             /** PVEInvitePushResp PVETeamId. */
//             public PVETeamId: (number|Long);

//             /** PVEInvitePushResp inviteCode. */
//             public inviteCode: string;

//             /** PVEInvitePushResp customsType. */
//             public customsType: number;

//             /** PVEInvitePushResp customsId. */
//             public customsId: number;

//             /**
//              * Creates a new PVEInvitePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVEInvitePushResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVEInvitePushResp): luck.protobuf.PVEInvitePushResp;

//             /**
//              * Encodes the specified PVEInvitePushResp message. Does not implicitly {@link luck.protobuf.PVEInvitePushResp.verify|verify} messages.
//              * @param message PVEInvitePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVEInvitePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVEInvitePushResp message, length delimited. Does not implicitly {@link luck.protobuf.PVEInvitePushResp.verify|verify} messages.
//              * @param message PVEInvitePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVEInvitePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVEInvitePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVEInvitePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVEInvitePushResp;

//             /**
//              * Decodes a PVEInvitePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVEInvitePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVEInvitePushResp;

//             /**
//              * Verifies a PVEInvitePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an applyJoinTeamResp. */
//         interface IapplyJoinTeamResp {

//             /** applyJoinTeamResp result */
//             result: number;

//             /** applyJoinTeamResp PVETeam */
//             PVETeam?: (luck.protobuf.IPVETeamPB|null);
//         }

//         /** Represents an applyJoinTeamResp. */
//         class applyJoinTeamResp implements IapplyJoinTeamResp {

//             /**
//              * Constructs a new applyJoinTeamResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IapplyJoinTeamResp);

//             /** applyJoinTeamResp result. */
//             public result: number;

//             /** applyJoinTeamResp PVETeam. */
//             public PVETeam?: (luck.protobuf.IPVETeamPB|null);

//             /**
//              * Creates a new applyJoinTeamResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns applyJoinTeamResp instance
//              */
//             public static create(properties?: luck.protobuf.IapplyJoinTeamResp): luck.protobuf.applyJoinTeamResp;

//             /**
//              * Encodes the specified applyJoinTeamResp message. Does not implicitly {@link luck.protobuf.applyJoinTeamResp.verify|verify} messages.
//              * @param message applyJoinTeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IapplyJoinTeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified applyJoinTeamResp message, length delimited. Does not implicitly {@link luck.protobuf.applyJoinTeamResp.verify|verify} messages.
//              * @param message applyJoinTeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IapplyJoinTeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an applyJoinTeamResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns applyJoinTeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.applyJoinTeamResp;

//             /**
//              * Decodes an applyJoinTeamResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns applyJoinTeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.applyJoinTeamResp;

//             /**
//              * Verifies an applyJoinTeamResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an approveJoinTeamResp. */
//         interface IapproveJoinTeamResp {

//             /** approveJoinTeamResp result */
//             result: number;

//             /** approveJoinTeamResp PVETeam */
//             PVETeam?: (luck.protobuf.IPVETeamPB|null);
//         }

//         /** Represents an approveJoinTeamResp. */
//         class approveJoinTeamResp implements IapproveJoinTeamResp {

//             /**
//              * Constructs a new approveJoinTeamResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IapproveJoinTeamResp);

//             /** approveJoinTeamResp result. */
//             public result: number;

//             /** approveJoinTeamResp PVETeam. */
//             public PVETeam?: (luck.protobuf.IPVETeamPB|null);

//             /**
//              * Creates a new approveJoinTeamResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns approveJoinTeamResp instance
//              */
//             public static create(properties?: luck.protobuf.IapproveJoinTeamResp): luck.protobuf.approveJoinTeamResp;

//             /**
//              * Encodes the specified approveJoinTeamResp message. Does not implicitly {@link luck.protobuf.approveJoinTeamResp.verify|verify} messages.
//              * @param message approveJoinTeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IapproveJoinTeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified approveJoinTeamResp message, length delimited. Does not implicitly {@link luck.protobuf.approveJoinTeamResp.verify|verify} messages.
//              * @param message approveJoinTeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IapproveJoinTeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an approveJoinTeamResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns approveJoinTeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.approveJoinTeamResp;

//             /**
//              * Decodes an approveJoinTeamResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns approveJoinTeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.approveJoinTeamResp;

//             /**
//              * Verifies an approveJoinTeamResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an approveJoinTeamPushResp. */
//         interface IapproveJoinTeamPushResp {

//             /** approveJoinTeamPushResp PVETeam */
//             PVETeam: luck.protobuf.IPVETeamPB;
//         }

//         /** Represents an approveJoinTeamPushResp. */
//         class approveJoinTeamPushResp implements IapproveJoinTeamPushResp {

//             /**
//              * Constructs a new approveJoinTeamPushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IapproveJoinTeamPushResp);

//             /** approveJoinTeamPushResp PVETeam. */
//             public PVETeam: luck.protobuf.IPVETeamPB;

//             /**
//              * Creates a new approveJoinTeamPushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns approveJoinTeamPushResp instance
//              */
//             public static create(properties?: luck.protobuf.IapproveJoinTeamPushResp): luck.protobuf.approveJoinTeamPushResp;

//             /**
//              * Encodes the specified approveJoinTeamPushResp message. Does not implicitly {@link luck.protobuf.approveJoinTeamPushResp.verify|verify} messages.
//              * @param message approveJoinTeamPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IapproveJoinTeamPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified approveJoinTeamPushResp message, length delimited. Does not implicitly {@link luck.protobuf.approveJoinTeamPushResp.verify|verify} messages.
//              * @param message approveJoinTeamPushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IapproveJoinTeamPushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an approveJoinTeamPushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns approveJoinTeamPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.approveJoinTeamPushResp;

//             /**
//              * Decodes an approveJoinTeamPushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns approveJoinTeamPushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.approveJoinTeamPushResp;

//             /**
//              * Verifies an approveJoinTeamPushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVEPrepareResp. */
//         interface IPVEPrepareResp {

//             /** PVEPrepareResp result */
//             result: number;

//             /** PVEPrepareResp PVETeam */
//             PVETeam?: (luck.protobuf.IPVETeamPB|null);
//         }

//         /** Represents a PVEPrepareResp. */
//         class PVEPrepareResp implements IPVEPrepareResp {

//             /**
//              * Constructs a new PVEPrepareResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVEPrepareResp);

//             /** PVEPrepareResp result. */
//             public result: number;

//             /** PVEPrepareResp PVETeam. */
//             public PVETeam?: (luck.protobuf.IPVETeamPB|null);

//             /**
//              * Creates a new PVEPrepareResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVEPrepareResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVEPrepareResp): luck.protobuf.PVEPrepareResp;

//             /**
//              * Encodes the specified PVEPrepareResp message. Does not implicitly {@link luck.protobuf.PVEPrepareResp.verify|verify} messages.
//              * @param message PVEPrepareResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVEPrepareResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVEPrepareResp message, length delimited. Does not implicitly {@link luck.protobuf.PVEPrepareResp.verify|verify} messages.
//              * @param message PVEPrepareResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVEPrepareResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVEPrepareResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVEPrepareResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVEPrepareResp;

//             /**
//              * Decodes a PVEPrepareResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVEPrepareResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVEPrepareResp;

//             /**
//              * Verifies a PVEPrepareResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVESelectCustomsResp. */
//         interface IPVESelectCustomsResp {

//             /** PVESelectCustomsResp result */
//             result: number;

//             /** PVESelectCustomsResp PVETeam */
//             PVETeam?: (luck.protobuf.IPVETeamPB|null);
//         }

//         /** Represents a PVESelectCustomsResp. */
//         class PVESelectCustomsResp implements IPVESelectCustomsResp {

//             /**
//              * Constructs a new PVESelectCustomsResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVESelectCustomsResp);

//             /** PVESelectCustomsResp result. */
//             public result: number;

//             /** PVESelectCustomsResp PVETeam. */
//             public PVETeam?: (luck.protobuf.IPVETeamPB|null);

//             /**
//              * Creates a new PVESelectCustomsResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVESelectCustomsResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVESelectCustomsResp): luck.protobuf.PVESelectCustomsResp;

//             /**
//              * Encodes the specified PVESelectCustomsResp message. Does not implicitly {@link luck.protobuf.PVESelectCustomsResp.verify|verify} messages.
//              * @param message PVESelectCustomsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVESelectCustomsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVESelectCustomsResp message, length delimited. Does not implicitly {@link luck.protobuf.PVESelectCustomsResp.verify|verify} messages.
//              * @param message PVESelectCustomsResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVESelectCustomsResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVESelectCustomsResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVESelectCustomsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVESelectCustomsResp;

//             /**
//              * Decodes a PVESelectCustomsResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVESelectCustomsResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVESelectCustomsResp;

//             /**
//              * Verifies a PVESelectCustomsResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVETeamUpdatePushResp. */
//         interface IPVETeamUpdatePushResp {

//             /** PVETeamUpdatePushResp PVETeam */
//             PVETeam: luck.protobuf.IPVETeamPB;
//         }

//         /** Represents a PVETeamUpdatePushResp. */
//         class PVETeamUpdatePushResp implements IPVETeamUpdatePushResp {

//             /**
//              * Constructs a new PVETeamUpdatePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVETeamUpdatePushResp);

//             /** PVETeamUpdatePushResp PVETeam. */
//             public PVETeam: luck.protobuf.IPVETeamPB;

//             /**
//              * Creates a new PVETeamUpdatePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVETeamUpdatePushResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVETeamUpdatePushResp): luck.protobuf.PVETeamUpdatePushResp;

//             /**
//              * Encodes the specified PVETeamUpdatePushResp message. Does not implicitly {@link luck.protobuf.PVETeamUpdatePushResp.verify|verify} messages.
//              * @param message PVETeamUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVETeamUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVETeamUpdatePushResp message, length delimited. Does not implicitly {@link luck.protobuf.PVETeamUpdatePushResp.verify|verify} messages.
//              * @param message PVETeamUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVETeamUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVETeamUpdatePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVETeamUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVETeamUpdatePushResp;

//             /**
//              * Decodes a PVETeamUpdatePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVETeamUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVETeamUpdatePushResp;

//             /**
//              * Verifies a PVETeamUpdatePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a QuitPVETeamResp. */
//         interface IQuitPVETeamResp {

//             /** QuitPVETeamResp result */
//             result: number;
//         }

//         /** Represents a QuitPVETeamResp. */
//         class QuitPVETeamResp implements IQuitPVETeamResp {

//             /**
//              * Constructs a new QuitPVETeamResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IQuitPVETeamResp);

//             /** QuitPVETeamResp result. */
//             public result: number;

//             /**
//              * Creates a new QuitPVETeamResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns QuitPVETeamResp instance
//              */
//             public static create(properties?: luck.protobuf.IQuitPVETeamResp): luck.protobuf.QuitPVETeamResp;

//             /**
//              * Encodes the specified QuitPVETeamResp message. Does not implicitly {@link luck.protobuf.QuitPVETeamResp.verify|verify} messages.
//              * @param message QuitPVETeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IQuitPVETeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified QuitPVETeamResp message, length delimited. Does not implicitly {@link luck.protobuf.QuitPVETeamResp.verify|verify} messages.
//              * @param message QuitPVETeamResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IQuitPVETeamResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a QuitPVETeamResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns QuitPVETeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.QuitPVETeamResp;

//             /**
//              * Decodes a QuitPVETeamResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns QuitPVETeamResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.QuitPVETeamResp;

//             /**
//              * Verifies a QuitPVETeamResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a LoadGangShopResp. */
//         interface ILoadGangShopResp {

//             /** LoadGangShopResp result */
//             result: number;

//             /** LoadGangShopResp gangShopList */
//             gangShopList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents a LoadGangShopResp. */
//         class LoadGangShopResp implements ILoadGangShopResp {

//             /**
//              * Constructs a new LoadGangShopResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ILoadGangShopResp);

//             /** LoadGangShopResp result. */
//             public result: number;

//             /** LoadGangShopResp gangShopList. */
//             public gangShopList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new LoadGangShopResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns LoadGangShopResp instance
//              */
//             public static create(properties?: luck.protobuf.ILoadGangShopResp): luck.protobuf.LoadGangShopResp;

//             /**
//              * Encodes the specified LoadGangShopResp message. Does not implicitly {@link luck.protobuf.LoadGangShopResp.verify|verify} messages.
//              * @param message LoadGangShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ILoadGangShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified LoadGangShopResp message, length delimited. Does not implicitly {@link luck.protobuf.LoadGangShopResp.verify|verify} messages.
//              * @param message LoadGangShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ILoadGangShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a LoadGangShopResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns LoadGangShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.LoadGangShopResp;

//             /**
//              * Decodes a LoadGangShopResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns LoadGangShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.LoadGangShopResp;

//             /**
//              * Verifies a LoadGangShopResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GetPlayerInfoResp. */
//         interface IGetPlayerInfoResp {

//             /** GetPlayerInfoResp result */
//             result: number;

//             /** GetPlayerInfoResp playerList */
//             playerList?: (luck.protobuf.IPlayerPB[]|null);
//         }

//         /** Represents a GetPlayerInfoResp. */
//         class GetPlayerInfoResp implements IGetPlayerInfoResp {

//             /**
//              * Constructs a new GetPlayerInfoResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGetPlayerInfoResp);

//             /** GetPlayerInfoResp result. */
//             public result: number;

//             /** GetPlayerInfoResp playerList. */
//             public playerList: luck.protobuf.IPlayerPB[];

//             /**
//              * Creates a new GetPlayerInfoResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GetPlayerInfoResp instance
//              */
//             public static create(properties?: luck.protobuf.IGetPlayerInfoResp): luck.protobuf.GetPlayerInfoResp;

//             /**
//              * Encodes the specified GetPlayerInfoResp message. Does not implicitly {@link luck.protobuf.GetPlayerInfoResp.verify|verify} messages.
//              * @param message GetPlayerInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGetPlayerInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GetPlayerInfoResp message, length delimited. Does not implicitly {@link luck.protobuf.GetPlayerInfoResp.verify|verify} messages.
//              * @param message GetPlayerInfoResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGetPlayerInfoResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GetPlayerInfoResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GetPlayerInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GetPlayerInfoResp;

//             /**
//              * Decodes a GetPlayerInfoResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GetPlayerInfoResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GetPlayerInfoResp;

//             /**
//              * Verifies a GetPlayerInfoResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PVETeamStartBattleResp. */
//         interface IPVETeamStartBattleResp {

//             /** PVETeamStartBattleResp result */
//             result: number;

//             /** PVETeamStartBattleResp battleServerIP */
//             battleServerIP?: (string|null);

//             /** PVETeamStartBattleResp battleServerPort */
//             battleServerPort?: (number|null);

//             /** PVETeamStartBattleResp battleRoomId */
//             battleRoomId?: (number|Long|null);
//         }

//         /** Represents a PVETeamStartBattleResp. */
//         class PVETeamStartBattleResp implements IPVETeamStartBattleResp {

//             /**
//              * Constructs a new PVETeamStartBattleResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPVETeamStartBattleResp);

//             /** PVETeamStartBattleResp result. */
//             public result: number;

//             /** PVETeamStartBattleResp battleServerIP. */
//             public battleServerIP: string;

//             /** PVETeamStartBattleResp battleServerPort. */
//             public battleServerPort: number;

//             /** PVETeamStartBattleResp battleRoomId. */
//             public battleRoomId: (number|Long);

//             /**
//              * Creates a new PVETeamStartBattleResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PVETeamStartBattleResp instance
//              */
//             public static create(properties?: luck.protobuf.IPVETeamStartBattleResp): luck.protobuf.PVETeamStartBattleResp;

//             /**
//              * Encodes the specified PVETeamStartBattleResp message. Does not implicitly {@link luck.protobuf.PVETeamStartBattleResp.verify|verify} messages.
//              * @param message PVETeamStartBattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPVETeamStartBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PVETeamStartBattleResp message, length delimited. Does not implicitly {@link luck.protobuf.PVETeamStartBattleResp.verify|verify} messages.
//              * @param message PVETeamStartBattleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPVETeamStartBattleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PVETeamStartBattleResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PVETeamStartBattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PVETeamStartBattleResp;

//             /**
//              * Decodes a PVETeamStartBattleResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PVETeamStartBattleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PVETeamStartBattleResp;

//             /**
//              * Verifies a PVETeamStartBattleResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gangShopBuyResp. */
//         interface IgangShopBuyResp {

//             /** gangShopBuyResp result */
//             result: number;

//             /** gangShopBuyResp gold */
//             gold?: (number|Long|null);

//             /** gangShopBuyResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** gangShopBuyResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** gangShopBuyResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** gangShopBuyResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** gangShopBuyResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** gangShopBuyResp shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents a gangShopBuyResp. */
//         class gangShopBuyResp implements IgangShopBuyResp {

//             /**
//              * Constructs a new gangShopBuyResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgangShopBuyResp);

//             /** gangShopBuyResp result. */
//             public result: number;

//             /** gangShopBuyResp gold. */
//             public gold: (number|Long);

//             /** gangShopBuyResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** gangShopBuyResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** gangShopBuyResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** gangShopBuyResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** gangShopBuyResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** gangShopBuyResp shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new gangShopBuyResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gangShopBuyResp instance
//              */
//             public static create(properties?: luck.protobuf.IgangShopBuyResp): luck.protobuf.gangShopBuyResp;

//             /**
//              * Encodes the specified gangShopBuyResp message. Does not implicitly {@link luck.protobuf.gangShopBuyResp.verify|verify} messages.
//              * @param message gangShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgangShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gangShopBuyResp message, length delimited. Does not implicitly {@link luck.protobuf.gangShopBuyResp.verify|verify} messages.
//              * @param message gangShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgangShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gangShopBuyResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gangShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gangShopBuyResp;

//             /**
//              * Decodes a gangShopBuyResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gangShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gangShopBuyResp;

//             /**
//              * Verifies a gangShopBuyResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a playerFightingResp. */
//         interface IplayerFightingResp {

//             /** playerFightingResp result */
//             result: number;

//             /** playerFightingResp fighting */
//             fighting: (number|Long);
//         }

//         /** Represents a playerFightingResp. */
//         class playerFightingResp implements IplayerFightingResp {

//             /**
//              * Constructs a new playerFightingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IplayerFightingResp);

//             /** playerFightingResp result. */
//             public result: number;

//             /** playerFightingResp fighting. */
//             public fighting: (number|Long);

//             /**
//              * Creates a new playerFightingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns playerFightingResp instance
//              */
//             public static create(properties?: luck.protobuf.IplayerFightingResp): luck.protobuf.playerFightingResp;

//             /**
//              * Encodes the specified playerFightingResp message. Does not implicitly {@link luck.protobuf.playerFightingResp.verify|verify} messages.
//              * @param message playerFightingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IplayerFightingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified playerFightingResp message, length delimited. Does not implicitly {@link luck.protobuf.playerFightingResp.verify|verify} messages.
//              * @param message playerFightingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IplayerFightingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a playerFightingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns playerFightingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.playerFightingResp;

//             /**
//              * Decodes a playerFightingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns playerFightingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.playerFightingResp;

//             /**
//              * Verifies a playerFightingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a playerEquipFightingResp. */
//         interface IplayerEquipFightingResp {

//             /** playerEquipFightingResp result */
//             result: number;

//             /** playerEquipFightingResp fighting */
//             fighting: (number|Long);
//         }

//         /** Represents a playerEquipFightingResp. */
//         class playerEquipFightingResp implements IplayerEquipFightingResp {

//             /**
//              * Constructs a new playerEquipFightingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IplayerEquipFightingResp);

//             /** playerEquipFightingResp result. */
//             public result: number;

//             /** playerEquipFightingResp fighting. */
//             public fighting: (number|Long);

//             /**
//              * Creates a new playerEquipFightingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns playerEquipFightingResp instance
//              */
//             public static create(properties?: luck.protobuf.IplayerEquipFightingResp): luck.protobuf.playerEquipFightingResp;

//             /**
//              * Encodes the specified playerEquipFightingResp message. Does not implicitly {@link luck.protobuf.playerEquipFightingResp.verify|verify} messages.
//              * @param message playerEquipFightingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IplayerEquipFightingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified playerEquipFightingResp message, length delimited. Does not implicitly {@link luck.protobuf.playerEquipFightingResp.verify|verify} messages.
//              * @param message playerEquipFightingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IplayerEquipFightingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a playerEquipFightingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns playerEquipFightingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.playerEquipFightingResp;

//             /**
//              * Decodes a playerEquipFightingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns playerEquipFightingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.playerEquipFightingResp;

//             /**
//              * Verifies a playerEquipFightingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a rankingResp. */
//         interface IrankingResp {

//             /** rankingResp result */
//             result: number;

//             /** rankingResp sixStarEquipRankIngList */
//             sixStarEquipRankIngList?: (luck.protobuf.IsixStarEquipRankIngPB[]|null);

//             /** rankingResp fightingRankingList */
//             fightingRankingList?: (luck.protobuf.IfightingRankIngPB[]|null);

//             /** rankingResp diamondConsumeRankIngList */
//             diamondConsumeRankIngList?: (luck.protobuf.IdiamondConsumeRankIngPB[]|null);
//         }

//         /** Represents a rankingResp. */
//         class rankingResp implements IrankingResp {

//             /**
//              * Constructs a new rankingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrankingResp);

//             /** rankingResp result. */
//             public result: number;

//             /** rankingResp sixStarEquipRankIngList. */
//             public sixStarEquipRankIngList: luck.protobuf.IsixStarEquipRankIngPB[];

//             /** rankingResp fightingRankingList. */
//             public fightingRankingList: luck.protobuf.IfightingRankIngPB[];

//             /** rankingResp diamondConsumeRankIngList. */
//             public diamondConsumeRankIngList: luck.protobuf.IdiamondConsumeRankIngPB[];

//             /**
//              * Creates a new rankingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns rankingResp instance
//              */
//             public static create(properties?: luck.protobuf.IrankingResp): luck.protobuf.rankingResp;

//             /**
//              * Encodes the specified rankingResp message. Does not implicitly {@link luck.protobuf.rankingResp.verify|verify} messages.
//              * @param message rankingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrankingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified rankingResp message, length delimited. Does not implicitly {@link luck.protobuf.rankingResp.verify|verify} messages.
//              * @param message rankingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrankingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a rankingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns rankingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.rankingResp;

//             /**
//              * Decodes a rankingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns rankingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.rankingResp;

//             /**
//              * Verifies a rankingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gainAchievementSeriesAwardResp. */
//         interface IgainAchievementSeriesAwardResp {

//             /** gainAchievementSeriesAwardResp result */
//             result: number;

//             /** gainAchievementSeriesAwardResp gold */
//             gold?: (number|Long|null);

//             /** gainAchievementSeriesAwardResp diamond */
//             diamond?: (number|Long|null);

//             /** gainAchievementSeriesAwardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** gainAchievementSeriesAwardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** gainAchievementSeriesAwardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** gainAchievementSeriesAwardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** gainAchievementSeriesAwardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** gainAchievementSeriesAwardResp exp */
//             exp?: (number|null);

//             /** gainAchievementSeriesAwardResp DailyActivityReward */
//             DailyActivityReward?: (number|null);

//             /** gainAchievementSeriesAwardResp gangContribute */
//             gangContribute?: (number|null);

//             /** gainAchievementSeriesAwardResp gangExp */
//             gangExp?: (number|null);
//         }

//         /** Represents a gainAchievementSeriesAwardResp. */
//         class gainAchievementSeriesAwardResp implements IgainAchievementSeriesAwardResp {

//             /**
//              * Constructs a new gainAchievementSeriesAwardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgainAchievementSeriesAwardResp);

//             /** gainAchievementSeriesAwardResp result. */
//             public result: number;

//             /** gainAchievementSeriesAwardResp gold. */
//             public gold: (number|Long);

//             /** gainAchievementSeriesAwardResp diamond. */
//             public diamond: (number|Long);

//             /** gainAchievementSeriesAwardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** gainAchievementSeriesAwardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** gainAchievementSeriesAwardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** gainAchievementSeriesAwardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** gainAchievementSeriesAwardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** gainAchievementSeriesAwardResp exp. */
//             public exp: number;

//             /** gainAchievementSeriesAwardResp DailyActivityReward. */
//             public DailyActivityReward: number;

//             /** gainAchievementSeriesAwardResp gangContribute. */
//             public gangContribute: number;

//             /** gainAchievementSeriesAwardResp gangExp. */
//             public gangExp: number;

//             /**
//              * Creates a new gainAchievementSeriesAwardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gainAchievementSeriesAwardResp instance
//              */
//             public static create(properties?: luck.protobuf.IgainAchievementSeriesAwardResp): luck.protobuf.gainAchievementSeriesAwardResp;

//             /**
//              * Encodes the specified gainAchievementSeriesAwardResp message. Does not implicitly {@link luck.protobuf.gainAchievementSeriesAwardResp.verify|verify} messages.
//              * @param message gainAchievementSeriesAwardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgainAchievementSeriesAwardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gainAchievementSeriesAwardResp message, length delimited. Does not implicitly {@link luck.protobuf.gainAchievementSeriesAwardResp.verify|verify} messages.
//              * @param message gainAchievementSeriesAwardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgainAchievementSeriesAwardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gainAchievementSeriesAwardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gainAchievementSeriesAwardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gainAchievementSeriesAwardResp;

//             /**
//              * Decodes a gainAchievementSeriesAwardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gainAchievementSeriesAwardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gainAchievementSeriesAwardResp;

//             /**
//              * Verifies a gainAchievementSeriesAwardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawVipRewardResp. */
//         interface IdrawVipRewardResp {

//             /** drawVipRewardResp result */
//             result: number;

//             /** drawVipRewardResp gold */
//             gold?: (number|Long|null);

//             /** drawVipRewardResp diamond */
//             diamond?: (number|Long|null);

//             /** drawVipRewardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawVipRewardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawVipRewardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawVipRewardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawVipRewardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a drawVipRewardResp. */
//         class drawVipRewardResp implements IdrawVipRewardResp {

//             /**
//              * Constructs a new drawVipRewardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawVipRewardResp);

//             /** drawVipRewardResp result. */
//             public result: number;

//             /** drawVipRewardResp gold. */
//             public gold: (number|Long);

//             /** drawVipRewardResp diamond. */
//             public diamond: (number|Long);

//             /** drawVipRewardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawVipRewardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawVipRewardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawVipRewardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawVipRewardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new drawVipRewardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawVipRewardResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawVipRewardResp): luck.protobuf.drawVipRewardResp;

//             /**
//              * Encodes the specified drawVipRewardResp message. Does not implicitly {@link luck.protobuf.drawVipRewardResp.verify|verify} messages.
//              * @param message drawVipRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawVipRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawVipRewardResp message, length delimited. Does not implicitly {@link luck.protobuf.drawVipRewardResp.verify|verify} messages.
//              * @param message drawVipRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawVipRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawVipRewardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawVipRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawVipRewardResp;

//             /**
//              * Decodes a drawVipRewardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawVipRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawVipRewardResp;

//             /**
//              * Verifies a drawVipRewardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a rechargeResp. */
//         interface IrechargeResp {

//             /** rechargeResp result */
//             result: number;
//         }

//         /** Represents a rechargeResp. */
//         class rechargeResp implements IrechargeResp {

//             /**
//              * Constructs a new rechargeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrechargeResp);

//             /** rechargeResp result. */
//             public result: number;

//             /**
//              * Creates a new rechargeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns rechargeResp instance
//              */
//             public static create(properties?: luck.protobuf.IrechargeResp): luck.protobuf.rechargeResp;

//             /**
//              * Encodes the specified rechargeResp message. Does not implicitly {@link luck.protobuf.rechargeResp.verify|verify} messages.
//              * @param message rechargeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrechargeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified rechargeResp message, length delimited. Does not implicitly {@link luck.protobuf.rechargeResp.verify|verify} messages.
//              * @param message rechargeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrechargeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a rechargeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns rechargeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.rechargeResp;

//             /**
//              * Decodes a rechargeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns rechargeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.rechargeResp;

//             /**
//              * Verifies a rechargeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a WorldNoticePushResp. */
//         interface IWorldNoticePushResp {

//             /** WorldNoticePushResp horseRaceId */
//             horseRaceId: number;

//             /** WorldNoticePushResp playerName */
//             playerName?: (string|null);

//             /** WorldNoticePushResp weapon */
//             weapon?: (luck.protobuf.IWeaponPB|null);

//             /** WorldNoticePushResp clothes */
//             clothes?: (luck.protobuf.IClothesPB|null);

//             /** WorldNoticePushResp card */
//             card?: (luck.protobuf.ICardPB|null);

//             /** WorldNoticePushResp materials */
//             materials?: (luck.protobuf.IMaterialsPB|null);

//             /** WorldNoticePushResp gangName */
//             gangName?: (string|null);

//             /** WorldNoticePushResp achievementId */
//             achievementId?: (number|null);

//             /** WorldNoticePushResp chatContent */
//             chatContent?: (string|null);
//         }

//         /** Represents a WorldNoticePushResp. */
//         class WorldNoticePushResp implements IWorldNoticePushResp {

//             /**
//              * Constructs a new WorldNoticePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IWorldNoticePushResp);

//             /** WorldNoticePushResp horseRaceId. */
//             public horseRaceId: number;

//             /** WorldNoticePushResp playerName. */
//             public playerName: string;

//             /** WorldNoticePushResp weapon. */
//             public weapon?: (luck.protobuf.IWeaponPB|null);

//             /** WorldNoticePushResp clothes. */
//             public clothes?: (luck.protobuf.IClothesPB|null);

//             /** WorldNoticePushResp card. */
//             public card?: (luck.protobuf.ICardPB|null);

//             /** WorldNoticePushResp materials. */
//             public materials?: (luck.protobuf.IMaterialsPB|null);

//             /** WorldNoticePushResp gangName. */
//             public gangName: string;

//             /** WorldNoticePushResp achievementId. */
//             public achievementId: number;

//             /** WorldNoticePushResp chatContent. */
//             public chatContent: string;

//             /**
//              * Creates a new WorldNoticePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns WorldNoticePushResp instance
//              */
//             public static create(properties?: luck.protobuf.IWorldNoticePushResp): luck.protobuf.WorldNoticePushResp;

//             /**
//              * Encodes the specified WorldNoticePushResp message. Does not implicitly {@link luck.protobuf.WorldNoticePushResp.verify|verify} messages.
//              * @param message WorldNoticePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IWorldNoticePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified WorldNoticePushResp message, length delimited. Does not implicitly {@link luck.protobuf.WorldNoticePushResp.verify|verify} messages.
//              * @param message WorldNoticePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IWorldNoticePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a WorldNoticePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns WorldNoticePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.WorldNoticePushResp;

//             /**
//              * Decodes a WorldNoticePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns WorldNoticePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.WorldNoticePushResp;

//             /**
//              * Verifies a WorldNoticePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a noticeResp. */
//         interface InoticeResp {

//             /** noticeResp result */
//             result: number;

//             /** noticeResp noticeList */
//             noticeList?: (luck.protobuf.INoticePB[]|null);
//         }

//         /** Represents a noticeResp. */
//         class noticeResp implements InoticeResp {

//             /**
//              * Constructs a new noticeResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.InoticeResp);

//             /** noticeResp result. */
//             public result: number;

//             /** noticeResp noticeList. */
//             public noticeList: luck.protobuf.INoticePB[];

//             /**
//              * Creates a new noticeResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns noticeResp instance
//              */
//             public static create(properties?: luck.protobuf.InoticeResp): luck.protobuf.noticeResp;

//             /**
//              * Encodes the specified noticeResp message. Does not implicitly {@link luck.protobuf.noticeResp.verify|verify} messages.
//              * @param message noticeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.InoticeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified noticeResp message, length delimited. Does not implicitly {@link luck.protobuf.noticeResp.verify|verify} messages.
//              * @param message noticeResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.InoticeResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a noticeResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns noticeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.noticeResp;

//             /**
//              * Decodes a noticeResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns noticeResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.noticeResp;

//             /**
//              * Verifies a noticeResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PushRepetitionLoginResp. */
//         interface IPushRepetitionLoginResp {
//         }

//         /** Represents a PushRepetitionLoginResp. */
//         class PushRepetitionLoginResp implements IPushRepetitionLoginResp {

//             /**
//              * Constructs a new PushRepetitionLoginResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPushRepetitionLoginResp);

//             /**
//              * Creates a new PushRepetitionLoginResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PushRepetitionLoginResp instance
//              */
//             public static create(properties?: luck.protobuf.IPushRepetitionLoginResp): luck.protobuf.PushRepetitionLoginResp;

//             /**
//              * Encodes the specified PushRepetitionLoginResp message. Does not implicitly {@link luck.protobuf.PushRepetitionLoginResp.verify|verify} messages.
//              * @param message PushRepetitionLoginResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPushRepetitionLoginResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PushRepetitionLoginResp message, length delimited. Does not implicitly {@link luck.protobuf.PushRepetitionLoginResp.verify|verify} messages.
//              * @param message PushRepetitionLoginResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPushRepetitionLoginResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PushRepetitionLoginResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PushRepetitionLoginResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PushRepetitionLoginResp;

//             /**
//              * Decodes a PushRepetitionLoginResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PushRepetitionLoginResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PushRepetitionLoginResp;

//             /**
//              * Verifies a PushRepetitionLoginResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a GangUpdatePushResp. */
//         interface IGangUpdatePushResp {

//             /** GangUpdatePushResp gang */
//             gang: luck.protobuf.IGangPB;
//         }

//         /** Represents a GangUpdatePushResp. */
//         class GangUpdatePushResp implements IGangUpdatePushResp {

//             /**
//              * Constructs a new GangUpdatePushResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IGangUpdatePushResp);

//             /** GangUpdatePushResp gang. */
//             public gang: luck.protobuf.IGangPB;

//             /**
//              * Creates a new GangUpdatePushResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns GangUpdatePushResp instance
//              */
//             public static create(properties?: luck.protobuf.IGangUpdatePushResp): luck.protobuf.GangUpdatePushResp;

//             /**
//              * Encodes the specified GangUpdatePushResp message. Does not implicitly {@link luck.protobuf.GangUpdatePushResp.verify|verify} messages.
//              * @param message GangUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IGangUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified GangUpdatePushResp message, length delimited. Does not implicitly {@link luck.protobuf.GangUpdatePushResp.verify|verify} messages.
//              * @param message GangUpdatePushResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IGangUpdatePushResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a GangUpdatePushResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns GangUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.GangUpdatePushResp;

//             /**
//              * Decodes a GangUpdatePushResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns GangUpdatePushResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.GangUpdatePushResp;

//             /**
//              * Verifies a GangUpdatePushResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an AddBlackListResp. */
//         interface IAddBlackListResp {

//             /** AddBlackListResp result */
//             result: number;

//             /** AddBlackListResp blackList */
//             blackList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents an AddBlackListResp. */
//         class AddBlackListResp implements IAddBlackListResp {

//             /**
//              * Constructs a new AddBlackListResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IAddBlackListResp);

//             /** AddBlackListResp result. */
//             public result: number;

//             /** AddBlackListResp blackList. */
//             public blackList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new AddBlackListResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns AddBlackListResp instance
//              */
//             public static create(properties?: luck.protobuf.IAddBlackListResp): luck.protobuf.AddBlackListResp;

//             /**
//              * Encodes the specified AddBlackListResp message. Does not implicitly {@link luck.protobuf.AddBlackListResp.verify|verify} messages.
//              * @param message AddBlackListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IAddBlackListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified AddBlackListResp message, length delimited. Does not implicitly {@link luck.protobuf.AddBlackListResp.verify|verify} messages.
//              * @param message AddBlackListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IAddBlackListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an AddBlackListResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns AddBlackListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.AddBlackListResp;

//             /**
//              * Decodes an AddBlackListResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns AddBlackListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.AddBlackListResp;

//             /**
//              * Verifies an AddBlackListResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a DelBlackListResp. */
//         interface IDelBlackListResp {

//             /** DelBlackListResp result */
//             result: number;

//             /** DelBlackListResp blackList */
//             blackList?: (luck.protobuf.ISimplePlayerPB[]|null);
//         }

//         /** Represents a DelBlackListResp. */
//         class DelBlackListResp implements IDelBlackListResp {

//             /**
//              * Constructs a new DelBlackListResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IDelBlackListResp);

//             /** DelBlackListResp result. */
//             public result: number;

//             /** DelBlackListResp blackList. */
//             public blackList: luck.protobuf.ISimplePlayerPB[];

//             /**
//              * Creates a new DelBlackListResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns DelBlackListResp instance
//              */
//             public static create(properties?: luck.protobuf.IDelBlackListResp): luck.protobuf.DelBlackListResp;

//             /**
//              * Encodes the specified DelBlackListResp message. Does not implicitly {@link luck.protobuf.DelBlackListResp.verify|verify} messages.
//              * @param message DelBlackListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IDelBlackListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified DelBlackListResp message, length delimited. Does not implicitly {@link luck.protobuf.DelBlackListResp.verify|verify} messages.
//              * @param message DelBlackListResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IDelBlackListResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a DelBlackListResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns DelBlackListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.DelBlackListResp;

//             /**
//              * Decodes a DelBlackListResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns DelBlackListResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.DelBlackListResp;

//             /**
//              * Verifies a DelBlackListResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a buyGrowthCapitalResp. */
//         interface IbuyGrowthCapitalResp {

//             /** buyGrowthCapitalResp result */
//             result: number;
//         }

//         /** Represents a buyGrowthCapitalResp. */
//         class buyGrowthCapitalResp implements IbuyGrowthCapitalResp {

//             /**
//              * Constructs a new buyGrowthCapitalResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IbuyGrowthCapitalResp);

//             /** buyGrowthCapitalResp result. */
//             public result: number;

//             /**
//              * Creates a new buyGrowthCapitalResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns buyGrowthCapitalResp instance
//              */
//             public static create(properties?: luck.protobuf.IbuyGrowthCapitalResp): luck.protobuf.buyGrowthCapitalResp;

//             /**
//              * Encodes the specified buyGrowthCapitalResp message. Does not implicitly {@link luck.protobuf.buyGrowthCapitalResp.verify|verify} messages.
//              * @param message buyGrowthCapitalResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IbuyGrowthCapitalResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified buyGrowthCapitalResp message, length delimited. Does not implicitly {@link luck.protobuf.buyGrowthCapitalResp.verify|verify} messages.
//              * @param message buyGrowthCapitalResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IbuyGrowthCapitalResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a buyGrowthCapitalResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns buyGrowthCapitalResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.buyGrowthCapitalResp;

//             /**
//              * Decodes a buyGrowthCapitalResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns buyGrowthCapitalResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.buyGrowthCapitalResp;

//             /**
//              * Verifies a buyGrowthCapitalResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a loadActivityShopResp. */
//         interface IloadActivityShopResp {

//             /** loadActivityShopResp result */
//             result: number;

//             /** loadActivityShopResp shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents a loadActivityShopResp. */
//         class loadActivityShopResp implements IloadActivityShopResp {

//             /**
//              * Constructs a new loadActivityShopResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IloadActivityShopResp);

//             /** loadActivityShopResp result. */
//             public result: number;

//             /** loadActivityShopResp shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new loadActivityShopResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns loadActivityShopResp instance
//              */
//             public static create(properties?: luck.protobuf.IloadActivityShopResp): luck.protobuf.loadActivityShopResp;

//             /**
//              * Encodes the specified loadActivityShopResp message. Does not implicitly {@link luck.protobuf.loadActivityShopResp.verify|verify} messages.
//              * @param message loadActivityShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IloadActivityShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified loadActivityShopResp message, length delimited. Does not implicitly {@link luck.protobuf.loadActivityShopResp.verify|verify} messages.
//              * @param message loadActivityShopResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IloadActivityShopResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a loadActivityShopResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns loadActivityShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.loadActivityShopResp;

//             /**
//              * Decodes a loadActivityShopResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns loadActivityShopResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.loadActivityShopResp;

//             /**
//              * Verifies a loadActivityShopResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an activityShopBuyResp. */
//         interface IactivityShopBuyResp {

//             /** activityShopBuyResp result */
//             result: number;

//             /** activityShopBuyResp gold */
//             gold?: (number|Long|null);

//             /** activityShopBuyResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** activityShopBuyResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** activityShopBuyResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** activityShopBuyResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** activityShopBuyResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** activityShopBuyResp shopGoodsList */
//             shopGoodsList?: (luck.protobuf.IShopGoodsPB[]|null);
//         }

//         /** Represents an activityShopBuyResp. */
//         class activityShopBuyResp implements IactivityShopBuyResp {

//             /**
//              * Constructs a new activityShopBuyResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IactivityShopBuyResp);

//             /** activityShopBuyResp result. */
//             public result: number;

//             /** activityShopBuyResp gold. */
//             public gold: (number|Long);

//             /** activityShopBuyResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** activityShopBuyResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** activityShopBuyResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** activityShopBuyResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** activityShopBuyResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** activityShopBuyResp shopGoodsList. */
//             public shopGoodsList: luck.protobuf.IShopGoodsPB[];

//             /**
//              * Creates a new activityShopBuyResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns activityShopBuyResp instance
//              */
//             public static create(properties?: luck.protobuf.IactivityShopBuyResp): luck.protobuf.activityShopBuyResp;

//             /**
//              * Encodes the specified activityShopBuyResp message. Does not implicitly {@link luck.protobuf.activityShopBuyResp.verify|verify} messages.
//              * @param message activityShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IactivityShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified activityShopBuyResp message, length delimited. Does not implicitly {@link luck.protobuf.activityShopBuyResp.verify|verify} messages.
//              * @param message activityShopBuyResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IactivityShopBuyResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an activityShopBuyResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns activityShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.activityShopBuyResp;

//             /**
//              * Decodes an activityShopBuyResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns activityShopBuyResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.activityShopBuyResp;

//             /**
//              * Verifies an activityShopBuyResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a getDiggingResp. */
//         interface IgetDiggingResp {

//             /** getDiggingResp result */
//             result: number;

//             /** getDiggingResp digging */
//             digging: luck.protobuf.IDiggingPB;
//         }

//         /** Represents a getDiggingResp. */
//         class getDiggingResp implements IgetDiggingResp {

//             /**
//              * Constructs a new getDiggingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgetDiggingResp);

//             /** getDiggingResp result. */
//             public result: number;

//             /** getDiggingResp digging. */
//             public digging: luck.protobuf.IDiggingPB;

//             /**
//              * Creates a new getDiggingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns getDiggingResp instance
//              */
//             public static create(properties?: luck.protobuf.IgetDiggingResp): luck.protobuf.getDiggingResp;

//             /**
//              * Encodes the specified getDiggingResp message. Does not implicitly {@link luck.protobuf.getDiggingResp.verify|verify} messages.
//              * @param message getDiggingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgetDiggingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified getDiggingResp message, length delimited. Does not implicitly {@link luck.protobuf.getDiggingResp.verify|verify} messages.
//              * @param message getDiggingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgetDiggingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a getDiggingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns getDiggingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.getDiggingResp;

//             /**
//              * Decodes a getDiggingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns getDiggingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.getDiggingResp;

//             /**
//              * Verifies a getDiggingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a refreshDiggingResp. */
//         interface IrefreshDiggingResp {

//             /** refreshDiggingResp result */
//             result: number;

//             /** refreshDiggingResp digging */
//             digging: luck.protobuf.IDiggingPB;
//         }

//         /** Represents a refreshDiggingResp. */
//         class refreshDiggingResp implements IrefreshDiggingResp {

//             /**
//              * Constructs a new refreshDiggingResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IrefreshDiggingResp);

//             /** refreshDiggingResp result. */
//             public result: number;

//             /** refreshDiggingResp digging. */
//             public digging: luck.protobuf.IDiggingPB;

//             /**
//              * Creates a new refreshDiggingResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns refreshDiggingResp instance
//              */
//             public static create(properties?: luck.protobuf.IrefreshDiggingResp): luck.protobuf.refreshDiggingResp;

//             /**
//              * Encodes the specified refreshDiggingResp message. Does not implicitly {@link luck.protobuf.refreshDiggingResp.verify|verify} messages.
//              * @param message refreshDiggingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IrefreshDiggingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified refreshDiggingResp message, length delimited. Does not implicitly {@link luck.protobuf.refreshDiggingResp.verify|verify} messages.
//              * @param message refreshDiggingResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IrefreshDiggingResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a refreshDiggingResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns refreshDiggingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.refreshDiggingResp;

//             /**
//              * Decodes a refreshDiggingResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns refreshDiggingResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.refreshDiggingResp;

//             /**
//              * Verifies a refreshDiggingResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a getDiggingAwardResp. */
//         interface IgetDiggingAwardResp {

//             /** getDiggingAwardResp result */
//             result: number;

//             /** getDiggingAwardResp digging */
//             digging: luck.protobuf.IDiggingPB;

//             /** getDiggingAwardResp gold */
//             gold: (number|Long);

//             /** getDiggingAwardResp diamond */
//             diamond: (number|Long);
//         }

//         /** Represents a getDiggingAwardResp. */
//         class getDiggingAwardResp implements IgetDiggingAwardResp {

//             /**
//              * Constructs a new getDiggingAwardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgetDiggingAwardResp);

//             /** getDiggingAwardResp result. */
//             public result: number;

//             /** getDiggingAwardResp digging. */
//             public digging: luck.protobuf.IDiggingPB;

//             /** getDiggingAwardResp gold. */
//             public gold: (number|Long);

//             /** getDiggingAwardResp diamond. */
//             public diamond: (number|Long);

//             /**
//              * Creates a new getDiggingAwardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns getDiggingAwardResp instance
//              */
//             public static create(properties?: luck.protobuf.IgetDiggingAwardResp): luck.protobuf.getDiggingAwardResp;

//             /**
//              * Encodes the specified getDiggingAwardResp message. Does not implicitly {@link luck.protobuf.getDiggingAwardResp.verify|verify} messages.
//              * @param message getDiggingAwardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgetDiggingAwardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified getDiggingAwardResp message, length delimited. Does not implicitly {@link luck.protobuf.getDiggingAwardResp.verify|verify} messages.
//              * @param message getDiggingAwardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgetDiggingAwardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a getDiggingAwardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns getDiggingAwardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.getDiggingAwardResp;

//             /**
//              * Decodes a getDiggingAwardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns getDiggingAwardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.getDiggingAwardResp;

//             /**
//              * Verifies a getDiggingAwardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a StartDiggingPointResp. */
//         interface IStartDiggingPointResp {

//             /** StartDiggingPointResp result */
//             result: number;
//         }

//         /** Represents a StartDiggingPointResp. */
//         class StartDiggingPointResp implements IStartDiggingPointResp {

//             /**
//              * Constructs a new StartDiggingPointResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IStartDiggingPointResp);

//             /** StartDiggingPointResp result. */
//             public result: number;

//             /**
//              * Creates a new StartDiggingPointResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns StartDiggingPointResp instance
//              */
//             public static create(properties?: luck.protobuf.IStartDiggingPointResp): luck.protobuf.StartDiggingPointResp;

//             /**
//              * Encodes the specified StartDiggingPointResp message. Does not implicitly {@link luck.protobuf.StartDiggingPointResp.verify|verify} messages.
//              * @param message StartDiggingPointResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IStartDiggingPointResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified StartDiggingPointResp message, length delimited. Does not implicitly {@link luck.protobuf.StartDiggingPointResp.verify|verify} messages.
//              * @param message StartDiggingPointResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IStartDiggingPointResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a StartDiggingPointResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns StartDiggingPointResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.StartDiggingPointResp;

//             /**
//              * Decodes a StartDiggingPointResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns StartDiggingPointResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.StartDiggingPointResp;

//             /**
//              * Verifies a StartDiggingPointResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a FinishDiggingPointResp. */
//         interface IFinishDiggingPointResp {

//             /** FinishDiggingPointResp result */
//             result: number;

//             /** FinishDiggingPointResp gold */
//             gold?: (number|Long|null);

//             /** FinishDiggingPointResp diamond */
//             diamond?: (number|Long|null);

//             /** FinishDiggingPointResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** FinishDiggingPointResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** FinishDiggingPointResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** FinishDiggingPointResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** FinishDiggingPointResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** FinishDiggingPointResp checkNodeList */
//             checkNodeList?: (luck.protobuf.ICheckNode[]|null);

//             /** FinishDiggingPointResp gainExp */
//             gainExp?: (number|null);

//             /** FinishDiggingPointResp lv */
//             lv?: (number|null);
//         }

//         /** Represents a FinishDiggingPointResp. */
//         class FinishDiggingPointResp implements IFinishDiggingPointResp {

//             /**
//              * Constructs a new FinishDiggingPointResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IFinishDiggingPointResp);

//             /** FinishDiggingPointResp result. */
//             public result: number;

//             /** FinishDiggingPointResp gold. */
//             public gold: (number|Long);

//             /** FinishDiggingPointResp diamond. */
//             public diamond: (number|Long);

//             /** FinishDiggingPointResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** FinishDiggingPointResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** FinishDiggingPointResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** FinishDiggingPointResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** FinishDiggingPointResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** FinishDiggingPointResp checkNodeList. */
//             public checkNodeList: luck.protobuf.ICheckNode[];

//             /** FinishDiggingPointResp gainExp. */
//             public gainExp: number;

//             /** FinishDiggingPointResp lv. */
//             public lv: number;

//             /**
//              * Creates a new FinishDiggingPointResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns FinishDiggingPointResp instance
//              */
//             public static create(properties?: luck.protobuf.IFinishDiggingPointResp): luck.protobuf.FinishDiggingPointResp;

//             /**
//              * Encodes the specified FinishDiggingPointResp message. Does not implicitly {@link luck.protobuf.FinishDiggingPointResp.verify|verify} messages.
//              * @param message FinishDiggingPointResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IFinishDiggingPointResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified FinishDiggingPointResp message, length delimited. Does not implicitly {@link luck.protobuf.FinishDiggingPointResp.verify|verify} messages.
//              * @param message FinishDiggingPointResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IFinishDiggingPointResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a FinishDiggingPointResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns FinishDiggingPointResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.FinishDiggingPointResp;

//             /**
//              * Decodes a FinishDiggingPointResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns FinishDiggingPointResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.FinishDiggingPointResp;

//             /**
//              * Verifies a FinishDiggingPointResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawActivityTaskRewardResp. */
//         interface IdrawActivityTaskRewardResp {

//             /** drawActivityTaskRewardResp result */
//             result: number;

//             /** drawActivityTaskRewardResp gold */
//             gold?: (number|Long|null);

//             /** drawActivityTaskRewardResp diamond */
//             diamond?: (number|Long|null);

//             /** drawActivityTaskRewardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawActivityTaskRewardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawActivityTaskRewardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawActivityTaskRewardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawActivityTaskRewardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a drawActivityTaskRewardResp. */
//         class drawActivityTaskRewardResp implements IdrawActivityTaskRewardResp {

//             /**
//              * Constructs a new drawActivityTaskRewardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawActivityTaskRewardResp);

//             /** drawActivityTaskRewardResp result. */
//             public result: number;

//             /** drawActivityTaskRewardResp gold. */
//             public gold: (number|Long);

//             /** drawActivityTaskRewardResp diamond. */
//             public diamond: (number|Long);

//             /** drawActivityTaskRewardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawActivityTaskRewardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawActivityTaskRewardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawActivityTaskRewardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawActivityTaskRewardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new drawActivityTaskRewardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawActivityTaskRewardResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawActivityTaskRewardResp): luck.protobuf.drawActivityTaskRewardResp;

//             /**
//              * Encodes the specified drawActivityTaskRewardResp message. Does not implicitly {@link luck.protobuf.drawActivityTaskRewardResp.verify|verify} messages.
//              * @param message drawActivityTaskRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawActivityTaskRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawActivityTaskRewardResp message, length delimited. Does not implicitly {@link luck.protobuf.drawActivityTaskRewardResp.verify|verify} messages.
//              * @param message drawActivityTaskRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawActivityTaskRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawActivityTaskRewardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawActivityTaskRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawActivityTaskRewardResp;

//             /**
//              * Decodes a drawActivityTaskRewardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawActivityTaskRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawActivityTaskRewardResp;

//             /**
//              * Verifies a drawActivityTaskRewardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of an activityLotteryResp. */
//         interface IactivityLotteryResp {

//             /** activityLotteryResp result */
//             result: number;

//             /** activityLotteryResp gold */
//             gold?: (number|Long|null);

//             /** activityLotteryResp diamond */
//             diamond?: (number|Long|null);

//             /** activityLotteryResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** activityLotteryResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** activityLotteryResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** activityLotteryResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** activityLotteryResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** activityLotteryResp itemId */
//             itemId?: (number[]|null);
//         }

//         /** Represents an activityLotteryResp. */
//         class activityLotteryResp implements IactivityLotteryResp {

//             /**
//              * Constructs a new activityLotteryResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IactivityLotteryResp);

//             /** activityLotteryResp result. */
//             public result: number;

//             /** activityLotteryResp gold. */
//             public gold: (number|Long);

//             /** activityLotteryResp diamond. */
//             public diamond: (number|Long);

//             /** activityLotteryResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** activityLotteryResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** activityLotteryResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** activityLotteryResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** activityLotteryResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** activityLotteryResp itemId. */
//             public itemId: number[];

//             /**
//              * Creates a new activityLotteryResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns activityLotteryResp instance
//              */
//             public static create(properties?: luck.protobuf.IactivityLotteryResp): luck.protobuf.activityLotteryResp;

//             /**
//              * Encodes the specified activityLotteryResp message. Does not implicitly {@link luck.protobuf.activityLotteryResp.verify|verify} messages.
//              * @param message activityLotteryResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IactivityLotteryResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified activityLotteryResp message, length delimited. Does not implicitly {@link luck.protobuf.activityLotteryResp.verify|verify} messages.
//              * @param message activityLotteryResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IactivityLotteryResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes an activityLotteryResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns activityLotteryResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.activityLotteryResp;

//             /**
//              * Decodes an activityLotteryResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns activityLotteryResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.activityLotteryResp;

//             /**
//              * Verifies an activityLotteryResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeNameResp. */
//         interface IchangeNameResp {

//             /** changeNameResp result */
//             result: number;
//         }

//         /** Represents a changeNameResp. */
//         class changeNameResp implements IchangeNameResp {

//             /**
//              * Constructs a new changeNameResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeNameResp);

//             /** changeNameResp result. */
//             public result: number;

//             /**
//              * Creates a new changeNameResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeNameResp instance
//              */
//             public static create(properties?: luck.protobuf.IchangeNameResp): luck.protobuf.changeNameResp;

//             /**
//              * Encodes the specified changeNameResp message. Does not implicitly {@link luck.protobuf.changeNameResp.verify|verify} messages.
//              * @param message changeNameResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeNameResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeNameResp message, length delimited. Does not implicitly {@link luck.protobuf.changeNameResp.verify|verify} messages.
//              * @param message changeNameResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeNameResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeNameResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeNameResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeNameResp;

//             /**
//              * Decodes a changeNameResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeNameResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeNameResp;

//             /**
//              * Verifies a changeNameResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a saveNoviceGuideNumResp. */
//         interface IsaveNoviceGuideNumResp {

//             /** saveNoviceGuideNumResp result */
//             result: number;
//         }

//         /** Represents a saveNoviceGuideNumResp. */
//         class saveNoviceGuideNumResp implements IsaveNoviceGuideNumResp {

//             /**
//              * Constructs a new saveNoviceGuideNumResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsaveNoviceGuideNumResp);

//             /** saveNoviceGuideNumResp result. */
//             public result: number;

//             /**
//              * Creates a new saveNoviceGuideNumResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns saveNoviceGuideNumResp instance
//              */
//             public static create(properties?: luck.protobuf.IsaveNoviceGuideNumResp): luck.protobuf.saveNoviceGuideNumResp;

//             /**
//              * Encodes the specified saveNoviceGuideNumResp message. Does not implicitly {@link luck.protobuf.saveNoviceGuideNumResp.verify|verify} messages.
//              * @param message saveNoviceGuideNumResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsaveNoviceGuideNumResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified saveNoviceGuideNumResp message, length delimited. Does not implicitly {@link luck.protobuf.saveNoviceGuideNumResp.verify|verify} messages.
//              * @param message saveNoviceGuideNumResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsaveNoviceGuideNumResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a saveNoviceGuideNumResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns saveNoviceGuideNumResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.saveNoviceGuideNumResp;

//             /**
//              * Decodes a saveNoviceGuideNumResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns saveNoviceGuideNumResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.saveNoviceGuideNumResp;

//             /**
//              * Verifies a saveNoviceGuideNumResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawMonthCardResp. */
//         interface IdrawMonthCardResp {

//             /** drawMonthCardResp result */
//             result: number;

//             /** drawMonthCardResp gold */
//             gold?: (number|Long|null);

//             /** drawMonthCardResp diamond */
//             diamond?: (number|Long|null);

//             /** drawMonthCardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawMonthCardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawMonthCardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawMonthCardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawMonthCardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a drawMonthCardResp. */
//         class drawMonthCardResp implements IdrawMonthCardResp {

//             /**
//              * Constructs a new drawMonthCardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawMonthCardResp);

//             /** drawMonthCardResp result. */
//             public result: number;

//             /** drawMonthCardResp gold. */
//             public gold: (number|Long);

//             /** drawMonthCardResp diamond. */
//             public diamond: (number|Long);

//             /** drawMonthCardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawMonthCardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawMonthCardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawMonthCardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawMonthCardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new drawMonthCardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawMonthCardResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawMonthCardResp): luck.protobuf.drawMonthCardResp;

//             /**
//              * Encodes the specified drawMonthCardResp message. Does not implicitly {@link luck.protobuf.drawMonthCardResp.verify|verify} messages.
//              * @param message drawMonthCardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawMonthCardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawMonthCardResp message, length delimited. Does not implicitly {@link luck.protobuf.drawMonthCardResp.verify|verify} messages.
//              * @param message drawMonthCardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawMonthCardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawMonthCardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawMonthCardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawMonthCardResp;

//             /**
//              * Decodes a drawMonthCardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawMonthCardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawMonthCardResp;

//             /**
//              * Verifies a drawMonthCardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a roleChatResp. */
//         interface IroleChatResp {

//             /** roleChatResp result */
//             result: number;

//             /** roleChatResp addFavorability */
//             addFavorability?: (number|null);

//             /** roleChatResp addMood */
//             addMood?: (number|null);
//         }

//         /** Represents a roleChatResp. */
//         class roleChatResp implements IroleChatResp {

//             /**
//              * Constructs a new roleChatResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IroleChatResp);

//             /** roleChatResp result. */
//             public result: number;

//             /** roleChatResp addFavorability. */
//             public addFavorability: number;

//             /** roleChatResp addMood. */
//             public addMood: number;

//             /**
//              * Creates a new roleChatResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns roleChatResp instance
//              */
//             public static create(properties?: luck.protobuf.IroleChatResp): luck.protobuf.roleChatResp;

//             /**
//              * Encodes the specified roleChatResp message. Does not implicitly {@link luck.protobuf.roleChatResp.verify|verify} messages.
//              * @param message roleChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IroleChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified roleChatResp message, length delimited. Does not implicitly {@link luck.protobuf.roleChatResp.verify|verify} messages.
//              * @param message roleChatResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IroleChatResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a roleChatResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns roleChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.roleChatResp;

//             /**
//              * Decodes a roleChatResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns roleChatResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.roleChatResp;

//             /**
//              * Verifies a roleChatResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a roleInteractionResp. */
//         interface IroleInteractionResp {

//             /** roleInteractionResp result */
//             result: number;

//             /** roleInteractionResp addFavorability */
//             addFavorability?: (number|null);

//             /** roleInteractionResp addMood */
//             addMood?: (number|null);

//             /** roleInteractionResp actionId */
//             actionId?: (number|null);

//             /** roleInteractionResp wordId */
//             wordId?: (number|null);
//         }

//         /** Represents a roleInteractionResp. */
//         class roleInteractionResp implements IroleInteractionResp {

//             /**
//              * Constructs a new roleInteractionResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IroleInteractionResp);

//             /** roleInteractionResp result. */
//             public result: number;

//             /** roleInteractionResp addFavorability. */
//             public addFavorability: number;

//             /** roleInteractionResp addMood. */
//             public addMood: number;

//             /** roleInteractionResp actionId. */
//             public actionId: number;

//             /** roleInteractionResp wordId. */
//             public wordId: number;

//             /**
//              * Creates a new roleInteractionResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns roleInteractionResp instance
//              */
//             public static create(properties?: luck.protobuf.IroleInteractionResp): luck.protobuf.roleInteractionResp;

//             /**
//              * Encodes the specified roleInteractionResp message. Does not implicitly {@link luck.protobuf.roleInteractionResp.verify|verify} messages.
//              * @param message roleInteractionResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IroleInteractionResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified roleInteractionResp message, length delimited. Does not implicitly {@link luck.protobuf.roleInteractionResp.verify|verify} messages.
//              * @param message roleInteractionResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IroleInteractionResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a roleInteractionResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns roleInteractionResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.roleInteractionResp;

//             /**
//              * Decodes a roleInteractionResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns roleInteractionResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.roleInteractionResp;

//             /**
//              * Verifies a roleInteractionResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a strokeRoleResp. */
//         interface IstrokeRoleResp {

//             /** strokeRoleResp result */
//             result: number;

//             /** strokeRoleResp addFavorability */
//             addFavorability?: (number|null);

//             /** strokeRoleResp addMood */
//             addMood?: (number|null);

//             /** strokeRoleResp actionId */
//             actionId?: (number|null);

//             /** strokeRoleResp wordIdList */
//             wordIdList?: (number[]|null);
//         }

//         /** Represents a strokeRoleResp. */
//         class strokeRoleResp implements IstrokeRoleResp {

//             /**
//              * Constructs a new strokeRoleResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IstrokeRoleResp);

//             /** strokeRoleResp result. */
//             public result: number;

//             /** strokeRoleResp addFavorability. */
//             public addFavorability: number;

//             /** strokeRoleResp addMood. */
//             public addMood: number;

//             /** strokeRoleResp actionId. */
//             public actionId: number;

//             /** strokeRoleResp wordIdList. */
//             public wordIdList: number[];

//             /**
//              * Creates a new strokeRoleResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns strokeRoleResp instance
//              */
//             public static create(properties?: luck.protobuf.IstrokeRoleResp): luck.protobuf.strokeRoleResp;

//             /**
//              * Encodes the specified strokeRoleResp message. Does not implicitly {@link luck.protobuf.strokeRoleResp.verify|verify} messages.
//              * @param message strokeRoleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IstrokeRoleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified strokeRoleResp message, length delimited. Does not implicitly {@link luck.protobuf.strokeRoleResp.verify|verify} messages.
//              * @param message strokeRoleResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IstrokeRoleResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a strokeRoleResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns strokeRoleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.strokeRoleResp;

//             /**
//              * Decodes a strokeRoleResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns strokeRoleResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.strokeRoleResp;

//             /**
//              * Verifies a strokeRoleResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeRoleImageResp. */
//         interface IchangeRoleImageResp {

//             /** changeRoleImageResp result */
//             result: number;

//             /** changeRoleImageResp roleList */
//             roleList?: (luck.protobuf.IRolePB[]|null);
//         }

//         /** Represents a changeRoleImageResp. */
//         class changeRoleImageResp implements IchangeRoleImageResp {

//             /**
//              * Constructs a new changeRoleImageResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeRoleImageResp);

//             /** changeRoleImageResp result. */
//             public result: number;

//             /** changeRoleImageResp roleList. */
//             public roleList: luck.protobuf.IRolePB[];

//             /**
//              * Creates a new changeRoleImageResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeRoleImageResp instance
//              */
//             public static create(properties?: luck.protobuf.IchangeRoleImageResp): luck.protobuf.changeRoleImageResp;

//             /**
//              * Encodes the specified changeRoleImageResp message. Does not implicitly {@link luck.protobuf.changeRoleImageResp.verify|verify} messages.
//              * @param message changeRoleImageResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeRoleImageResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeRoleImageResp message, length delimited. Does not implicitly {@link luck.protobuf.changeRoleImageResp.verify|verify} messages.
//              * @param message changeRoleImageResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeRoleImageResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeRoleImageResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeRoleImageResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeRoleImageResp;

//             /**
//              * Decodes a changeRoleImageResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeRoleImageResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeRoleImageResp;

//             /**
//              * Verifies a changeRoleImageResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeHeadPortraitResp. */
//         interface IchangeHeadPortraitResp {

//             /** changeHeadPortraitResp result */
//             result: number;
//         }

//         /** Represents a changeHeadPortraitResp. */
//         class changeHeadPortraitResp implements IchangeHeadPortraitResp {

//             /**
//              * Constructs a new changeHeadPortraitResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeHeadPortraitResp);

//             /** changeHeadPortraitResp result. */
//             public result: number;

//             /**
//              * Creates a new changeHeadPortraitResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeHeadPortraitResp instance
//              */
//             public static create(properties?: luck.protobuf.IchangeHeadPortraitResp): luck.protobuf.changeHeadPortraitResp;

//             /**
//              * Encodes the specified changeHeadPortraitResp message. Does not implicitly {@link luck.protobuf.changeHeadPortraitResp.verify|verify} messages.
//              * @param message changeHeadPortraitResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeHeadPortraitResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeHeadPortraitResp message, length delimited. Does not implicitly {@link luck.protobuf.changeHeadPortraitResp.verify|verify} messages.
//              * @param message changeHeadPortraitResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeHeadPortraitResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeHeadPortraitResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeHeadPortraitResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeHeadPortraitResp;

//             /**
//              * Decodes a changeHeadPortraitResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeHeadPortraitResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeHeadPortraitResp;

//             /**
//              * Verifies a changeHeadPortraitResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a changeRahmenResp. */
//         interface IchangeRahmenResp {

//             /** changeRahmenResp result */
//             result: number;
//         }

//         /** Represents a changeRahmenResp. */
//         class changeRahmenResp implements IchangeRahmenResp {

//             /**
//              * Constructs a new changeRahmenResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IchangeRahmenResp);

//             /** changeRahmenResp result. */
//             public result: number;

//             /**
//              * Creates a new changeRahmenResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns changeRahmenResp instance
//              */
//             public static create(properties?: luck.protobuf.IchangeRahmenResp): luck.protobuf.changeRahmenResp;

//             /**
//              * Encodes the specified changeRahmenResp message. Does not implicitly {@link luck.protobuf.changeRahmenResp.verify|verify} messages.
//              * @param message changeRahmenResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IchangeRahmenResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified changeRahmenResp message, length delimited. Does not implicitly {@link luck.protobuf.changeRahmenResp.verify|verify} messages.
//              * @param message changeRahmenResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IchangeRahmenResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a changeRahmenResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns changeRahmenResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.changeRahmenResp;

//             /**
//              * Decodes a changeRahmenResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns changeRahmenResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.changeRahmenResp;

//             /**
//              * Verifies a changeRahmenResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a giveRoleGiftResp. */
//         interface IgiveRoleGiftResp {

//             /** giveRoleGiftResp result */
//             result: number;

//             /** giveRoleGiftResp addFavorability */
//             addFavorability?: (number|null);

//             /** giveRoleGiftResp addMood */
//             addMood?: (number|null);

//             /** giveRoleGiftResp actionId */
//             actionId?: (number|null);

//             /** giveRoleGiftResp wordId */
//             wordId?: (number|null);
//         }

//         /** Represents a giveRoleGiftResp. */
//         class giveRoleGiftResp implements IgiveRoleGiftResp {

//             /**
//              * Constructs a new giveRoleGiftResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgiveRoleGiftResp);

//             /** giveRoleGiftResp result. */
//             public result: number;

//             /** giveRoleGiftResp addFavorability. */
//             public addFavorability: number;

//             /** giveRoleGiftResp addMood. */
//             public addMood: number;

//             /** giveRoleGiftResp actionId. */
//             public actionId: number;

//             /** giveRoleGiftResp wordId. */
//             public wordId: number;

//             /**
//              * Creates a new giveRoleGiftResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns giveRoleGiftResp instance
//              */
//             public static create(properties?: luck.protobuf.IgiveRoleGiftResp): luck.protobuf.giveRoleGiftResp;

//             /**
//              * Encodes the specified giveRoleGiftResp message. Does not implicitly {@link luck.protobuf.giveRoleGiftResp.verify|verify} messages.
//              * @param message giveRoleGiftResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgiveRoleGiftResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified giveRoleGiftResp message, length delimited. Does not implicitly {@link luck.protobuf.giveRoleGiftResp.verify|verify} messages.
//              * @param message giveRoleGiftResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgiveRoleGiftResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a giveRoleGiftResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns giveRoleGiftResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.giveRoleGiftResp;

//             /**
//              * Decodes a giveRoleGiftResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns giveRoleGiftResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.giveRoleGiftResp;

//             /**
//              * Verifies a giveRoleGiftResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a gangSginInResp. */
//         interface IgangSginInResp {

//             /** gangSginInResp result */
//             result: number;

//             /** gangSginInResp sginInTime */
//             sginInTime?: (number|Long|null);

//             /** gangSginInResp gold */
//             gold?: (number|Long|null);

//             /** gangSginInResp diamond */
//             diamond?: (number|Long|null);

//             /** gangSginInResp gangContribute */
//             gangContribute?: (number|Long|null);

//             /** gangSginInResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** gangSginInResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** gangSginInResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** gangSginInResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** gangSginInResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);
//         }

//         /** Represents a gangSginInResp. */
//         class gangSginInResp implements IgangSginInResp {

//             /**
//              * Constructs a new gangSginInResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IgangSginInResp);

//             /** gangSginInResp result. */
//             public result: number;

//             /** gangSginInResp sginInTime. */
//             public sginInTime: (number|Long);

//             /** gangSginInResp gold. */
//             public gold: (number|Long);

//             /** gangSginInResp diamond. */
//             public diamond: (number|Long);

//             /** gangSginInResp gangContribute. */
//             public gangContribute: (number|Long);

//             /** gangSginInResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** gangSginInResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** gangSginInResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** gangSginInResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** gangSginInResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /**
//              * Creates a new gangSginInResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns gangSginInResp instance
//              */
//             public static create(properties?: luck.protobuf.IgangSginInResp): luck.protobuf.gangSginInResp;

//             /**
//              * Encodes the specified gangSginInResp message. Does not implicitly {@link luck.protobuf.gangSginInResp.verify|verify} messages.
//              * @param message gangSginInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IgangSginInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified gangSginInResp message, length delimited. Does not implicitly {@link luck.protobuf.gangSginInResp.verify|verify} messages.
//              * @param message gangSginInResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IgangSginInResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a gangSginInResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns gangSginInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.gangSginInResp;

//             /**
//              * Decodes a gangSginInResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns gangSginInResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.gangSginInResp;

//             /**
//              * Verifies a gangSginInResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a drawGangVitalityRewardResp. */
//         interface IdrawGangVitalityRewardResp {

//             /** drawGangVitalityRewardResp result */
//             result: number;

//             /** drawGangVitalityRewardResp gold */
//             gold?: (number|Long|null);

//             /** drawGangVitalityRewardResp diamond */
//             diamond?: (number|Long|null);

//             /** drawGangVitalityRewardResp weaponList */
//             weaponList?: (luck.protobuf.IWeaponPB[]|null);

//             /** drawGangVitalityRewardResp cardList */
//             cardList?: (luck.protobuf.ICardPB[]|null);

//             /** drawGangVitalityRewardResp clothesList */
//             clothesList?: (luck.protobuf.IClothesPB[]|null);

//             /** drawGangVitalityRewardResp propList */
//             propList?: (luck.protobuf.IPropPB[]|null);

//             /** drawGangVitalityRewardResp materialsList */
//             materialsList?: (luck.protobuf.IMaterialsPB[]|null);

//             /** drawGangVitalityRewardResp gangVitalityRewardList */
//             gangVitalityRewardList?: (number[]|null);

//             /** drawGangVitalityRewardResp gangContribute */
//             gangContribute?: (number|Long|null);

//             /** drawGangVitalityRewardResp gangExp */
//             gangExp?: (number|null);

//             /** drawGangVitalityRewardResp gang */
//             gang?: (luck.protobuf.IGangPB|null);
//         }

//         /** Represents a drawGangVitalityRewardResp. */
//         class drawGangVitalityRewardResp implements IdrawGangVitalityRewardResp {

//             /**
//              * Constructs a new drawGangVitalityRewardResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IdrawGangVitalityRewardResp);

//             /** drawGangVitalityRewardResp result. */
//             public result: number;

//             /** drawGangVitalityRewardResp gold. */
//             public gold: (number|Long);

//             /** drawGangVitalityRewardResp diamond. */
//             public diamond: (number|Long);

//             /** drawGangVitalityRewardResp weaponList. */
//             public weaponList: luck.protobuf.IWeaponPB[];

//             /** drawGangVitalityRewardResp cardList. */
//             public cardList: luck.protobuf.ICardPB[];

//             /** drawGangVitalityRewardResp clothesList. */
//             public clothesList: luck.protobuf.IClothesPB[];

//             /** drawGangVitalityRewardResp propList. */
//             public propList: luck.protobuf.IPropPB[];

//             /** drawGangVitalityRewardResp materialsList. */
//             public materialsList: luck.protobuf.IMaterialsPB[];

//             /** drawGangVitalityRewardResp gangVitalityRewardList. */
//             public gangVitalityRewardList: number[];

//             /** drawGangVitalityRewardResp gangContribute. */
//             public gangContribute: (number|Long);

//             /** drawGangVitalityRewardResp gangExp. */
//             public gangExp: number;

//             /** drawGangVitalityRewardResp gang. */
//             public gang?: (luck.protobuf.IGangPB|null);

//             /**
//              * Creates a new drawGangVitalityRewardResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns drawGangVitalityRewardResp instance
//              */
//             public static create(properties?: luck.protobuf.IdrawGangVitalityRewardResp): luck.protobuf.drawGangVitalityRewardResp;

//             /**
//              * Encodes the specified drawGangVitalityRewardResp message. Does not implicitly {@link luck.protobuf.drawGangVitalityRewardResp.verify|verify} messages.
//              * @param message drawGangVitalityRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IdrawGangVitalityRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified drawGangVitalityRewardResp message, length delimited. Does not implicitly {@link luck.protobuf.drawGangVitalityRewardResp.verify|verify} messages.
//              * @param message drawGangVitalityRewardResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IdrawGangVitalityRewardResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a drawGangVitalityRewardResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns drawGangVitalityRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.drawGangVitalityRewardResp;

//             /**
//              * Decodes a drawGangVitalityRewardResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns drawGangVitalityRewardResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.drawGangVitalityRewardResp;

//             /**
//              * Verifies a drawGangVitalityRewardResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a savePersonMessageResp. */
//         interface IsavePersonMessageResp {

//             /** savePersonMessageResp result */
//             result: number;
//         }

//         /** Represents a savePersonMessageResp. */
//         class savePersonMessageResp implements IsavePersonMessageResp {

//             /**
//              * Constructs a new savePersonMessageResp.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IsavePersonMessageResp);

//             /** savePersonMessageResp result. */
//             public result: number;

//             /**
//              * Creates a new savePersonMessageResp instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns savePersonMessageResp instance
//              */
//             public static create(properties?: luck.protobuf.IsavePersonMessageResp): luck.protobuf.savePersonMessageResp;

//             /**
//              * Encodes the specified savePersonMessageResp message. Does not implicitly {@link luck.protobuf.savePersonMessageResp.verify|verify} messages.
//              * @param message savePersonMessageResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IsavePersonMessageResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified savePersonMessageResp message, length delimited. Does not implicitly {@link luck.protobuf.savePersonMessageResp.verify|verify} messages.
//              * @param message savePersonMessageResp message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IsavePersonMessageResp, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a savePersonMessageResp message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns savePersonMessageResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.savePersonMessageResp;

//             /**
//              * Decodes a savePersonMessageResp message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns savePersonMessageResp
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.savePersonMessageResp;

//             /**
//              * Verifies a savePersonMessageResp message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a SendGameDataResq. */
//         interface ISendGameDataResq {
//         }

//         /** Represents a SendGameDataResq. */
//         class SendGameDataResq implements ISendGameDataResq {

//             /**
//              * Constructs a new SendGameDataResq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.ISendGameDataResq);

//             /**
//              * Creates a new SendGameDataResq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns SendGameDataResq instance
//              */
//             public static create(properties?: luck.protobuf.ISendGameDataResq): luck.protobuf.SendGameDataResq;

//             /**
//              * Encodes the specified SendGameDataResq message. Does not implicitly {@link luck.protobuf.SendGameDataResq.verify|verify} messages.
//              * @param message SendGameDataResq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.ISendGameDataResq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified SendGameDataResq message, length delimited. Does not implicitly {@link luck.protobuf.SendGameDataResq.verify|verify} messages.
//              * @param message SendGameDataResq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.ISendGameDataResq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a SendGameDataResq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns SendGameDataResq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.SendGameDataResq;

//             /**
//              * Decodes a SendGameDataResq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns SendGameDataResq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.SendGameDataResq;

//             /**
//              * Verifies a SendGameDataResq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }

//         /** Properties of a PushGameDataResq. */
//         interface IPushGameDataResq {

//             /** PushGameDataResq gameBulletData */
//             gameBulletData: luck.protobuf.IGameBulletDataPB;
//         }

//         /** Represents a PushGameDataResq. */
//         class PushGameDataResq implements IPushGameDataResq {

//             /**
//              * Constructs a new PushGameDataResq.
//              * @param [properties] Properties to set
//              */
//             constructor(properties?: luck.protobuf.IPushGameDataResq);

//             /** PushGameDataResq gameBulletData. */
//             public gameBulletData: luck.protobuf.IGameBulletDataPB;

//             /**
//              * Creates a new PushGameDataResq instance using the specified properties.
//              * @param [properties] Properties to set
//              * @returns PushGameDataResq instance
//              */
//             public static create(properties?: luck.protobuf.IPushGameDataResq): luck.protobuf.PushGameDataResq;

//             /**
//              * Encodes the specified PushGameDataResq message. Does not implicitly {@link luck.protobuf.PushGameDataResq.verify|verify} messages.
//              * @param message PushGameDataResq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encode(message: luck.protobuf.IPushGameDataResq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Encodes the specified PushGameDataResq message, length delimited. Does not implicitly {@link luck.protobuf.PushGameDataResq.verify|verify} messages.
//              * @param message PushGameDataResq message or plain object to encode
//              * @param [writer] Writer to encode to
//              * @returns Writer
//              */
//             public static encodeDelimited(message: luck.protobuf.IPushGameDataResq, writer?: protobuf.Writer): protobuf.Writer;

//             /**
//              * Decodes a PushGameDataResq message from the specified reader or buffer.
//              * @param reader Reader or buffer to decode from
//              * @param [length] Message length if known beforehand
//              * @returns PushGameDataResq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decode(reader: (protobuf.Reader|Uint8Array), length?: number): luck.protobuf.PushGameDataResq;

//             /**
//              * Decodes a PushGameDataResq message from the specified reader or buffer, length delimited.
//              * @param reader Reader or buffer to decode from
//              * @returns PushGameDataResq
//              * @throws {Error} If the payload is not a reader or valid buffer
//              * @throws {protobuf.util.ProtocolError} If required fields are missing
//              */
//             public static decodeDelimited(reader: (protobuf.Reader|Uint8Array)): luck.protobuf.PushGameDataResq;

//             /**
//              * Verifies a PushGameDataResq message.
//              * @param message Plain object to verify
//              * @returns `null` if valid, otherwise the reason why it is not
//              */
//             public static verify(message: { [k: string]: any }): (string|null);
//         }
//     }
// }
